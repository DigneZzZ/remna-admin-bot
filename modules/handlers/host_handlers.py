from telegram import Update, InlineKeyboardButton, InlineKeyboardMarkup
from telegram.ext import ContextTypes
import logging

from modules.config import MAIN_MENU, HOST_MENU, EDIT_HOST, EDIT_HOST_FIELD, CREATE_HOST
from modules.api.hosts import HostAPI
from modules.api.inbounds import InboundAPI
from modules.utils.formatters import format_host_details
from modules.handlers.start_handler import show_main_menu

logger = logging.getLogger(__name__)

async def show_hosts_menu(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """Show hosts menu"""
    keyboard = [
        [InlineKeyboardButton("üìã –°–ø–∏—Å–æ–∫ –≤—Å–µ—Ö —Ö–æ—Å—Ç–æ–≤", callback_data="list_hosts")],
        [InlineKeyboardButton("‚ûï –°–æ–∑–¥–∞—Ç—å —Ö–æ—Å—Ç", callback_data="create_host")],
        [InlineKeyboardButton("üîç –ü–æ–∏—Å–∫ —Ö–æ—Å—Ç–æ–≤", callback_data="search_hosts")],
        [InlineKeyboardButton("üîô –ù–∞–∑–∞–¥ –≤ –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é", callback_data="back_to_main")]
    ]
    reply_markup = InlineKeyboardMarkup(keyboard)

    message = "üåê *–£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ —Ö–æ—Å—Ç–∞–º–∏*\n\n"
    message += "–í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ:"

    # –ü—Ä–æ–≤–µ—Ä—è–µ–º callback_query
    if update.callback_query:
        await update.callback_query.edit_message_text(
            text=message,
            reply_markup=reply_markup,
            parse_mode="Markdown"
        )
    else:
        await update.effective_message.reply_text(
            text=message,
            reply_markup=reply_markup,
            parse_mode="Markdown"
        )
    
    return HOST_MENU

async def handle_hosts_menu(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """Handle hosts menu selection"""
    if not update.callback_query:
        return HOST_MENU
    
    query = update.callback_query
    await query.answer()
    data = query.data

    if data == "list_hosts":
        return await list_hosts(update, context)
    elif data == "create_host":
        return await start_create_host(update, context)
    elif data == "search_hosts":
        return await show_search_hosts_menu(update, context)
    elif data == "back_to_main":
        return await show_main_menu(update, context)
    
    # Handle host actions
    elif data.startswith("view_host_"):
        uuid = data.split("_")[2]
        return await show_host_details(update, context, uuid)
    elif data.startswith("enable_host_"):
        uuid = data.split("_")[2]
        return await enable_host(update, context, uuid)
    elif data.startswith("disable_host_"):
        uuid = data.split("_")[2]
        return await disable_host(update, context, uuid)
    elif data.startswith("edit_host_"):
        uuid = data.split("_")[2]
        return await start_edit_host(update, context, uuid)
    elif data.startswith("delete_host_"):
        uuid = data.split("_")[2]
        return await confirm_delete_host(update, context, uuid)
    elif data.startswith("confirm_delete_"):
        uuid = data.split("_")[2]
        return await delete_host(update, context, uuid)
    
    return HOST_MENU

async def list_hosts(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """List all hosts with improved response handling"""
    await update.callback_query.edit_message_text("üåê –ó–∞–≥—Ä—É–∑–∫–∞ —Å–ø–∏—Å–∫–∞ —Ö–æ—Å—Ç–æ–≤...")

    try:
        response = await HostAPI.get_all_hosts()
        
        # Handle different response formats from API
        hosts = None
        if isinstance(response, dict):
            # Check if response is wrapped in 'response' field
            if 'response' in response:
                hosts = response['response']
                logger.debug("Found hosts data in 'response' field")
            # Check if it's a single host object
            elif 'uuid' in response or 'remark' in response:
                hosts = [response]
                logger.debug("Found single host in response")
        elif isinstance(response, list):
            hosts = response
            logger.debug("Found hosts as direct list")
        
        if not hosts:
            keyboard = [[InlineKeyboardButton("üîô –ù–∞–∑–∞–¥", callback_data="back_to_hosts")]]
            reply_markup = InlineKeyboardMarkup(keyboard)
            
            await update.callback_query.edit_message_text(
                "‚ùå –•–æ—Å—Ç—ã –Ω–µ –Ω–∞–π–¥–µ–Ω—ã –∏–ª–∏ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ —Å–ø–∏—Å–∫–∞.",
                reply_markup=reply_markup
            )
            return HOST_MENU

        logger.info(f"Successfully loaded {len(hosts)} hosts")

        message = f"üåê *–•–æ—Å—Ç—ã* ({len(hosts)}):\n\n"

        for i, host in enumerate(hosts):
            status_emoji = "üü¢" if not host.get("isDisabled", False) else "üî¥"
            
            message += f"{i+1}. {status_emoji} *{host.get('remark', '–ë–µ–∑ –Ω–∞–∑–≤–∞–Ω–∏—è')}*\n"
            message += f"   üåê –ê–¥—Ä–µ—Å: {host.get('address', 'N/A')}:{host.get('port', 'N/A')}\n"
            
            inbound_uuid = host.get('inboundUuid', '')
            if inbound_uuid:
                message += f"   üîå Inbound: {inbound_uuid[:8]}...\n"
            
            message += "\n"

        # Add action buttons
        keyboard = []
        
        for host in hosts:
            remark = host.get('remark', '–ë–µ–∑ –Ω–∞–∑–≤–∞–Ω–∏—è')
            if len(remark) > 20:
                remark = remark[:17] + "..."
            keyboard.append([
                InlineKeyboardButton(f"üëÅÔ∏è {remark}", callback_data=f"view_host_{host['uuid']}")
            ])
        
        # Add back button
        keyboard.append([InlineKeyboardButton("üîô –ù–∞–∑–∞–¥", callback_data="back_to_hosts")])

        reply_markup = InlineKeyboardMarkup(keyboard)

        await update.callback_query.edit_message_text(
            text=message,
            reply_markup=reply_markup,
            parse_mode="Markdown"
        )

        return HOST_MENU
        
    except Exception as e:
        logger.error(f"Error loading hosts list: {e}")
        keyboard = [[InlineKeyboardButton("üîô –ù–∞–∑–∞–¥", callback_data="back_to_hosts")]]
        reply_markup = InlineKeyboardMarkup(keyboard)
        
        await update.callback_query.edit_message_text(
            "‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–≥—Ä—É–∑–∫–µ —Å–ø–∏—Å–∫–∞ —Ö–æ—Å—Ç–æ–≤.",
            reply_markup=reply_markup
        )
        return HOST_MENU

async def show_host_details(update: Update, context: ContextTypes.DEFAULT_TYPE, uuid: str):
    """Show detailed host information"""
    try:
        host = await HostAPI.get_host_by_uuid(uuid)
        if not host:
            await update.callback_query.edit_message_text(
                "‚ùå –•–æ—Å—Ç –Ω–µ –Ω–∞–π–¥–µ–Ω.",
                reply_markup=InlineKeyboardMarkup([[InlineKeyboardButton("üîô –ù–∞–∑–∞–¥", callback_data="list_hosts")]])
            )
            return HOST_MENU

        # Format host details
        formatted_details = format_host_details(host)
        
        keyboard = [
            [
                InlineKeyboardButton("‚úèÔ∏è –†–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞—Ç—å", callback_data=f"edit_host_{uuid}"),
                InlineKeyboardButton("üîÑ –í–∫–ª/–í—ã–∫–ª", callback_data=f"toggle_host_{uuid}")
            ],
            [
                InlineKeyboardButton("üóëÔ∏è –£–¥–∞–ª–∏—Ç—å", callback_data=f"delete_host_{uuid}"),
            ],
            [InlineKeyboardButton("üîô –ö —Å–ø–∏—Å–∫—É —Ö–æ—Å—Ç–æ–≤", callback_data="list_hosts")]
        ]
        reply_markup = InlineKeyboardMarkup(keyboard)

        await update.callback_query.edit_message_text(
            text=formatted_details,
            reply_markup=reply_markup,
            parse_mode="Markdown"
        )

    except Exception as e:
        logger.error(f"Error showing host details for {uuid}: {e}")
        await update.callback_query.edit_message_text(
            "‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–≥—Ä—É–∑–∫–µ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –æ —Ö–æ—Å—Ç–µ.",
            reply_markup=InlineKeyboardMarkup([[InlineKeyboardButton("üîô –ù–∞–∑–∞–¥", callback_data="list_hosts")]])
        )

    return HOST_MENU

async def enable_host(update: Update, context: ContextTypes.DEFAULT_TYPE, uuid: str):
    """Enable a host"""
    try:
        result = await HostAPI.enable_host(uuid)
        if result:
            await update.callback_query.edit_message_text("‚úÖ –•–æ—Å—Ç —É—Å–ø–µ—à–Ω–æ –≤–∫–ª—é—á–µ–Ω!")
        else:
            await update.callback_query.edit_message_text("‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –≤–∫–ª—é—á–∏—Ç—å —Ö–æ—Å—Ç.")
    except Exception as e:
        logger.error(f"Error enabling host {uuid}: {e}")
        await update.callback_query.edit_message_text("‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –≤–∫–ª—é—á–µ–Ω–∏–∏ —Ö–æ—Å—Ç–∞.")
    
    return HOST_MENU

async def disable_host(update: Update, context: ContextTypes.DEFAULT_TYPE, uuid: str):
    """Disable a host"""
    try:
        result = await HostAPI.disable_host(uuid)
        if result:
            await update.callback_query.edit_message_text("‚úÖ –•–æ—Å—Ç —É—Å–ø–µ—à–Ω–æ –æ—Ç–∫–ª—é—á–µ–Ω!")
        else:
            await update.callback_query.edit_message_text("‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –æ—Ç–∫–ª—é—á–∏—Ç—å —Ö–æ—Å—Ç.")
    except Exception as e:
        logger.error(f"Error disabling host {uuid}: {e}")
        await update.callback_query.edit_message_text("‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–∫–ª—é—á–µ–Ω–∏–∏ —Ö–æ—Å—Ç–∞.")
    
    return HOST_MENU

async def confirm_delete_host(update: Update, context: ContextTypes.DEFAULT_TYPE, uuid: str):
    """Confirm host deletion"""
    try:
        host = await HostAPI.get_host_by_uuid(uuid)
        if not host:
            await update.callback_query.edit_message_text(
                "‚ùå –•–æ—Å—Ç –Ω–µ –Ω–∞–π–¥–µ–Ω.",
                reply_markup=InlineKeyboardMarkup([[InlineKeyboardButton("üîô –ù–∞–∑–∞–¥", callback_data="list_hosts")]])
            )
            return HOST_MENU

        message = f"‚ö†Ô∏è *–ü–æ–¥—Ç–≤–µ—Ä–¥–∏—Ç–µ —É–¥–∞–ª–µ–Ω–∏–µ —Ö–æ—Å—Ç–∞*\n\n"
        message += f"üåê *–•–æ—Å—Ç:* {host.get('remark', '–ë–µ–∑ –Ω–∞–∑–≤–∞–Ω–∏—è')}\n"
        message += f"üìç *–ê–¥—Ä–µ—Å:* {host.get('address', 'N/A')}:{host.get('port', 'N/A')}\n\n"
        message += "‚ùó *–≠—Ç–æ –¥–µ–π—Å—Ç–≤–∏–µ –Ω–µ–ª—å–∑—è –æ—Ç–º–µ–Ω–∏—Ç—å!*"

        keyboard = [
            [
                InlineKeyboardButton("‚úÖ –î–∞, —É–¥–∞–ª–∏—Ç—å", callback_data=f"confirm_delete_{uuid}"),
                InlineKeyboardButton("‚ùå –û—Ç–º–µ–Ω–∞", callback_data=f"view_host_{uuid}")
            ]
        ]
        reply_markup = InlineKeyboardMarkup(keyboard)

        await update.callback_query.edit_message_text(
            text=message,
            reply_markup=reply_markup,
            parse_mode="Markdown"
        )

    except Exception as e:
        logger.error(f"Error confirming delete for host {uuid}: {e}")
        await update.callback_query.edit_message_text(
            "‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–¥–≥–æ—Ç–æ–≤–∫–µ —É–¥–∞–ª–µ–Ω–∏—è —Ö–æ—Å—Ç–∞.",
            reply_markup=InlineKeyboardMarkup([[InlineKeyboardButton("üîô –ù–∞–∑–∞–¥", callback_data="list_hosts")]])
        )

    return HOST_MENU

async def delete_host(update: Update, context: ContextTypes.DEFAULT_TYPE, uuid: str):
    """Delete a host"""
    try:
        result = await HostAPI.delete_host(uuid)
        if result:
            await update.callback_query.edit_message_text("‚úÖ –•–æ—Å—Ç —É—Å–ø–µ—à–Ω–æ —É–¥–∞–ª–µ–Ω!")
        else:
            await update.callback_query.edit_message_text("‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å —É–¥–∞–ª–∏—Ç—å —Ö–æ—Å—Ç.")
    except Exception as e:
        logger.error(f"Error deleting host {uuid}: {e}")
        await update.callback_query.edit_message_text("‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ —É–¥–∞–ª–µ–Ω–∏–∏ —Ö–æ—Å—Ç–∞.")
    
    return HOST_MENU

async def show_search_hosts_menu(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """Show host search menu"""
    await update.callback_query.edit_message_text(
        "üîç *–ü–æ–∏—Å–∫ —Ö–æ—Å—Ç–æ–≤*\n\n–í–≤–µ–¥–∏—Ç–µ –ø–∞—Ä–∞–º–µ—Ç—Ä –¥–ª—è –ø–æ–∏—Å–∫–∞:",
        parse_mode="Markdown",
        reply_markup=InlineKeyboardMarkup([[InlineKeyboardButton("üîô –ù–∞–∑–∞–¥", callback_data="back_to_hosts")]])
    )
    return HOST_MENU

async def start_create_host(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """Start host creation process"""
    await update.callback_query.edit_message_text("üîÑ –ü–æ–¥–≥–æ—Ç–æ–≤–∫–∞ –∫ —Å–æ–∑–¥–∞–Ω–∏—é —Ö–æ—Å—Ç–∞...")
    
    try:
        # Get available inbounds
        response = await InboundAPI.get_all_inbounds()
        
        # Parse inbounds response
        inbounds = None
        if isinstance(response, dict):
            if 'response' in response:
                inbounds = response['response']
            elif 'uuid' in response or 'tag' in response:
                inbounds = [response]
        elif isinstance(response, list):
            inbounds = response
        
        if not inbounds:
            await update.callback_query.edit_message_text(
                "‚ùå –ù–µ—Ç –¥–æ—Å—Ç—É–ø–Ω—ã—Ö Inbound'–æ–≤ –¥–ª—è —Å–æ–∑–¥–∞–Ω–∏—è —Ö–æ—Å—Ç–∞.",
                reply_markup=InlineKeyboardMarkup([[InlineKeyboardButton("üîô –ù–∞–∑–∞–¥", callback_data="back_to_hosts")]])
            )
            return HOST_MENU

        # Store creation context
        context.user_data["creating_host"] = {
            "step": "select_inbound",
            "inbounds": inbounds
        }

        message = "‚ûï *–°–æ–∑–¥–∞–Ω–∏–µ –Ω–æ–≤–æ–≥–æ —Ö–æ—Å—Ç–∞*\n\n"
        message += "–í—ã–±–µ—Ä–∏—Ç–µ Inbound –¥–ª—è —Ö–æ—Å—Ç–∞:"

        keyboard = []
        for inbound in inbounds:
            display_name = f"üîå {inbound.get('tag', 'Unknown')} ({inbound.get('type', 'Unknown')})"
            keyboard.append([InlineKeyboardButton(display_name, callback_data=f"select_inbound_{inbound['uuid']}")])

        keyboard.append([InlineKeyboardButton("üîô –ù–∞–∑–∞–¥", callback_data="back_to_hosts")])
        reply_markup = InlineKeyboardMarkup(keyboard)

        await update.callback_query.edit_message_text(
            text=message,
            reply_markup=reply_markup,
            parse_mode="Markdown"
        )

    except Exception as e:
        logger.error(f"Error starting host creation: {e}")
        await update.callback_query.edit_message_text(
            "‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–¥–≥–æ—Ç–æ–≤–∫–µ —Å–æ–∑–¥–∞–Ω–∏—è —Ö–æ—Å—Ç–∞.",
            reply_markup=InlineKeyboardMarkup([[InlineKeyboardButton("üîô –ù–∞–∑–∞–¥", callback_data="back_to_hosts")]])
        )

    return CREATE_HOST

async def start_edit_host(update: Update, context: ContextTypes.DEFAULT_TYPE, uuid: str):
    """Start host editing process"""
    try:
        host = await HostAPI.get_host_by_uuid(uuid)
        if not host:
            await update.callback_query.edit_message_text(
                "‚ùå –•–æ—Å—Ç –Ω–µ –Ω–∞–π–¥–µ–Ω.",
                reply_markup=InlineKeyboardMarkup([[InlineKeyboardButton("üîô –ù–∞–∑–∞–¥", callback_data="list_hosts")]])
            )
            return HOST_MENU

        # Store editing context
        context.user_data["editing_host"] = host
        context.user_data["editing_host_uuid"] = uuid

        message = f"‚úèÔ∏è *–†–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ —Ö–æ—Å—Ç–∞*\n\n"
        message += f"üåê *–¢–µ–∫—É—â–∏–π —Ö–æ—Å—Ç:* {host.get('remark', '–ë–µ–∑ –Ω–∞–∑–≤–∞–Ω–∏—è')}\n\n"
        message += "–í—ã–±–µ—Ä–∏—Ç–µ –ø–æ–ª–µ –¥–ª—è —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏—è:"

        keyboard = [
            [InlineKeyboardButton("üìù –ù–∞–∑–≤–∞–Ω–∏–µ", callback_data="edit_field_remark")],
            [InlineKeyboardButton("üåê –ê–¥—Ä–µ—Å", callback_data="edit_field_address")],
            [InlineKeyboardButton("üî¢ –ü–æ—Ä—Ç", callback_data="edit_field_port")],
            [InlineKeyboardButton("üîô –ù–∞–∑–∞–¥", callback_data=f"view_host_{uuid}")]
        ]
        reply_markup = InlineKeyboardMarkup(keyboard)

        await update.callback_query.edit_message_text(
            text=message,
            reply_markup=reply_markup,
            parse_mode="Markdown"
        )

    except Exception as e:
        logger.error(f"Error starting host edit for {uuid}: {e}")
        await update.callback_query.edit_message_text(
            "‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–¥–≥–æ—Ç–æ–≤–∫–µ —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏—è —Ö–æ—Å—Ç–∞.",
            reply_markup=InlineKeyboardMarkup([[InlineKeyboardButton("üîô –ù–∞–∑–∞–¥", callback_data="list_hosts")]])
        )

    return EDIT_HOST

async def handle_host_edit_menu(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """Handle host edit menu selections"""
    if not update.callback_query:
        return EDIT_HOST
    
    query = update.callback_query
    await query.answer()
    data = query.data

    if data.startswith("edit_field_"):
        field = data.split("_", 2)[2]  # Extract field name
        
        # Store editing field
        context.user_data["editing_field"] = field
        
        field_names = {
            "remark": "–Ω–∞–∑–≤–∞–Ω–∏–µ",
            "address": "–∞–¥—Ä–µ—Å",
            "port": "–ø–æ—Ä—Ç"
        }
        
        field_name = field_names.get(field, field)
        
        message = f"‚úèÔ∏è *–†–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –ø–æ–ª—è: {field_name}*\n\n"
        message += f"–í–≤–µ–¥–∏—Ç–µ –Ω–æ–≤–æ–µ –∑–Ω–∞—á–µ–Ω–∏–µ –¥–ª—è –ø–æ–ª—è '{field_name}':"
        
        keyboard = [[InlineKeyboardButton("üîô –û—Ç–º–µ–Ω–∞", callback_data="cancel_host_edit")]]
        reply_markup = InlineKeyboardMarkup(keyboard)
        
        await query.edit_message_text(
            text=message,
            reply_markup=reply_markup,
            parse_mode="Markdown"
        )
        
        return EDIT_HOST_FIELD
    
    elif data == "cancel_host_edit":
        return await handle_cancel_host_edit(update, context)
    
    return EDIT_HOST

async def handle_host_field_input(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """Handle input for host field editing"""
    if not update.message:
        return EDIT_HOST_FIELD
    
    try:
        new_value = update.message.text.strip()
        field = context.user_data.get("editing_field")
        host = context.user_data.get("editing_host")
        host_uuid = context.user_data.get("editing_host_uuid")
        
        if not field or not host or not host_uuid:
            await update.message.reply_text(
                "‚ùå –û—à–∏–±–∫–∞: –æ—Ç—Å—É—Ç—Å—Ç–≤—É—é—Ç –¥–∞–Ω–Ω—ã–µ –¥–ª—è —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏—è.",
                reply_markup=InlineKeyboardMarkup([[InlineKeyboardButton("üîô –ö —Ö–æ—Å—Ç–∞–º", callback_data="list_hosts")]])
            )
            return HOST_MENU
        
        # Validate input based on field
        if field == "port":
            try:
                port = int(new_value)
                if port < 1 or port > 65535:
                    await update.message.reply_text(
                        "‚ùå –ü–æ—Ä—Ç –¥–æ–ª–∂–µ–Ω –±—ã—Ç—å —á–∏—Å–ª–æ–º –æ—Ç 1 –¥–æ 65535.\n–í–≤–µ–¥–∏—Ç–µ –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ–µ –∑–Ω–∞—á–µ–Ω–∏–µ:",
                        reply_markup=InlineKeyboardMarkup([[InlineKeyboardButton("üîô –û—Ç–º–µ–Ω–∞", callback_data="cancel_host_edit")]])
                    )
                    return EDIT_HOST_FIELD
                new_value = port
            except ValueError:
                await update.message.reply_text(
                    "‚ùå –ü–æ—Ä—Ç –¥–æ–ª–∂–µ–Ω –±—ã—Ç—å —á–∏—Å–ª–æ–º.\n–í–≤–µ–¥–∏—Ç–µ –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ–µ –∑–Ω–∞—á–µ–Ω–∏–µ:",
                    reply_markup=InlineKeyboardMarkup([[InlineKeyboardButton("üîô –û—Ç–º–µ–Ω–∞", callback_data="cancel_host_edit")]])
                )
                return EDIT_HOST_FIELD
        
        # Update host data
        update_data = {field: new_value}
        result = await HostAPI.update_host(host_uuid, update_data)
        
        if result:
            field_names = {
                "remark": "–Ω–∞–∑–≤–∞–Ω–∏–µ",
                "address": "–∞–¥—Ä–µ—Å", 
                "port": "–ø–æ—Ä—Ç"
            }
            field_name = field_names.get(field, field)
            
            await update.message.reply_text(
                f"‚úÖ –ü–æ–ª–µ '{field_name}' —É—Å–ø–µ—à–Ω–æ –æ–±–Ω–æ–≤–ª–µ–Ω–æ!",
                reply_markup=InlineKeyboardMarkup([[InlineKeyboardButton("üëÅÔ∏è –ü—Ä–æ—Å–º–æ—Ç—Ä —Ö–æ—Å—Ç–∞", callback_data=f"view_host_{host_uuid}")]])
            )
            
            # Clear editing context
            context.user_data.pop("editing_field", None)
            context.user_data.pop("editing_host", None)
            context.user_data.pop("editing_host_uuid", None)
            
            return HOST_MENU
        else:
            await update.message.reply_text(
                "‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –æ–±–Ω–æ–≤–∏—Ç—å —Ö–æ—Å—Ç. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â–µ —Ä–∞–∑:",
                reply_markup=InlineKeyboardMarkup([[InlineKeyboardButton("üîô –û—Ç–º–µ–Ω–∞", callback_data="cancel_host_edit")]])
            )
            return EDIT_HOST_FIELD
            
    except Exception as e:
        logger.error(f"Error updating host field: {e}")
        await update.message.reply_text(
            "‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–∏ —Ö–æ—Å—Ç–∞.",
            reply_markup=InlineKeyboardMarkup([[InlineKeyboardButton("üîô –ö —Ö–æ—Å—Ç–∞–º", callback_data="list_hosts")]])
        )
        return HOST_MENU

async def handle_cancel_host_edit(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """Cancel host editing"""
    host_uuid = context.user_data.get("editing_host_uuid")
    
    # Clear editing context
    context.user_data.pop("editing_field", None)
    context.user_data.pop("editing_host", None)
    context.user_data.pop("editing_host_uuid", None)
    
    if host_uuid:
        return await show_host_details(update, context, host_uuid)
    else:
        return await list_hosts(update, context)

async def handle_create_host(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """Handle host creation process"""
    if not update.callback_query:
        return CREATE_HOST
    
    query = update.callback_query
    await query.answer()
    data = query.data
    
    creation_data = context.user_data.get("creating_host", {})
    
    if data.startswith("select_inbound_"):
        inbound_uuid = data.split("_", 2)[2]
        
        # Store selected inbound
        creation_data["selected_inbound_uuid"] = inbound_uuid
        creation_data["step"] = "enter_remark"
        context.user_data["creating_host"] = creation_data
        
        message = "‚ûï *–°–æ–∑–¥–∞–Ω–∏–µ –Ω–æ–≤–æ–≥–æ —Ö–æ—Å—Ç–∞*\n\n"
        message += "üìù –í–≤–µ–¥–∏—Ç–µ –Ω–∞–∑–≤–∞–Ω–∏–µ (remark) –¥–ª—è —Ö–æ—Å—Ç–∞:"
        
        keyboard = [[InlineKeyboardButton("üîô –ù–∞–∑–∞–¥", callback_data="cancel_host_creation")]]
        reply_markup = InlineKeyboardMarkup(keyboard)
        
        await query.edit_message_text(
            text=message,
            reply_markup=reply_markup,
            parse_mode="Markdown"
        )
        
        return CREATE_HOST
    
    elif data == "cancel_host_creation":
        # Clear creation context
        context.user_data.pop("creating_host", None)
        return await show_hosts_menu(update, context)
    
    elif data == "confirm_host_creation":
        # Create the host
        try:
            host_data = creation_data.get("host_data", {})
            result = await HostAPI.create_host(host_data)
            
            if result:
                await query.edit_message_text(
                    "‚úÖ –•–æ—Å—Ç —É—Å–ø–µ—à–Ω–æ —Å–æ–∑–¥–∞–Ω!",
                    reply_markup=InlineKeyboardMarkup([[InlineKeyboardButton("üìã –ö —Å–ø–∏—Å–∫—É —Ö–æ—Å—Ç–æ–≤", callback_data="list_hosts")]])
                )
            else:
                await query.edit_message_text(
                    "‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å —Å–æ–∑–¥–∞—Ç—å —Ö–æ—Å—Ç.",
                    reply_markup=InlineKeyboardMarkup([[InlineKeyboardButton("üîô –ù–∞–∑–∞–¥", callback_data="back_to_hosts")]])
                )
            
            # Clear creation context
            context.user_data.pop("creating_host", None)
            return HOST_MENU
            
        except Exception as e:
            logger.error(f"Error creating host: {e}")
            await query.edit_message_text(
                "‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ–∑–¥–∞–Ω–∏–∏ —Ö–æ—Å—Ç–∞.",
                reply_markup=InlineKeyboardMarkup([[InlineKeyboardButton("üîô –ù–∞–∑–∞–¥", callback_data="back_to_hosts")]])
            )
            return HOST_MENU
    
    return CREATE_HOST

# Export functions for conversation handler
__all__ = [
    'show_hosts_menu',
    'handle_hosts_menu', 
    'list_hosts',
    'show_host_details',
    'enable_host',
    'disable_host',
    'confirm_delete_host',
    'delete_host',
    'show_search_hosts_menu',
    'start_create_host',
    'start_edit_host',
    'handle_host_edit_menu',
    'handle_host_field_input',
    'handle_cancel_host_edit',
    'handle_create_host'
]