from telegram import Update, InlineKeyboardButton, InlineKeyboardMarkup
from telegram.ext import ContextTypes
import logging

from modules.config import SELECTING_USER, WAITING_FOR_INPUT
from modules.api.users import UserAPI
from modules.utils.formatters import escape_markdown

logger = logging.getLogger(__name__)

async def show_user_hwid_devices(update: Update, context: ContextTypes.DEFAULT_TYPE, uuid: str):
    """Show user HWID devices"""
    try:
        # Get user details first
        user_response = await UserAPI.get_user_by_uuid(uuid)
        if not user_response or 'response' not in user_response:
            await update.callback_query.edit_message_text("‚ùå –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ –Ω–∞–π–¥–µ–Ω.")
            return SELECTING_USER
        
        user = user_response['response']
        
        # Get HWID devices
        devices_response = await UserAPI.get_user_hwid_devices(uuid)
        
        if not devices_response or 'response' not in devices_response:
            devices = []
        else:
            devices = devices_response['response']
        
        message = f"üíª *HWID —É—Å—Ç—Ä–æ–π—Å—Ç–≤–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è*\n\n"
        message += f"üë§ –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å: `{escape_markdown(user['username'])}`\n"
        message += f"üÜî UUID: `{user['uuid']}`\n"
        message += f"üì± –õ–∏–º–∏—Ç —É—Å—Ç—Ä–æ–π—Å—Ç–≤: `{user.get('hwidDeviceLimit', 0)}`\n"
        message += f"üíª –ü–æ–¥–∫–ª—é—á–µ–Ω–æ —É—Å—Ç—Ä–æ–π—Å—Ç–≤: `{len(devices)}`\n\n"
        
        if devices:
            message += f"üìã *–°–ø–∏—Å–æ–∫ —É—Å—Ç—Ä–æ–π—Å—Ç–≤:*\n"
            for i, device in enumerate(devices, 1):
                device_id = device.get('deviceId', 'N/A')
                device_name = device.get('deviceName', '–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–æ')
                last_seen = device.get('lastSeen', '–ù–∏–∫–æ–≥–¥–∞')
                
                message += f"{i}. `{device_id[:16]}...`\n"
                message += f"   üì± –ò–º—è: {device_name}\n"
                message += f"   ‚è∞ –ü–æ—Å–ª–µ–¥–Ω–∏–π —Ä–∞–∑: {last_seen[:19] if last_seen != '–ù–∏–∫–æ–≥–¥–∞' else last_seen}\n\n"
        else:
            message += f"‚ÑπÔ∏è –£—Å—Ç—Ä–æ–π—Å—Ç–≤–∞ –Ω–µ –ø–æ–¥–∫–ª—é—á–µ–Ω—ã"
        
        keyboard = []
        
        if devices:
            # Add device management buttons
            for device in devices[:5]:  # Show max 5 devices for UI clarity
                device_id = device.get('deviceId', '')
                device_name = device.get('deviceName', device_id[:8] + '...')
                keyboard.append([
                    InlineKeyboardButton(
                        f"‚ùå –£–¥–∞–ª–∏—Ç—å {device_name}", 
                        callback_data=f"delete_hwid_{uuid}_{device_id}"
                    )
                ])
            
            if len(devices) > 5:
                keyboard.append([
                    InlineKeyboardButton("üìã –ü–æ–∫–∞–∑–∞—Ç—å –≤—Å–µ —É—Å—Ç—Ä–æ–π—Å—Ç–≤–∞", callback_data=f"show_all_hwid_{uuid}")
                ])
            
            keyboard.append([
                InlineKeyboardButton("‚ùå –°–±—Ä–æ—Å–∏—Ç—å –≤—Å–µ —É—Å—Ç—Ä–æ–π—Å—Ç–≤–∞", callback_data=f"reset_all_hwid_{uuid}")
            ])
        
        keyboard.extend([
            [InlineKeyboardButton("üîÑ –û–±–Ω–æ–≤–∏—Ç—å", callback_data=f"hwid_{uuid}")],
            [InlineKeyboardButton("üîô –ù–∞–∑–∞–¥ –∫ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é", callback_data=f"view_{uuid}")]
        ])
        
        reply_markup = InlineKeyboardMarkup(keyboard)
        
        await update.callback_query.edit_message_text(
            text=message,
            reply_markup=reply_markup,
            parse_mode="Markdown"
        )
        
        return SELECTING_USER
        
    except Exception as e:
        logger.error(f"Error showing HWID devices for user {uuid}: {e}")
        
        keyboard = [[InlineKeyboardButton("üîô –ù–∞–∑–∞–¥ –∫ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é", callback_data=f"view_{uuid}")]]
        reply_markup = InlineKeyboardMarkup(keyboard)
        
        await update.callback_query.edit_message_text(
            f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–≥—Ä—É–∑–∫–µ HWID —É—Å—Ç—Ä–æ–π—Å—Ç–≤: {str(e)}",
            reply_markup=reply_markup
        )
        
        return SELECTING_USER

async def handle_hwid_action(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """Handle HWID device actions"""
    if not update.callback_query:
        return SELECTING_USER
    
    query = update.callback_query
    await query.answer()
    data = query.data
    
    if data.startswith("delete_hwid_"):
        parts = data.split("_", 3)
        if len(parts) >= 4:
            uuid = parts[2]
            device_id = parts[3]
            return await confirm_delete_hwid_device(update, context, uuid, device_id)
    
    elif data.startswith("reset_all_hwid_"):
        uuid = data.split("_", 3)[3]
        return await confirm_reset_all_hwid_devices(update, context, uuid)
    
    elif data.startswith("show_all_hwid_"):
        uuid = data.split("_", 3)[3]
        return await show_all_hwid_devices(update, context, uuid)
    
    elif data.startswith("hwid_"):
        uuid = data.split("_", 1)[1]
        return await show_user_hwid_devices(update, context, uuid)
    
    return SELECTING_USER

async def confirm_delete_hwid_device(update: Update, context: ContextTypes.DEFAULT_TYPE, uuid: str, device_id: str):
    """Confirm HWID device deletion"""
    keyboard = [
        [
            InlineKeyboardButton("‚úÖ –î–∞, —É–¥–∞–ª–∏—Ç—å", callback_data=f"confirm_delete_hwid_{uuid}_{device_id}"),
            InlineKeyboardButton("‚ùå –û—Ç–º–µ–Ω–∞", callback_data=f"hwid_{uuid}")
        ]
    ]
    reply_markup = InlineKeyboardMarkup(keyboard)
    
    message = f"‚ö†Ô∏è *–ü–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–µ —É–¥–∞–ª–µ–Ω–∏—è —É—Å—Ç—Ä–æ–π—Å—Ç–≤–∞*\n\n"
    message += f"–í—ã –¥–µ–π—Å—Ç–≤–∏—Ç–µ–ª—å–Ω–æ —Ö–æ—Ç–∏—Ç–µ —É–¥–∞–ª–∏—Ç—å —É—Å—Ç—Ä–æ–π—Å—Ç–≤–æ?\n"
    message += f"üÜî Device ID: `{device_id[:32]}...`\n\n"
    message += f"‚ùó –≠—Ç–æ –¥–µ–π—Å—Ç–≤–∏–µ –Ω–µ–æ–±—Ä–∞—Ç–∏–º–æ!"
    
    await update.callback_query.edit_message_text(
        text=message,
        reply_markup=reply_markup,
        parse_mode="Markdown"
    )
    
    return SELECTING_USER

async def confirm_reset_all_hwid_devices(update: Update, context: ContextTypes.DEFAULT_TYPE, uuid: str):
    """Confirm reset all HWID devices"""
    keyboard = [
        [
            InlineKeyboardButton("‚úÖ –î–∞, —Å–±—Ä–æ—Å–∏—Ç—å –≤—Å–µ", callback_data=f"confirm_reset_all_hwid_{uuid}"),
            InlineKeyboardButton("‚ùå –û—Ç–º–µ–Ω–∞", callback_data=f"hwid_{uuid}")
        ]
    ]
    reply_markup = InlineKeyboardMarkup(keyboard)
    
    message = f"‚ö†Ô∏è *–ü–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–µ —Å–±—Ä–æ—Å–∞ –≤—Å–µ—Ö —É—Å—Ç—Ä–æ–π—Å—Ç–≤*\n\n"
    message += f"–í—ã –¥–µ–π—Å—Ç–≤–∏—Ç–µ–ª—å–Ω–æ —Ö–æ—Ç–∏—Ç–µ —É–¥–∞–ª–∏—Ç—å –í–°–ï HWID —É—Å—Ç—Ä–æ–π—Å—Ç–≤–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è?\n\n"
    message += f"‚ùó –≠—Ç–æ –¥–µ–π—Å—Ç–≤–∏–µ –Ω–µ–æ–±—Ä–∞—Ç–∏–º–æ!"
    
    await update.callback_query.edit_message_text(
        text=message,
        reply_markup=reply_markup,
        parse_mode="Markdown"
    )
    
    return SELECTING_USER

async def execute_delete_hwid_device(update: Update, context: ContextTypes.DEFAULT_TYPE, uuid: str, device_id: str):
    """Execute HWID device deletion"""
    await update.callback_query.edit_message_text("‚è≥ –£–¥–∞–ª–µ–Ω–∏–µ —É—Å—Ç—Ä–æ–π—Å—Ç–≤–∞...")
    
    try:
        result = await UserAPI.delete_user_hwid_device(uuid, device_id)
        
        if result:
            message = "‚úÖ –£—Å—Ç—Ä–æ–π—Å—Ç–≤–æ —É—Å–ø–µ—à–Ω–æ —É–¥–∞–ª–µ–Ω–æ."
        else:
            message = "‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å —É–¥–∞–ª–∏—Ç—å —É—Å—Ç—Ä–æ–π—Å—Ç–≤–æ."
        
        keyboard = [
            [InlineKeyboardButton("üîÑ –û–±–Ω–æ–≤–∏—Ç—å —Å–ø–∏—Å–æ–∫", callback_data=f"hwid_{uuid}")],
            [InlineKeyboardButton("üîô –ù–∞–∑–∞–¥ –∫ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é", callback_data=f"view_{uuid}")]
        ]
        reply_markup = InlineKeyboardMarkup(keyboard)
        
        await update.callback_query.edit_message_text(
            message,
            reply_markup=reply_markup
        )
        
        return SELECTING_USER
        
    except Exception as e:
        logger.error(f"Error deleting HWID device {device_id} for user {uuid}: {e}")
        
        keyboard = [
            [InlineKeyboardButton("üîÑ –ü–æ–ø—Ä–æ–±–æ–≤–∞—Ç—å —Å–Ω–æ–≤–∞", callback_data=f"delete_hwid_{uuid}_{device_id}")],
            [InlineKeyboardButton("üîô –ù–∞–∑–∞–¥", callback_data=f"hwid_{uuid}")]
        ]
        reply_markup = InlineKeyboardMarkup(keyboard)
        
        await update.callback_query.edit_message_text(
            f"‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ —É–¥–∞–ª–µ–Ω–∏–∏ —É—Å—Ç—Ä–æ–π—Å—Ç–≤–∞: {str(e)}",
            reply_markup=reply_markup
        )
        
        return SELECTING_USER

async def execute_reset_all_hwid_devices(update: Update, context: ContextTypes.DEFAULT_TYPE, uuid: str):
    """Execute reset all HWID devices"""
    await update.callback_query.edit_message_text("‚è≥ –°–±—Ä–æ—Å –≤—Å–µ—Ö —É—Å—Ç—Ä–æ–π—Å—Ç–≤...")
    
    try:
        result = await UserAPI.reset_all_user_hwid_devices(uuid)
        
        if result:
            message = "‚úÖ –í—Å–µ —É—Å—Ç—Ä–æ–π—Å—Ç–≤–∞ —É—Å–ø–µ—à–Ω–æ —É–¥–∞–ª–µ–Ω—ã."
        else:
            message = "‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å —É–¥–∞–ª–∏—Ç—å —É—Å—Ç—Ä–æ–π—Å—Ç–≤–∞."
        
        keyboard = [
            [InlineKeyboardButton("üîÑ –û–±–Ω–æ–≤–∏—Ç—å —Å–ø–∏—Å–æ–∫", callback_data=f"hwid_{uuid}")],
            [InlineKeyboardButton("üîô –ù–∞–∑–∞–¥ –∫ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é", callback_data=f"view_{uuid}")]
        ]
        reply_markup = InlineKeyboardMarkup(keyboard)
        
        await update.callback_query.edit_message_text(
            message,
            reply_markup=reply_markup
        )
        
        return SELECTING_USER
        
    except Exception as e:
        logger.error(f"Error resetting all HWID devices for user {uuid}: {e}")
        
        keyboard = [
            [InlineKeyboardButton("üîÑ –ü–æ–ø—Ä–æ–±–æ–≤–∞—Ç—å —Å–Ω–æ–≤–∞", callback_data=f"reset_all_hwid_{uuid}")],
            [InlineKeyboardButton("üîô –ù–∞–∑–∞–¥", callback_data=f"hwid_{uuid}")]
        ]
        reply_markup = InlineKeyboardMarkup(keyboard)
        
        await update.callback_query.edit_message_text(
            f"‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ —Å–±—Ä–æ—Å–µ —É—Å—Ç—Ä–æ–π—Å—Ç–≤: {str(e)}",
            reply_markup=reply_markup
        )
        
        return SELECTING_USER

async def show_all_hwid_devices(update: Update, context: ContextTypes.DEFAULT_TYPE, uuid: str):
    """Show all HWID devices in detail"""
    try:
        devices_response = await UserAPI.get_user_hwid_devices(uuid)
        
        if not devices_response or 'response' not in devices_response:
            devices = []
        else:
            devices = devices_response['response']
        
        if not devices:
            await update.callback_query.edit_message_text("‚ÑπÔ∏è –£ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –Ω–µ—Ç –ø–æ–¥–∫–ª—é—á–µ–Ω–Ω—ã—Ö —É—Å—Ç—Ä–æ–π—Å—Ç–≤.")
            return SELECTING_USER
        
        message = f"üíª *–í—Å–µ HWID —É—Å—Ç—Ä–æ–π—Å—Ç–≤–∞ ({len(devices)} —à—Ç.)*\n\n"
        
        for i, device in enumerate(devices, 1):
            device_id = device.get('deviceId', 'N/A')
            device_name = device.get('deviceName', '–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–æ')
            last_seen = device.get('lastSeen', '–ù–∏–∫–æ–≥–¥–∞')
            created_at = device.get('createdAt', '–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–æ')
            
            message += f"*{i}. –£—Å—Ç—Ä–æ–π—Å—Ç–≤–æ {i}*\n"
            message += f"üÜî ID: `{device_id}`\n"
            message += f"üì± –ò–º—è: {escape_markdown(device_name)}\n"
            message += f"‚è∞ –ü–æ—Å–ª–µ–¥–Ω–∏–π —Ä–∞–∑: {last_seen[:19] if last_seen != '–ù–∏–∫–æ–≥–¥–∞' else last_seen}\n"
            message += f"üìÖ –°–æ–∑–¥–∞–Ω–æ: {created_at[:19] if created_at != '–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–æ' else created_at}\n\n"
            
            # Limit message length
            if len(message) > 3500:
                message += f"... –∏ –µ—â–µ {len(devices) - i} —É—Å—Ç—Ä–æ–π—Å—Ç–≤"
                break
        
        keyboard = [
            [InlineKeyboardButton("üîô –ù–∞–∑–∞–¥ –∫ —É–ø—Ä–∞–≤–ª–µ–Ω–∏—é HWID", callback_data=f"hwid_{uuid}")]
        ]
        reply_markup = InlineKeyboardMarkup(keyboard)
        
        await update.callback_query.edit_message_text(
            text=message,
            reply_markup=reply_markup,
            parse_mode="Markdown"
        )
        
        return SELECTING_USER
        
    except Exception as e:
        logger.error(f"Error showing all HWID devices for user {uuid}: {e}")
        
        keyboard = [[InlineKeyboardButton("üîô –ù–∞–∑–∞–¥", callback_data=f"hwid_{uuid}")]]
        reply_markup = InlineKeyboardMarkup(keyboard)
        
        await update.callback_query.edit_message_text(
            f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–≥—Ä—É–∑–∫–µ —É—Å—Ç—Ä–æ–π—Å—Ç–≤: {str(e)}",
            reply_markup=reply_markup
        )
        
        return SELECTING_USER

async def handle_hwid_input(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """Handle HWID input (for manual operations)"""
    user_input = update.message.text.strip()
    
    # This function can be extended for manual HWID operations
    # For now, just acknowledge the input
    
    await update.message.reply_text(
        "‚ùå –†—É—á–Ω–æ–µ —É–ø—Ä–∞–≤–ª–µ–Ω–∏–µ HWID –ø–æ–∫–∞ –Ω–µ —Ä–µ–∞–ª–∏–∑–æ–≤–∞–Ω–æ.\n"
        "–ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ –∏–Ω—Ç–µ—Ä—Ñ–µ–π—Å —Å –∫–Ω–æ–ø–∫–∞–º–∏."
    )
    
    # Clear waiting state
    context.user_data.pop("waiting_for", None)
    
    return SELECTING_USER