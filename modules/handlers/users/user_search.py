from telegram import Update, InlineKeyboardButton, InlineKeyboardMarkup
from telegram.ext import ContextTypes
import logging

from modules.config import USER_MENU, SELECTING_USER, SEARCH_USERS
from modules.api.users import UserAPI
from modules.utils.formatters import format_user_details, escape_markdown

logger = logging.getLogger(__name__)

async def show_search_menu(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """Show search menu with search type options"""
    # –û—á–∏—Å—Ç–∏–º –ø—Ä–µ–¥—ã–¥—É—â–∏–µ –¥–∞–Ω–Ω—ã–µ –ø–æ–∏—Å–∫–∞
    if "search_type" in context.user_data:
        context.user_data.pop("search_type")
    
    message = "üîç *–ü–æ–∏—Å–∫ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π*\n\n"
    message += "–í—ã–±–µ—Ä–∏—Ç–µ —Ç–∏–ø –ø–æ–∏—Å–∫–∞:"
    
    keyboard = [
        [InlineKeyboardButton("üë§ –ü–æ –∏–º–µ–Ω–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è", callback_data="search_by_username")],
        [InlineKeyboardButton("üÜî –ü–æ Telegram ID", callback_data="search_by_telegram_id")],
        [InlineKeyboardButton("üìù –ü–æ –æ–ø–∏—Å–∞–Ω–∏—é", callback_data="search_by_description")],
        [InlineKeyboardButton("üîô –ù–∞–∑–∞–¥", callback_data="back_to_users")]
    ]
    reply_markup = InlineKeyboardMarkup(keyboard)
    
    if update.callback_query:
        await update.callback_query.edit_message_text(
            text=message,
            reply_markup=reply_markup,
            parse_mode="Markdown"
        )
    else:
        await update.effective_message.reply_text(
            text=message,
            reply_markup=reply_markup,
            parse_mode="Markdown"
        )
    
    return SEARCH_USERS

async def handle_search_type_selection(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """Handle search type selection"""
    query = update.callback_query
    data = query.data
    
    search_types = {
        "search_by_username": "username",
        "search_by_telegram_id": "telegram_id",
        "search_by_description": "description"
    }
    
    if data in search_types:
        search_type = search_types[data]
        context.user_data["search_type"] = search_type
        
        type_names = {
            "username": "–∏–º–µ–Ω–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è",
            "telegram_id": "Telegram ID",
            "description": "–æ–ø–∏—Å–∞–Ω–∏—é"
        }
        
        message = f"üîç *–ü–æ–∏—Å–∫ –ø–æ {type_names[search_type]}*\n\n"
        message += "–í–≤–µ–¥–∏—Ç–µ –ø–æ–∏—Å–∫–æ–≤—ã–π –∑–∞–ø—Ä–æ—Å:"
        
        await query.edit_message_text(
            text=message,
            reply_markup=InlineKeyboardMarkup([[InlineKeyboardButton("üîô –ù–∞–∑–∞–¥", callback_data="search_users")]]),
            parse_mode="Markdown"
        )
        
        return SEARCH_USERS
    
    return USER_MENU

async def handle_search_input(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """Handle search input"""
    search_type = context.user_data.get("search_type")
    
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º –Ω–∞–ª–∏—á–∏–µ update.message
    if not update.message:
        logger.error("update.message is None in handle_search_input")
        # –ï—Å–ª–∏ —É –Ω–∞—Å –µ—Å—Ç—å callback_query, –∏—Å–ø–æ–ª—å–∑—É–µ–º –µ–≥–æ –¥–ª—è –æ—Ç–≤–µ—Ç–∞
        if update.callback_query:
            await update.callback_query.answer("‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –æ–±—Ä–∞–±–æ—Ç–∞—Ç—å –ø–æ–∏—Å–∫–æ–≤—ã–π –∑–∞–ø—Ä–æ—Å.")
            return USER_MENU
        return USER_MENU
    
    search_value = update.message.text.strip()
    
    try:
        users = None  # –†–µ–∑—É–ª—å—Ç–∞—Ç –ø–æ–∏—Å–∫–∞
        
        # –í—ã–ø–æ–ª–Ω—è–µ–º –ø–æ–∏—Å–∫ –≤ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏ –æ—Ç —Ç–∏–ø–∞
        if search_type == "username":
            response = await UserAPI.search_users_by_partial_name(search_value)
        elif search_type == "telegram_id":
            response = await UserAPI.get_user_by_telegram_id(search_value)
        elif search_type == "description":
            response = await UserAPI.search_users_by_description(search_value)
        else:
            await update.message.reply_text("‚ùå –ù–µ–∏–∑–≤–µ—Å—Ç–Ω—ã–π —Ç–∏–ø –ø–æ–∏—Å–∫–∞.")
            return USER_MENU
        
        # –û–±—Ä–∞–±–æ—Ç–∫–∞ —Ä–∞–∑–Ω—ã—Ö —Ñ–æ—Ä–º–∞—Ç–æ–≤ –æ—Ç–≤–µ—Ç–∞ API
        if isinstance(response, dict):
            if 'response' in response:
                users = response['response']
            elif 'uuid' in response:
                # –≠—Ç–æ –æ–¥–∏–Ω –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å
                users = [response]
        elif isinstance(response, list):
            # –ü—Ä—è–º–æ–π —Å–ø–∏—Å–æ–∫ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π
            users = response
        elif response is None:
            users = []
        
        # –ü—Ä–æ–≤–µ—Ä–∫–∞ –Ω–∞ –ø—É—Å—Ç–æ–π —Ä–µ–∑—É–ª—å—Ç–∞—Ç
        if not users:
            keyboard = [[InlineKeyboardButton("üîô –ù–∞–∑–∞–¥", callback_data="search_users")]]
            reply_markup = InlineKeyboardMarkup(keyboard)
            
            await update.message.reply_text(
                f"‚ùå –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–∏ –ø–æ –∑–∞–ø—Ä–æ—Å—É '{search_value}' –Ω–µ –Ω–∞–π–¥–µ–Ω—ã.",
                reply_markup=reply_markup
            )
            return USER_MENU
        
        # –í—ã–±–æ—Ä —Å–ø–æ—Å–æ–±–∞ –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏—è –≤ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏ –æ—Ç –∫–æ–ª–∏—á–µ—Å—Ç–≤–∞ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤
        if len(users) == 1:
            # Single user found - show details
            return await show_single_user_result(update, context, users[0])
        else:
            # Multiple users found - show list
            return await show_multiple_users_result(update, context, users, search_value)
            
    except Exception as e:
        logger.error(f"Error in search: {e}")
        keyboard = [[InlineKeyboardButton("üîô –ù–∞–∑–∞–¥", callback_data="search_users")]]
        reply_markup = InlineKeyboardMarkup(keyboard)
        
        await update.message.reply_text(
            f"‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–∏—Å–∫–µ: {str(e)}",
            reply_markup=reply_markup
        )
        return USER_MENU

async def show_single_user_result(update: Update, context: ContextTypes.DEFAULT_TYPE, user):
    """Show single user search result"""
    from modules.utils.selection_helpers import SelectionHelper
    
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –µ—Å—Ç—å –ª–∏ update.message
    if not update.message:
        logger.error("update.message is None in show_single_user_result")
        return USER_MENU
    
    try:
        from modules.utils.formatters import format_user_details
        message = format_user_details(user)
        
        # –£–±–µ–¥–∏–º—Å—è, —á—Ç–æ user —Å–æ–¥–µ—Ä–∂–∏—Ç UUID
        user_uuid = user.get('uuid')
        if not user_uuid:
            raise ValueError("UUID –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –Ω–µ –Ω–∞–π–¥–µ–Ω –≤ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–µ")
            
        # –ò—Å–ø–æ–ª—å–∑—É–µ–º helper –¥–ª—è —Å–æ–∑–¥–∞–Ω–∏—è –∫–ª–∞–≤–∏–∞—Ç—É—Ä—ã —Å –¥–µ–π—Å—Ç–≤–∏—è–º–∏
        keyboard = SelectionHelper.create_user_info_keyboard(user_uuid, action_prefix="user_action")
        
        # –ï—Å–ª–∏ keyboard –Ω–µ —Å–æ–¥–µ—Ä–∂–∏—Ç –∫–Ω–æ–ø–æ–∫ –∏–ª–∏ –≤–µ—Ä–Ω—É–ª None, —Å–æ–∑–¥–∞–¥–∏–º –±–∞–∑–æ–≤—É—é –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É
        if not keyboard or not keyboard.inline_keyboard:
            keyboard = InlineKeyboardMarkup([
                [InlineKeyboardButton(f"‚úèÔ∏è –ò–∑–º–µ–Ω–∏—Ç—å", callback_data=f"user_action_edit_{user_uuid}")],
                [InlineKeyboardButton(f"üìä –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞", callback_data=f"user_action_stats_{user_uuid}")],
                [InlineKeyboardButton(f"‚ùå –£–¥–∞–ª–∏—Ç—å", callback_data=f"user_action_delete_{user_uuid}")],
                [InlineKeyboardButton("üîô –ù–∞–∑–∞–¥", callback_data="search_users")]
            ])
        
        await update.message.reply_text(
            text=message,
            reply_markup=keyboard,
            parse_mode="Markdown"
        )
        
        context.user_data["current_user"] = user
        return SELECTING_USER
        
    except Exception as e:
        logger.error(f"Error showing single user result: {e}")
        # Fallback - –ø—Ä–æ—Å—Ç–∞—è –∫–ª–∞–≤–∏–∞—Ç—É—Ä–∞ –µ—Å–ª–∏ —á—Ç–æ-—Ç–æ –ø–æ—à–ª–æ –Ω–µ —Ç–∞–∫
        try:
            user_uuid = user.get('uuid', '')
            user_name = user.get('username', 'Unknown')
            
            keyboard = [
                [InlineKeyboardButton(f"üë§ –ü—Ä–æ—Å–º–æ—Ç—Ä–µ—Ç—å {user_name}", callback_data=f"view_{user_uuid}")],
                [InlineKeyboardButton("üîô –ù–∞–∑–∞–¥", callback_data="search_users")]
            ]
            reply_markup = InlineKeyboardMarkup(keyboard)
            
            await update.message.reply_text(
                text=f"–ù–∞–π–¥–µ–Ω –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å: {user_name}",
                reply_markup=reply_markup
            )
            return SELECTING_USER
        except:
            # –ö—Ä–∞–π–Ω–∏–π —Å–ª—É—á–∞–π - –ø—Ä–æ—Å—Ç–æ –≤–µ—Ä–Ω–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –≤ –º–µ–Ω—é
            keyboard = [[InlineKeyboardButton("üîô –ù–∞–∑–∞–¥ –≤ –º–µ–Ω—é", callback_data="back_to_users")]]
            await update.message.reply_text(
                "‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è.",
                reply_markup=InlineKeyboardMarkup(keyboard)
            )
            return USER_MENU

async def show_multiple_users_result(update: Update, context: ContextTypes.DEFAULT_TYPE, users, search_value):
    """Show multiple users search result"""
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –µ—Å—Ç—å –ª–∏ update.message
    if not update.message:
        logger.error("update.message is None in show_multiple_users_result")
        return USER_MENU
        
    try:
        message = f"üîç –ù–∞–π–¥–µ–Ω–æ {len(users)} –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π –ø–æ –∑–∞–ø—Ä–æ—Å—É '{escape_markdown(search_value)}':\n\n"
        keyboard = []
        
        for i, user in enumerate(users):
            username = user.get('username', '–ë–µ–∑ –∏–º–µ–Ω–∏')
            status = user.get('status', 'Unknown')
            status_emoji = "‚úÖ" if status == "ACTIVE" else "‚ùå" if status == "DISABLED" else "‚ö†Ô∏è"
            
            message += f"{i+1}. {escape_markdown(username)} - {status_emoji} {status}\n"
            keyboard.append([InlineKeyboardButton(f"üë§ {username}", callback_data=f"view_{user['uuid']}")])
        
        keyboard.append([InlineKeyboardButton("üîô –ù–∞–∑–∞–¥", callback_data="search_users")])
        reply_markup = InlineKeyboardMarkup(keyboard)
        
        await update.message.reply_text(
            text=message,
            reply_markup=reply_markup,
            parse_mode="Markdown"
        )
        
        return SELECTING_USER
    except Exception as e:
        logger.error(f"Error showing multiple users result: {e}")
        keyboard = [[InlineKeyboardButton("üîô –ù–∞–∑–∞–¥", callback_data="search_users")]]
        await update.message.reply_text(
            "‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏–∏ —Å–ø–∏—Å–∫–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π.",
            reply_markup=InlineKeyboardMarkup(keyboard)
        )
        return USER_MENU

# –≠–∫—Å–ø–æ—Ä—Ç–∏—Ä—É–µ–º —Ñ—É–Ω–∫—Ü–∏–∏ –¥–ª—è –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è –≤ conversation_handler
__all__ = [
    'show_search_menu',
    'handle_search_type_selection',
    'handle_search_input',
    'show_single_user_result',
    'show_multiple_users_result'
]