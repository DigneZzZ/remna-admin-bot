from telegram import Update, InlineKeyboardButton, InlineKeyboardMarkup
from telegram.ext import ContextTypes
import logging

from modules.config import USER_MENU, SELECTING_USER
from modules.api.users import UserAPI
from modules.utils.formatters import format_user_details, escape_markdown

logger = logging.getLogger(__name__)

async def handle_search_input(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """Handle search input"""
    search_type = context.user_data.get("search_type")
    
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º –Ω–∞–ª–∏—á–∏–µ update.message
    if not update.message:
        logger.error("update.message is None in handle_search_input")
        # –ï—Å–ª–∏ —É –Ω–∞—Å –µ—Å—Ç—å callback_query, –∏—Å–ø–æ–ª—å–∑—É–µ–º –µ–≥–æ –¥–ª—è –æ—Ç–≤–µ—Ç–∞
        if update.callback_query:
            await update.callback_query.answer("‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –æ–±—Ä–∞–±–æ—Ç–∞—Ç—å –ø–æ–∏—Å–∫–æ–≤—ã–π –∑–∞–ø—Ä–æ—Å.")
            return USER_MENU
        return USER_MENU
    
    search_value = update.message.text.strip()
    
    try:
        if search_type == "username":
            users_response = await UserAPI.search_users_by_partial_name(search_value)
        elif search_type == "telegram_id":
            users_response = await UserAPI.get_user_by_telegram_id(search_value)
        elif search_type == "description":
            users_response = await UserAPI.search_users_by_description(search_value)
        else:
            await update.message.reply_text("‚ùå –ù–µ–∏–∑–≤–µ—Å—Ç–Ω—ã–π —Ç–∏–ø –ø–æ–∏—Å–∫–∞.")
            return USER_MENU
        
        if not users_response or 'response' not in users_response or not users_response['response']:
            keyboard = [[InlineKeyboardButton("üîô –ù–∞–∑–∞–¥", callback_data="back_to_users")]]
            reply_markup = InlineKeyboardMarkup(keyboard)
            
            await update.message.reply_text(
                f"‚ùå –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–∏ –ø–æ –∑–∞–ø—Ä–æ—Å—É '{search_value}' –Ω–µ –Ω–∞–π–¥–µ–Ω—ã.",
                reply_markup=reply_markup
            )
            return USER_MENU
        
        users = users_response['response']
        
        if len(users) == 1:
            # Single user found - show details
            return await show_single_user_result(update, context, users[0])
        else:
            # Multiple users found - show list
            return await show_multiple_users_result(update, context, users, search_value)
            
    except Exception as e:
        logger.error(f"Error in search: {e}")
        keyboard = [[InlineKeyboardButton("üîô –ù–∞–∑–∞–¥", callback_data="back_to_users")]]
        reply_markup = InlineKeyboardMarkup(keyboard)
        
        await update.message.reply_text(
            f"‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–∏—Å–∫–µ: {e}",
            reply_markup=reply_markup
        )
        return USER_MENU

async def show_single_user_result(update: Update, context: ContextTypes.DEFAULT_TYPE, user):
    """Show single user search result"""
    from modules.utils.selection_helpers import SelectionHelper
    
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –µ—Å—Ç—å –ª–∏ update.message
    if not update.message:
        logger.error("update.message is None in show_single_user_result")
        return USER_MENU
    
    try:
        from modules.utils.formatters import format_user_details
        message = format_user_details(user)
        
        # –£–±–µ–¥–∏–º—Å—è, —á—Ç–æ user —Å–æ–¥–µ—Ä–∂–∏—Ç UUID
        user_uuid = user.get('uuid')
        if not user_uuid:
            raise ValueError("UUID –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –Ω–µ –Ω–∞–π–¥–µ–Ω –≤ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–µ")
            
        # –ò—Å–ø–æ–ª—å–∑—É–µ–º helper –¥–ª—è —Å–æ–∑–¥–∞–Ω–∏—è –∫–ª–∞–≤–∏–∞—Ç—É—Ä—ã —Å –¥–µ–π—Å—Ç–≤–∏—è–º–∏
        keyboard = SelectionHelper.create_user_info_keyboard(user_uuid, action_prefix="user_action")
        
        # –ï—Å–ª–∏ keyboard –Ω–µ —Å–æ–¥–µ—Ä–∂–∏—Ç –∫–Ω–æ–ø–æ–∫ –∏–ª–∏ –≤–µ—Ä–Ω—É–ª None, —Å–æ–∑–¥–∞–¥–∏–º –±–∞–∑–æ–≤—É—é –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É
        if not keyboard or not keyboard.inline_keyboard:
            keyboard = InlineKeyboardMarkup([
                [InlineKeyboardButton(f"‚úèÔ∏è –ò–∑–º–µ–Ω–∏—Ç—å", callback_data=f"user_action_edit_{user_uuid}")],
                [InlineKeyboardButton(f"üìä –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞", callback_data=f"user_action_stats_{user_uuid}")],
                [InlineKeyboardButton(f"‚ùå –£–¥–∞–ª–∏—Ç—å", callback_data=f"user_action_delete_{user_uuid}")],
                [InlineKeyboardButton("üîô –ù–∞–∑–∞–¥", callback_data="back_to_users")]
            ])
        
        await update.message.reply_text(
            text=message,
            reply_markup=keyboard,
            parse_mode="Markdown"
        )
        
        context.user_data["current_user"] = user
        return SELECTING_USER
        
    except Exception as e:
        logger.error(f"Error showing single user result: {e}")
        # Fallback - –ø—Ä–æ—Å—Ç–∞—è –∫–ª–∞–≤–∏–∞—Ç—É—Ä–∞ –µ—Å–ª–∏ —á—Ç–æ-—Ç–æ –ø–æ—à–ª–æ –Ω–µ —Ç–∞–∫
        try:
            user_uuid = user.get('uuid', '')
            user_name = user.get('username', 'Unknown')
            
            keyboard = [
                [InlineKeyboardButton(f"üë§ –ü—Ä–æ—Å–º–æ—Ç—Ä–µ—Ç—å {user_name}", callback_data=f"view_{user_uuid}")],
                [InlineKeyboardButton("üîô –ù–∞–∑–∞–¥", callback_data="back_to_users")]
            ]
            reply_markup = InlineKeyboardMarkup(keyboard)
            
            await update.message.reply_text(
                text=f"–ù–∞–π–¥–µ–Ω –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å: {user_name}",
                reply_markup=reply_markup
            )
            return SELECTING_USER
        except:
            # –ö—Ä–∞–π–Ω–∏–π —Å–ª—É—á–∞–π - –ø—Ä–æ—Å—Ç–æ –≤–µ—Ä–Ω–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –≤ –º–µ–Ω—é
            keyboard = [[InlineKeyboardButton("üîô –ù–∞–∑–∞–¥ –≤ –º–µ–Ω—é", callback_data="back_to_users")]]
            await update.message.reply_text(
                "‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è.",
                reply_markup=InlineKeyboardMarkup(keyboard)
            )
            return USER_MENU

async def show_multiple_users_result(update: Update, context: ContextTypes.DEFAULT_TYPE, users, search_value):
    """Show multiple users search result"""
    message = f"üîç –ù–∞–π–¥–µ–Ω–æ {len(users)} –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π –ø–æ –∑–∞–ø—Ä–æ—Å—É '{search_value}':\n\n"
    keyboard = []
    
    for i, user in enumerate(users):
        message += f"{i+1}. {user['username']} - {user['status']}\n"
        keyboard.append([InlineKeyboardButton(f"üë§ {user['username']}", callback_data=f"view_{user['uuid']}")])
    
    keyboard.append([InlineKeyboardButton("üîô –ù–∞–∑–∞–¥ –≤ –º–µ–Ω—é", callback_data="back_to_users")])
    reply_markup = InlineKeyboardMarkup(keyboard)
    
    await update.message.reply_text(
        text=message,
        reply_markup=reply_markup
    )
    
    return SELECTING_USER