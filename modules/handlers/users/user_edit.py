from telegram import Update, InlineKeyboardButton, InlineKeyboardMarkup
from telegram.ext import ContextTypes
from datetime import datetime
import logging
import re

from modules.config import EDIT_USER, EDIT_USER_FIELD, SELECTING_USER, USER_FIELDS
from modules.api.users import UserAPI
from modules.utils.formatters import escape_markdown, format_bytes, parse_bytes

logger = logging.getLogger(__name__)

async def start_edit_user(update: Update, context: ContextTypes.DEFAULT_TYPE, uuid: str):
    """Start editing a user"""
    try:
        # Get user details
        response = await UserAPI.get_user_by_uuid(uuid)
        if not response or 'response' not in response:
            keyboard = [[InlineKeyboardButton("üîô –ù–∞–∑–∞–¥", callback_data="list_users")]]
            reply_markup = InlineKeyboardMarkup(keyboard)
            
            await update.callback_query.edit_message_text(
                "‚ùå –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ –Ω–∞–π–¥–µ–Ω.",
                reply_markup=reply_markup
            )
            return SELECTING_USER
        
        user = response['response']
        
        # Store user data in context
        context.user_data["editing_user"] = user
        
        # Create edit menu
        keyboard = [
            [InlineKeyboardButton("üë§ –ò–º—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è", callback_data=f"edit_field_username_{uuid}")],
            [InlineKeyboardButton("üìä –õ–∏–º–∏—Ç —Ç—Ä–∞—Ñ–∏–∫–∞", callback_data=f"edit_field_trafficLimitBytes_{uuid}")],
            [InlineKeyboardButton("üîÑ –°—Ç—Ä–∞—Ç–µ–≥–∏—è —Å–±—Ä–æ—Å–∞", callback_data=f"edit_field_trafficLimitStrategy_{uuid}")],
            [InlineKeyboardButton("üìÖ –î–∞—Ç–∞ –∏—Å—Ç–µ—á–µ–Ω–∏—è", callback_data=f"edit_field_expireAt_{uuid}")],
            [InlineKeyboardButton("üìù –û–ø–∏—Å–∞–Ω–∏–µ", callback_data=f"edit_field_description_{uuid}")],
            [InlineKeyboardButton("üì± Telegram ID", callback_data=f"edit_field_telegramId_{uuid}")],
            [InlineKeyboardButton("üìß Email", callback_data=f"edit_field_email_{uuid}")],
            [InlineKeyboardButton("üè∑Ô∏è –¢–µ–≥", callback_data=f"edit_field_tag_{uuid}")],
            [InlineKeyboardButton("üíª –õ–∏–º–∏—Ç —É—Å—Ç—Ä–æ–π—Å—Ç–≤", callback_data=f"edit_field_hwidDeviceLimit_{uuid}")],
            [InlineKeyboardButton("üîô –ù–∞–∑–∞–¥ –∫ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é", callback_data=f"view_{uuid}")]
        ]
        reply_markup = InlineKeyboardMarkup(keyboard)
        
        message = f"‚úèÔ∏è *–†–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è: {escape_markdown(user['username'])}*\n\n"
        message += f"üìå *–¢–µ–∫—É—â–∏–µ –∑–Ω–∞—á–µ–Ω–∏—è:*\n"
        message += f"‚Ä¢ –ò–º—è: `{user.get('username', '–ù–µ —É–∫–∞–∑–∞–Ω–æ')}`\n"
        message += f"‚Ä¢ –õ–∏–º–∏—Ç —Ç—Ä–∞—Ñ–∏–∫–∞: `{format_bytes(user.get('trafficLimitBytes', 0))}`\n"
        message += f"‚Ä¢ –°—Ç—Ä–∞—Ç–µ–≥–∏—è: `{user.get('trafficLimitStrategy', 'NO_RESET')}`\n"
        message += f"‚Ä¢ –ò—Å—Ç–µ–∫–∞–µ—Ç: `{user.get('expireAt', '–ù–µ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–æ')[:19]}`\n"
        message += f"‚Ä¢ –û–ø–∏—Å–∞–Ω–∏–µ: `{user.get('description', '–ù–µ —É–∫–∞–∑–∞–Ω–æ')[:30]}...`\n"
        message += f"‚Ä¢ Telegram ID: `{user.get('telegramId', '–ù–µ —É–∫–∞–∑–∞–Ω')}`\n"
        message += f"‚Ä¢ Email: `{user.get('email', '–ù–µ —É–∫–∞–∑–∞–Ω')}`\n"
        message += f"‚Ä¢ –¢–µ–≥: `{user.get('tag', '–ù–µ —É–∫–∞–∑–∞–Ω')}`\n"
        message += f"‚Ä¢ –õ–∏–º–∏—Ç —É—Å—Ç—Ä–æ–π—Å—Ç–≤: `{user.get('hwidDeviceLimit', 0)}`\n\n"
        message += "–í—ã–±–µ—Ä–∏—Ç–µ –ø–æ–ª–µ –¥–ª—è —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏—è:"
        
        await update.callback_query.edit_message_text(
            text=message,
            reply_markup=reply_markup,
            parse_mode="Markdown"
        )
        
        return EDIT_USER
        
    except Exception as e:
        logger.error(f"Error starting user edit: {e}")
        keyboard = [[InlineKeyboardButton("üîô –ù–∞–∑–∞–¥", callback_data="list_users")]]
        reply_markup = InlineKeyboardMarkup(keyboard)
        
        await update.callback_query.edit_message_text(
            "‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–≥—Ä—É–∑–∫–µ –¥–∞–Ω–Ω—ã—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è.",
            reply_markup=reply_markup
        )
        return SELECTING_USER

async def handle_edit_field_selection(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """Handle edit field selection"""
    if not update.callback_query:
        return EDIT_USER
        
    query = update.callback_query
    await query.answer()
    
    data = query.data
    
    if data.startswith("edit_field_"):
        parts = data.split("_")
        if len(parts) >= 4:
            field = parts[2]
            uuid = "_".join(parts[3:])
            
            return await start_edit_field(update, context, uuid, field)
    
    elif data.startswith("view_"):
        from modules.handlers.users.user_details import show_user_details
        uuid = data.split("_", 1)[1]
        return await show_user_details(update, context, uuid)
    
    return EDIT_USER

async def start_edit_field(update: Update, context: ContextTypes.DEFAULT_TYPE, uuid: str, field: str):
    """Start editing a specific field"""
    try:
        user = context.user_data.get("editing_user")
        if not user:
            # Fallback: get user from API
            response = await UserAPI.get_user_by_uuid(uuid)
            if not response or 'response' not in response:
                await update.callback_query.edit_message_text("‚ùå –û—à–∏–±–∫–∞: –¥–∞–Ω–Ω—ã–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –Ω–µ –Ω–∞–π–¥–µ–Ω—ã.")
                return EDIT_USER
            user = response['response']
            context.user_data["editing_user"] = user
        
        # Store field being edited
        context.user_data["editing_field"] = field
        
        # Get current value and field info
        field_info = {
            "username": {
                "title": "–ò–º—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è",
                "current": user.get("username", ""),
                "example": "–ù–∞–ø—Ä–∏–º–µ—Ä: user123",
                "validation": "–ª–∞—Ç–∏–Ω—Å–∫–∏–µ –±—É–∫–≤—ã, —Ü–∏—Ñ—Ä—ã, –ø–æ–¥—á–µ—Ä–∫–∏–≤–∞–Ω–∏—è (3-40 —Å–∏–º–≤–æ–ª–æ–≤)"
            },
            "trafficLimitBytes": {
                "title": "–õ–∏–º–∏—Ç —Ç—Ä–∞—Ñ–∏–∫–∞",
                "current": format_bytes(user.get("trafficLimitBytes", 0)),
                "example": "–ù–∞–ø—Ä–∏–º–µ—Ä: 100GB, 50MB, 1TB",
                "validation": "—Ä–∞–∑–º–µ—Ä —Å –µ–¥–∏–Ω–∏—Ü–∞–º–∏ –∏–∑–º–µ—Ä–µ–Ω–∏—è (KB, MB, GB, TB)"
            },
            "trafficLimitStrategy": {
                "title": "–°—Ç—Ä–∞—Ç–µ–≥–∏—è —Å–±—Ä–æ—Å–∞ —Ç—Ä–∞—Ñ–∏–∫–∞",
                "current": user.get("trafficLimitStrategy", "NO_RESET"),
                "example": "NO_RESET, DAY, WEEK, MONTH",
                "validation": "–æ–¥–Ω–∞ –∏–∑ —É–∫–∞–∑–∞–Ω–Ω—ã—Ö —Å—Ç—Ä–∞—Ç–µ–≥–∏–π"
            },
            "expireAt": {
                "title": "–î–∞—Ç–∞ –∏—Å—Ç–µ—á–µ–Ω–∏—è",
                "current": user.get("expireAt", "")[:19] if user.get("expireAt") else "",
                "example": "2024-12-31 23:59:59 –∏–ª–∏ 2024-12-31",
                "validation": "—Ñ–æ—Ä–º–∞—Ç YYYY-MM-DD [HH:MM:SS]"
            },
            "description": {
                "title": "–û–ø–∏—Å–∞–Ω–∏–µ",
                "current": user.get("description", ""),
                "example": "–ù–∞–ø—Ä–∏–º–µ—Ä: VIP –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å",
                "validation": "–ª—é–±–æ–π —Ç–µ–∫—Å—Ç (–º–∞–∫—Å–∏–º—É–º 200 —Å–∏–º–≤–æ–ª–æ–≤)"
            },
            "telegramId": {
                "title": "Telegram ID",
                "current": str(user.get("telegramId", "")),
                "example": "–ù–∞–ø—Ä–∏–º–µ—Ä: 123456789",
                "validation": "—á–∏—Å–ª–æ–≤–æ–π ID –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è Telegram"
            },
            "email": {
                "title": "Email",
                "current": user.get("email", ""),
                "example": "–ù–∞–ø—Ä–∏–º–µ—Ä: user@example.com",
                "validation": "–∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–π email –∞–¥—Ä–µ—Å"
            },
            "tag": {
                "title": "–¢–µ–≥",
                "current": user.get("tag", ""),
                "example": "–ù–∞–ø—Ä–∏–º–µ—Ä: vip, premium",
                "validation": "–∫–æ—Ä–æ—Ç–∫–∏–π —Ç–µ–≥ (–º–∞–∫—Å–∏–º—É–º 20 —Å–∏–º–≤–æ–ª–æ–≤)"
            },
            "hwidDeviceLimit": {
                "title": "–õ–∏–º–∏—Ç —É—Å—Ç—Ä–æ–π—Å—Ç–≤ HWID",
                "current": str(user.get("hwidDeviceLimit", 0)),
                "example": "–ù–∞–ø—Ä–∏–º–µ—Ä: 1, 3, 5",
                "validation": "—Ü–µ–ª–æ–µ —á–∏—Å–ª–æ –æ—Ç 0 –¥–æ 100"
            }
        }
        
        if field not in field_info:
            await update.callback_query.edit_message_text("‚ùå –ù–µ–∏–∑–≤–µ—Å—Ç–Ω–æ–µ –ø–æ–ª–µ –¥–ª—è —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏—è.")
            return EDIT_USER
        
        info = field_info[field]
        
        keyboard = [
            [InlineKeyboardButton("‚ùå –û—Ç–º–µ–Ω–∞", callback_data=f"cancel_edit_{uuid}")]
        ]
        reply_markup = InlineKeyboardMarkup(keyboard)
        
        message = f"‚úèÔ∏è *–†–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ: {info['title']}*\n\n"
        message += f"üìå –¢–µ–∫—É—â–µ–µ –∑–Ω–∞—á–µ–Ω–∏–µ: `{info['current']}`\n\n"
        message += f"üí° {info['example']}\n"
        message += f"‚úÖ –§–æ—Ä–º–∞—Ç: {info['validation']}\n\n"
        message += f"‚úçÔ∏è –í–≤–µ–¥–∏—Ç–µ –Ω–æ–≤–æ–µ –∑–Ω–∞—á–µ–Ω–∏–µ:"
        
        await update.callback_query.edit_message_text(
            text=message,
            reply_markup=reply_markup,
            parse_mode="Markdown"
        )
        
        return EDIT_USER_FIELD
        
    except Exception as e:
        logger.error(f"Error starting field edit: {e}")
        await update.callback_query.edit_message_text("‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–¥–≥–æ—Ç–æ–≤–∫–µ —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏—è.")
        return EDIT_USER

async def handle_edit_field_value(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """Handle input for field editing"""
    try:
        user = context.user_data.get("editing_user")
        field = context.user_data.get("editing_field")
        
        if not user or not field:
            await update.message.reply_text("‚ùå –û—à–∏–±–∫–∞: –¥–∞–Ω–Ω—ã–µ —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏—è –ø–æ—Ç–µ—Ä—è–Ω—ã.")
            return EDIT_USER
        
        user_input = update.message.text.strip()
        uuid = user["uuid"]
        
        # Validate and convert input
        try:
            validated_value = await validate_field_input(field, user_input)
        except ValueError as e:
            keyboard = [
                [InlineKeyboardButton("‚ùå –û—Ç–º–µ–Ω–∞", callback_data=f"cancel_edit_{uuid}")]
            ]
            reply_markup = InlineKeyboardMarkup(keyboard)
            
            await update.message.reply_text(
                f"‚ùå {str(e)}\n\n–ü–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â–µ —Ä–∞–∑:",
                reply_markup=reply_markup
            )
            return EDIT_USER_FIELD
        
        # Update user via API
        update_data = {field: validated_value}
        result = await UserAPI.update_user(uuid, update_data)
        
        if result:
            # Update stored user data
            user[field] = validated_value
            context.user_data["editing_user"] = user
            
            # Clear editing state
            context.user_data.pop("editing_field", None)
            
            keyboard = [
                [InlineKeyboardButton("‚úÖ –ü—Ä–æ–¥–æ–ª–∂–∏—Ç—å —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ", callback_data=f"edit_user_{uuid}")],
                [InlineKeyboardButton("üìã –ü–æ–∫–∞–∑–∞—Ç—å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è", callback_data=f"view_{uuid}")],
                [InlineKeyboardButton("üîô –ö —Å–ø–∏—Å–∫—É –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π", callback_data="list_users")]
            ]
            reply_markup = InlineKeyboardMarkup(keyboard)
            
            await update.message.reply_text(
                f"‚úÖ –ü–æ–ª–µ '{field}' —É—Å–ø–µ—à–Ω–æ –æ–±–Ω–æ–≤–ª–µ–Ω–æ!",
                reply_markup=reply_markup
            )
            
            return SELECTING_USER
        else:
            keyboard = [
                [InlineKeyboardButton("üîÑ –ü–æ–ø—Ä–æ–±–æ–≤–∞—Ç—å —Å–Ω–æ–≤–∞", callback_data=f"edit_field_{field}_{uuid}")],
                [InlineKeyboardButton("‚ùå –û—Ç–º–µ–Ω–∞", callback_data=f"cancel_edit_{uuid}")]
            ]
            reply_markup = InlineKeyboardMarkup(keyboard)
            
            await update.message.reply_text(
                "‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è. –ü—Ä–æ–≤–µ—Ä—å—Ç–µ –¥–∞–Ω–Ω—ã–µ –∏ –ø–æ–ø—Ä–æ–±—É–π—Ç–µ —Å–Ω–æ–≤–∞.",
                reply_markup=reply_markup
            )
            return EDIT_USER_FIELD
            
    except Exception as e:
        logger.error(f"Error handling field value: {e}")
        await update.message.reply_text("‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ –≤–≤–æ–¥–∞.")
        return EDIT_USER

async def validate_field_input(field: str, value: str):
    """Validate field input and convert to appropriate type"""
    if field == "username":
        if not value or len(value) < 3 or len(value) > 40:
            raise ValueError("–ò–º—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –¥–æ–ª–∂–Ω–æ —Å–æ–¥–µ—Ä–∂–∞—Ç—å –æ—Ç 3 –¥–æ 40 —Å–∏–º–≤–æ–ª–æ–≤")
        if not re.match(r'^[a-zA-Z0-9_]+$', value):
            raise ValueError("–ò–º—è –º–æ–∂–µ—Ç —Å–æ–¥–µ—Ä–∂–∞—Ç—å —Ç–æ–ª—å–∫–æ –ª–∞—Ç–∏–Ω—Å–∫–∏–µ –±—É–∫–≤—ã, —Ü–∏—Ñ—Ä—ã –∏ –ø–æ–¥—á–µ—Ä–∫–∏–≤–∞–Ω–∏—è")
        return value
    
    elif field == "trafficLimitBytes":
        try:
            return parse_bytes(value)
        except:
            raise ValueError("–ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç —Ä–∞–∑–º–µ—Ä–∞. –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ: 100GB, 50MB, 1TB –∏ —Ç.–¥.")
    
    elif field == "trafficLimitStrategy":
        valid_strategies = ["NO_RESET", "DAY", "WEEK", "MONTH"]
        if value.upper() not in valid_strategies:
            raise ValueError(f"–°—Ç—Ä–∞—Ç–µ–≥–∏—è –¥–æ–ª–∂–Ω–∞ –±—ã—Ç—å –æ–¥–Ω–æ–π –∏–∑: {', '.join(valid_strategies)}")
        return value.upper()
    
    elif field == "expireAt":
        if not value:
            return None
        
        # Try different date formats
        formats = ["%Y-%m-%d %H:%M:%S", "%Y-%m-%d"]
        
        for fmt in formats:
            try:
                dt = datetime.strptime(value, fmt)
                return dt.strftime("%Y-%m-%dT%H:%M:%S.000Z")
            except ValueError:
                continue
        
        raise ValueError("–ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç –¥–∞—Ç—ã. –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ: YYYY-MM-DD –∏–ª–∏ YYYY-MM-DD HH:MM:SS")
    
    elif field == "telegramId":
        if not value:
            return None
        try:
            return int(value)
        except ValueError:
            raise ValueError("Telegram ID –¥–æ–ª–∂–µ–Ω –±—ã—Ç—å —á–∏—Å–ª–æ–º")
    
    elif field == "email":
        if not value:
            return None
        email_pattern = r'^[a-zA-Z0-9._%+-]+@[a-zA-Z0-9.-]+\.[a-zA-Z]{2,}$'
        if not re.match(email_pattern, value):
            raise ValueError("–ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç email")
        return value
    
    elif field == "hwidDeviceLimit":
        try:
            limit = int(value)
            if limit < 0 or limit > 100:
                raise ValueError("–õ–∏–º–∏—Ç —É—Å—Ç—Ä–æ–π—Å—Ç–≤ –¥–æ–ª–∂–µ–Ω –±—ã—Ç—å –æ—Ç 0 –¥–æ 100")
            return limit
        except ValueError:
            raise ValueError("–õ–∏–º–∏—Ç —É—Å—Ç—Ä–æ–π—Å—Ç–≤ –¥–æ–ª–∂–µ–Ω –±—ã—Ç—å —á–∏—Å–ª–æ–º")
    
    elif field == "description":
        if len(value) > 200:
            raise ValueError("–û–ø–∏—Å–∞–Ω–∏–µ –Ω–µ –¥–æ–ª–∂–Ω–æ –ø—Ä–µ–≤—ã—à–∞—Ç—å 200 —Å–∏–º–≤–æ–ª–æ–≤")
        return value
    
    elif field == "tag":
        if len(value) > 20:
            raise ValueError("–¢–µ–≥ –Ω–µ –¥–æ–ª–∂–µ–Ω –ø—Ä–µ–≤—ã—à–∞—Ç—å 20 —Å–∏–º–≤–æ–ª–æ–≤")
        return value
    
    else:
        return value

async def handle_cancel_edit(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """Handle canceling edit"""
    if not update.callback_query:
        return SELECTING_USER
        
    query = update.callback_query
    await query.answer()
    
    # Clear editing state
    context.user_data.pop("editing_user", None)
    context.user_data.pop("editing_field", None)
    
    if query.data.startswith("cancel_edit_"):
        uuid = query.data.split("_", 2)[2]
        from modules.handlers.users.user_details import show_user_details
        return await show_user_details(update, context, uuid)
    else:
        from modules.handlers.user_handlers import show_users_menu
        return await show_users_menu(update, context)