from telegram import Update, InlineKeyboardButton, InlineKeyboardMarkup
from telegram.ext import ContextTypes
from datetime import datetime, timedelta
import logging
import random
import string
import re

from modules.config import CREATE_USER_FIELD, USER_FIELDS, MAIN_MENU, USER_MENU
from modules.api.users import UserAPI
from modules.utils.formatters import escape_markdown, format_bytes

logger = logging.getLogger(__name__)

async def start_create_user(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """Start creating a new user - show template selection"""
    # Clear previous data
    context.user_data.pop("create_user", None)
    context.user_data.pop("create_user_fields", None)
    context.user_data.pop("current_field_index", None)
    context.user_data.pop("search_type", None)
    context.user_data.pop("using_template", None)
    
    context.user_data["create_user"] = {}
    
    await show_template_selection(update, context)
    return CREATE_USER_FIELD

async def show_template_selection(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """Show template selection menu"""
    from modules.utils.presets import get_template_names
    
    message = "üéØ *–°–æ–∑–¥–∞–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è*\n\n"
    message += "–í—ã–±–µ—Ä–∏—Ç–µ –≥–æ—Ç–æ–≤—ã–π —à–∞–±–ª–æ–Ω –∏–ª–∏ —Å–æ–∑–¥–∞–π—Ç–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –≤—Ä—É—á–Ω—É—é:\n\n"
    message += "üìã *–ì–æ—Ç–æ–≤—ã–µ —à–∞–±–ª–æ–Ω—ã* —Å–æ–¥–µ—Ä–∂–∞—Ç –≤—Å–µ –Ω–µ–æ–±—Ö–æ–¥–∏–º—ã–µ –Ω–∞—Å—Ç—Ä–æ–π–∫–∏\n"
    message += "‚öôÔ∏è *–†—É—á–Ω–æ–µ —Å–æ–∑–¥–∞–Ω–∏–µ* –ø–æ–∑–≤–æ–ª—è–µ—Ç –Ω–∞—Å—Ç—Ä–æ–∏—Ç—å –∫–∞–∂–¥–æ–µ –ø–æ–ª–µ –æ—Ç–¥–µ–ª—å–Ω–æ"
    
    keyboard = []
    templates = get_template_names()
    
    # Add template buttons
    for i in range(0, len(templates), 2):
        row = []
        for j in range(2):
            if i + j < len(templates):
                template_name = templates[i + j]
                row.append(InlineKeyboardButton(
                    template_name, 
                    callback_data=f"template_{template_name}"
                ))
        keyboard.append(row)
    
    keyboard.extend([
        [InlineKeyboardButton("‚öôÔ∏è –°–æ–∑–¥–∞—Ç—å –≤—Ä—É—á–Ω—É—é", callback_data="create_manual")],
        [InlineKeyboardButton("‚ùå –û—Ç–º–µ–Ω–∞", callback_data="back_to_users")]
    ])
    
    reply_markup = InlineKeyboardMarkup(keyboard)
    
    if update.callback_query:
        await update.callback_query.edit_message_text(
            text=message,
            reply_markup=reply_markup,
            parse_mode="Markdown"
        )
    else:
        await update.message.reply_text(
            text=message,
            reply_markup=reply_markup,
            parse_mode="Markdown"
        )

async def handle_create_user_input(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """Handle user input when creating a user"""
    query = update.callback_query
    if not query:
        return
    
    await query.answer()
    
    # Handle template selection
    if query.data.startswith("template_"):
        template_name = query.data[9:]  # Remove "template_" prefix
        logger.info(f"Template selected: {template_name}")
        
        from modules.utils.presets import get_template_by_name, apply_template_to_user_data, format_template_info
        
        template = get_template_by_name(template_name)
        if not template:
            await query.edit_message_text(
                "‚ùå –®–∞–±–ª–æ–Ω –Ω–µ –Ω–∞–π–¥–µ–Ω. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ —Å–Ω–æ–≤–∞.",
                reply_markup=InlineKeyboardMarkup([[
                    InlineKeyboardButton("üîô –ù–∞–∑–∞–¥", callback_data="create_user")
                ]])
            )
            return CREATE_USER_FIELD
        
        # Apply template to user data
        context.user_data["create_user"] = apply_template_to_user_data({}, template_name)
        context.user_data["using_template"] = template_name
        
        # Show template confirmation
        await show_template_confirmation(query, context, template_name)
        return CREATE_USER_FIELD
        
    # Handle manual creation
    elif query.data == "create_manual":
        await show_manual_creation_fields(query, context)
        return CREATE_USER_FIELD
        
    # Handle template confirmation
    elif query.data == "confirm_template":
        await ask_username(query, context)
        return CREATE_USER_FIELD
        
    # Handle template modification
    elif query.data == "modify_template":
        await show_manual_creation_fields(query, context)
        return CREATE_USER_FIELD
        
    # Handle username input completion
    elif query.data == "username_done":
        username = context.user_data.get("temp_username", "")
        if username:
            context.user_data["create_user"]["username"] = username
            context.user_data.pop("temp_username", None)
            await finish_create_user(update, context)
        return MAIN_MENU
        
    # Handle field editing in manual mode
    elif query.data.startswith("edit_field_"):
        field_name = query.data[11:]  # Remove "edit_field_" prefix
        await show_field_editor(query, context, field_name)
        return CREATE_USER_FIELD
        
    # Handle field value selection
    elif query.data.startswith("set_"):
        await handle_field_value_selection(query, context)
        return CREATE_USER_FIELD
        
    # Handle navigation
    elif query.data == "back_to_users":
        from modules.handlers.user_handlers import show_users_menu
        await show_users_menu(update, context)
        return USER_MENU
        
    elif query.data == "back_to_template_selection":
        await show_template_selection(update, context)
        return CREATE_USER_FIELD
        
    elif query.data == "finish_manual_creation":
        await ask_username(query, context)
        return CREATE_USER_FIELD
    
    return CREATE_USER_FIELD

async def finish_create_user(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """Finish creating a user with improved API response handling"""
    user_data = context.user_data["create_user"]
    
    # Validate and set defaults
    if "username" not in user_data or not user_data["username"]:
        characters = string.ascii_letters + string.digits
        user_data["username"] = ''.join(random.choice(characters) for _ in range(20))
    
    # Set required defaults
    defaults = {
        "trafficLimitStrategy": "NO_RESET",
        "trafficLimitBytes": 100 * 1024 * 1024 * 1024,  # 100 GB
        "hwidDeviceLimit": 1,
        "resetDay": 1
    }
    
    for key, value in defaults.items():
        if key not in user_data:
            user_data[key] = value
    
    if "expireAt" not in user_data:
        user_data["expireAt"] = (datetime.now() + timedelta(days=30)).strftime("%Y-%m-%dT00:00:00.000Z")
    
    if "description" not in user_data or not user_data["description"]:
        user_data["description"] = f"–ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏ —Å–æ–∑–¥–∞–Ω–Ω—ã–π –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {datetime.now().strftime('%d.%m.%Y %H:%M')}"
    
    # Handle device limit strategy
    if user_data.get("hwidDeviceLimit", 0) > 0:
        user_data["trafficLimitStrategy"] = "NO_RESET"
    
    try:
        # Create user
        result = await UserAPI.create_user(user_data)
        logger.info(f"User creation API result: {result}")
        
        # Handle different API response formats
        user = None
        if isinstance(result, dict):
            if 'response' in result:
                user = result['response']
                logger.debug("Found user data in 'response' field")
            elif 'uuid' in result:
                user = result
                logger.debug("Found user data directly in result")
        
        if user and 'uuid' in user:
            keyboard = [
                [InlineKeyboardButton("üëÅÔ∏è –ü—Ä–æ—Å–º–æ—Ç—Ä –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è", callback_data=f"view_{user['uuid']}")],
                [InlineKeyboardButton("üîô –ù–∞–∑–∞–¥ –≤ –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é", callback_data="back_to_main")]
            ]
            reply_markup = InlineKeyboardMarkup(keyboard)
            
            message = f"‚úÖ –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å —É—Å–ø–µ—à–Ω–æ —Å–æ–∑–¥–∞–Ω!\n\n"
            message += f"üë§ –ò–º—è: {escape_markdown(user['username'])}\n"
            message += f"üÜî UUID: `{user['uuid']}`\n"
            message += f"üîë –ö–æ—Ä–æ—Ç–∫–∏–π UUID: `{user.get('shortUuid', 'N/A')}`\n"
            message += f"üìù UUID –ø–æ–¥–ø–∏—Å–∫–∏: `{user.get('subscriptionUuid', 'N/A')}`\n\n"
            
            # Handle subscription URL with proper escaping
            if 'subscriptionUrl' in user:
                sub_url = user['subscriptionUrl']
                message += f"üîó URL –ø–æ–¥–ø–∏—Å–∫–∏:\n```\n{sub_url}\n```\n"
            
            if update.callback_query:
                await update.callback_query.edit_message_text(
                    text=message,
                    reply_markup=reply_markup,
                    parse_mode="Markdown"
                )
            else:
                await update.message.reply_text(
                    text=message,
                    reply_markup=reply_markup,
                    parse_mode="Markdown"
                )
            
            # Clear creation data
            context.user_data.pop("create_user", None)
            context.user_data.pop("using_template", None)
            
            return MAIN_MENU
        else:
            logger.error(f"Invalid user creation response: {result}")
            raise Exception("Invalid API response format")
            
    except Exception as e:
        logger.error(f"Error creating user: {e}")
        keyboard = [
            [InlineKeyboardButton("üîÑ –ü–æ–ø—Ä–æ–±–æ–≤–∞—Ç—å —Å–Ω–æ–≤–∞", callback_data="create_user")],
            [InlineKeyboardButton("üîô –ù–∞–∑–∞–¥ –≤ –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é", callback_data="back_to_main")]
        ]
        reply_markup = InlineKeyboardMarkup(keyboard)
        
        error_message = "‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å —Å–æ–∑–¥–∞—Ç—å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è. –ü—Ä–æ–≤–µ—Ä—å—Ç–µ –≤–≤–µ–¥–µ–Ω–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ."
        
        if update.callback_query:
            await update.callback_query.edit_message_text(
                error_message,
                reply_markup=reply_markup
            )
        else:
            await update.message.reply_text(
                error_message,
                reply_markup=reply_markup
            )
        
        return MAIN_MENU
    
async def show_template_confirmation(query, context: ContextTypes.DEFAULT_TYPE, template_name: str):
    """Show template confirmation with details"""
    from modules.utils.presets import format_template_info
    
    info = format_template_info(template_name)
    message = f"üìã *–ü–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–µ —à–∞–±–ª–æ–Ω–∞*\n\n{info}\n\n"
    message += "–í—ã –º–æ–∂–µ—Ç–µ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å —ç—Ç–æ—Ç —à–∞–±–ª–æ–Ω –∫–∞–∫ –µ—Å—Ç—å –∏–ª–∏ –∏–∑–º–µ–Ω–∏—Ç—å –Ω–∞—Å—Ç—Ä–æ–π–∫–∏:"
    
    keyboard = [
        [InlineKeyboardButton("‚úÖ –ò—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å —à–∞–±–ª–æ–Ω", callback_data="confirm_template")],
        [InlineKeyboardButton("‚öôÔ∏è –ò–∑–º–µ–Ω–∏—Ç—å –Ω–∞—Å—Ç—Ä–æ–π–∫–∏", callback_data="modify_template")],
        [InlineKeyboardButton("üîô –í—ã–±—Ä–∞—Ç—å –¥—Ä—É–≥–æ–π —à–∞–±–ª–æ–Ω", callback_data="back_to_template_selection")]
    ]
    
    await query.edit_message_text(
        text=message,
        reply_markup=InlineKeyboardMarkup(keyboard),
        parse_mode="Markdown"
    )

async def show_manual_creation_fields(query, context: ContextTypes.DEFAULT_TYPE):
    """Show manual field editing interface"""
    user_data = context.user_data.get("create_user", {})
    
    message = "‚öôÔ∏è *–†—É—á–Ω–æ–µ —Å–æ–∑–¥–∞–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è*\n\n"
    message += "–ù–∞—Å—Ç—Ä–æ–π—Ç–µ –ø–∞—Ä–∞–º–µ—Ç—Ä—ã –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è:\n\n"
    
    # Show current values
    from modules.utils.formatters import format_bytes
    
    traffic = user_data.get("trafficLimitBytes", 100 * 1024 * 1024 * 1024)
    if traffic == 0:
        traffic_str = "–ë–µ–∑–ª–∏–º–∏—Ç–Ω—ã–π"
    else:
        traffic_str = format_bytes(traffic)
    
    devices = user_data.get("hwidDeviceLimit", 1)
    devices_str = f"{devices} —É—Å—Ç—Ä–æ–π—Å—Ç–≤" if devices > 0 else "–ë–µ–∑ –ª–∏–º–∏—Ç–∞"
    
    strategy = user_data.get("trafficLimitStrategy", "MONTH")
    strategy_map = {
        "NO_RESET": "–ë–µ–∑ —Å–±—Ä–æ—Å–∞",
        "DAY": "–ï–∂–µ–¥–Ω–µ–≤–Ω–æ", 
        "WEEK": "–ï–∂–µ–Ω–µ–¥–µ–ª—å–Ω–æ",
        "MONTH": "–ï–∂–µ–º–µ—Å—è—á–Ω–æ"
    }
    strategy_str = strategy_map.get(strategy, strategy)
    
    description = user_data.get("description", "–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å VPN")
    
    message += f"üìà –õ–∏–º–∏—Ç —Ç—Ä–∞—Ñ–∏–∫–∞: *{traffic_str}*\n"
    message += f"üì± –õ–∏–º–∏—Ç —É—Å—Ç—Ä–æ–π—Å—Ç–≤: *{devices_str}*\n"
    message += f"üîÑ –°–±—Ä–æ—Å —Ç—Ä–∞—Ñ–∏–∫–∞: *{strategy_str}*\n"
    message += f"üìù –û–ø–∏—Å–∞–Ω–∏–µ: *{description}*\n"
    
    keyboard = [
        [
            InlineKeyboardButton("üìà –¢—Ä–∞—Ñ–∏–∫", callback_data="edit_field_traffic"),
            InlineKeyboardButton("üì± –£—Å—Ç—Ä–æ–π—Å—Ç–≤–∞", callback_data="edit_field_devices")
        ],
        [
            InlineKeyboardButton("üîÑ –°–±—Ä–æ—Å", callback_data="edit_field_strategy"),
            InlineKeyboardButton("üìù –û–ø–∏—Å–∞–Ω–∏–µ", callback_data="edit_field_description")
        ],
        [InlineKeyboardButton("‚úÖ –ì–æ—Ç–æ–≤–æ", callback_data="finish_manual_creation")],
        [InlineKeyboardButton("üîô –ù–∞–∑–∞–¥", callback_data="back_to_template_selection")]
    ]
    
    await query.edit_message_text(
        text=message,
        reply_markup=InlineKeyboardMarkup(keyboard),
        parse_mode="Markdown"
    )

async def ask_username(query, context: ContextTypes.DEFAULT_TYPE):
    """Ask for username or create user if template was used"""
    using_template = context.user_data.get("using_template")
    
    if using_template:
        # For templates, create user automatically with generated username
        await finish_create_user_directly(query, context)
    else:
        # For manual creation, ask for username
        message = "üë§ *–í–≤–µ–¥–∏—Ç–µ –∏–º—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è*\n\n"
        message += "–û—Å—Ç–∞–≤—å—Ç–µ –ø—É—Å—Ç—ã–º –¥–ª—è –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–æ–π –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏:"
        
        keyboard = [
            [InlineKeyboardButton("üé≤ –°–≥–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞—Ç—å –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏", callback_data="username_done")],
            [InlineKeyboardButton("üîô –ù–∞–∑–∞–¥", callback_data="back_to_template_selection")]
        ]
        
        await query.edit_message_text(
            text=message,
            reply_markup=InlineKeyboardMarkup(keyboard),
            parse_mode="Markdown"
        )

async def finish_create_user_directly(query, context: ContextTypes.DEFAULT_TYPE):
    """Finish creating user directly (for templates) with improved error handling"""
    # Generate username if not provided
    user_data = context.user_data["create_user"]
    if "username" not in user_data or not user_data["username"]:
        characters = string.ascii_letters + string.digits
        user_data["username"] = ''.join(random.choice(characters) for _ in range(20))
    
    # Set required defaults
    defaults = {
        "trafficLimitStrategy": "MONTH",
        "trafficLimitBytes": 100 * 1024 * 1024 * 1024,  # 100 GB
        "hwidDeviceLimit": 1,
        "resetDay": 1
    }
    
    for key, value in defaults.items():
        if key not in user_data:
            user_data[key] = value
    
    if "expireAt" not in user_data:
        user_data["expireAt"] = (datetime.now() + timedelta(days=30)).strftime("%Y-%m-%dT00:00:00.000Z")
    
    if "description" not in user_data or not user_data["description"]:
        user_data["description"] = f"–ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏ —Å–æ–∑–¥–∞–Ω–Ω—ã–π –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {datetime.now().strftime('%d.%m.%Y %H:%M')}"
    
    # Handle device limit strategy
    if user_data.get("hwidDeviceLimit", 0) > 0:
        user_data["trafficLimitStrategy"] = user_data.get("trafficLimitStrategy", "MONTH")
    
    try:
        # Create user
        result = await UserAPI.create_user(user_data)
        logger.info(f"Template user creation API result: {result}")
        
        # Handle different API response formats
        user = None
        if isinstance(result, dict):
            if 'response' in result:
                user = result['response']
            elif 'uuid' in result:
                user = result
        
        if user and 'uuid' in user:
            keyboard = [
                [InlineKeyboardButton("üëÅÔ∏è –ü—Ä–æ—Å–º–æ—Ç—Ä –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è", callback_data=f"view_{user['uuid']}")],
                [InlineKeyboardButton("üîô –ù–∞–∑–∞–¥ –≤ –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é", callback_data="back_to_main")]
            ]
            reply_markup = InlineKeyboardMarkup(keyboard)
            
            message = f"‚úÖ –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å —É—Å–ø–µ—à–Ω–æ —Å–æ–∑–¥–∞–Ω!\n\n"
            message += f"üë§ –ò–º—è: {escape_markdown(user['username'])}\n"
            message += f"üÜî UUID: `{user['uuid']}`\n"
            message += f"üîë –ö–æ—Ä–æ—Ç–∫–∏–π UUID: `{user.get('shortUuid', 'N/A')}`\n"
            message += f"üìù UUID –ø–æ–¥–ø–∏—Å–∫–∏: `{user.get('subscriptionUuid', 'N/A')}`\n\n"
            
            # Handle subscription URL with proper escaping
            if 'subscriptionUrl' in user:
                sub_url = user['subscriptionUrl']
                message += f"üîó URL –ø–æ–¥–ø–∏—Å–∫–∏:\n```\n{sub_url}\n```\n"
            
            await query.edit_message_text(
                text=message,
                reply_markup=reply_markup,
                parse_mode="Markdown"
            )
            
            # Clear creation data
            context.user_data.pop("create_user", None)
            context.user_data.pop("using_template", None)
            
        else:
            logger.error(f"Invalid template user creation response: {result}")
            raise Exception("Invalid API response format")
            
    except Exception as e:
        logger.error(f"Error creating template user: {e}")
        keyboard = [
            [InlineKeyboardButton("üîÑ –ü–æ–ø—Ä–æ–±–æ–≤–∞—Ç—å —Å–Ω–æ–≤–∞", callback_data="create_user")],
            [InlineKeyboardButton("üîô –ù–∞–∑–∞–¥ –≤ –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é", callback_data="back_to_main")]
        ]
        reply_markup = InlineKeyboardMarkup(keyboard)
        
        await query.edit_message_text(
            text="‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å —Å–æ–∑–¥–∞—Ç—å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è. –ü—Ä–æ–≤–µ—Ä—å—Ç–µ –≤–≤–µ–¥–µ–Ω–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ.",
            reply_markup=reply_markup
        )
async def show_field_editor(query, context: ContextTypes.DEFAULT_TYPE, field_name: str):
    """Show field value selection interface"""
    message = f"‚öôÔ∏è *–ù–∞—Å—Ç—Ä–æ–π–∫–∞: {field_name}*\n\n"
    keyboard = []
    
    if field_name == "traffic":
        message += "–í—ã–±–µ—Ä–∏—Ç–µ –ª–∏–º–∏—Ç —Ç—Ä–∞—Ñ–∏–∫–∞:"
        from modules.utils.presets import TRAFFIC_LIMIT_PRESETS
        
        options = list(TRAFFIC_LIMIT_PRESETS.items())
        for i in range(0, len(options), 2):
            row = []
            for j in range(2):
                if i + j < len(options):
                    name, value = options[i + j]
                    row.append(InlineKeyboardButton(
                        name, 
                        callback_data=f"set_traffic_{value}"
                    ))
            keyboard.append(row)
            
    elif field_name == "devices":
        message += "–í—ã–±–µ—Ä–∏—Ç–µ –ª–∏–º–∏—Ç —É—Å—Ç—Ä–æ–π—Å—Ç–≤:"
        from modules.utils.presets import DEVICE_LIMIT_PRESETS
        
        options = list(DEVICE_LIMIT_PRESETS.items())
        for i in range(0, len(options), 2):
            row = []
            for j in range(2):
                if i + j < len(options):
                    name, value = options[i + j]
                    row.append(InlineKeyboardButton(
                        name,
                        callback_data=f"set_devices_{value}"
                    ))
            keyboard.append(row)
            
    elif field_name == "strategy":
        message += "–í—ã–±–µ—Ä–∏—Ç–µ —Å—Ç—Ä–∞—Ç–µ–≥–∏—é —Å–±—Ä–æ—Å–∞ —Ç—Ä–∞—Ñ–∏–∫–∞:"
        strategies = [
            ("–ë–µ–∑ —Å–±—Ä–æ—Å–∞", "NO_RESET"),
            ("–ï–∂–µ–¥–Ω–µ–≤–Ω–æ", "DAY"),
            ("–ï–∂–µ–Ω–µ–¥–µ–ª—å–Ω–æ", "WEEK"), 
            ("–ï–∂–µ–º–µ—Å—è—á–Ω–æ", "MONTH")
        ]
        
        for name, value in strategies:
            keyboard.append([InlineKeyboardButton(
                name,
                callback_data=f"set_strategy_{value}"
            )])
            
    elif field_name == "description":
        message += "–í—ã–±–µ—Ä–∏—Ç–µ –æ–ø–∏—Å–∞–Ω–∏–µ:"
        from modules.utils.presets import DESCRIPTION_PRESETS
        
        for desc in DESCRIPTION_PRESETS:
            keyboard.append([InlineKeyboardButton(
                desc,
                callback_data=f"set_description_{desc}"
            )])
    
    keyboard.append([InlineKeyboardButton("üîô –ù–∞–∑–∞–¥", callback_data="modify_template")])
    
    await query.edit_message_text(
        text=message,
        reply_markup=InlineKeyboardMarkup(keyboard),
        parse_mode="Markdown"
    )

async def handle_field_value_selection(query, context: ContextTypes.DEFAULT_TYPE):
    """Handle field value selection"""
    data = query.data
    user_data = context.user_data.get("create_user", {})
    
    if data.startswith("set_traffic_"):
        value = int(data[12:])  # Remove "set_traffic_" prefix
        user_data["trafficLimitBytes"] = value
        
    elif data.startswith("set_devices_"):
        value = int(data[12:])  # Remove "set_devices_" prefix  
        user_data["hwidDeviceLimit"] = value
        
    elif data.startswith("set_strategy_"):
        value = data[13:]  # Remove "set_strategy_" prefix
        user_data["trafficLimitStrategy"] = value
        
    elif data.startswith("set_description_"):
        value = data[16:]  # Remove "set_description_" prefix
        user_data["description"] = value
    
    context.user_data["create_user"] = user_data
    await show_manual_creation_fields(query, context)

async def handle_username_text_input(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """Handle text input for username"""
    if not update.message:
        return CREATE_USER_FIELD
    
    username = update.message.text.strip()
    
    # Validate username
    if username and not re.match(r'^[a-zA-Z0-9_-]{3,30}$', username):
        await update.message.reply_text(
            "‚ùå –ò–º—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –¥–æ–ª–∂–Ω–æ —Å–æ–¥–µ—Ä–∂–∞—Ç—å —Ç–æ–ª—å–∫–æ –±—É–∫–≤—ã, —Ü–∏—Ñ—Ä—ã, –¥–µ—Ñ–∏—Å—ã –∏ –ø–æ–¥—á–µ—Ä–∫–∏–≤–∞–Ω–∏—è (3-30 —Å–∏–º–≤–æ–ª–æ–≤).\n"
            "–ü–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â–µ —Ä–∞–∑ –∏–ª–∏ –∏—Å–ø–æ–ª—å–∑—É–π—Ç–µ –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫—É—é –≥–µ–Ω–µ—Ä–∞—Ü–∏—é:",
            reply_markup=InlineKeyboardMarkup([
                [InlineKeyboardButton("üé≤ –°–≥–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞—Ç—å –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏", callback_data="username_done")],
                [InlineKeyboardButton("üîô –ù–∞–∑–∞–¥", callback_data="back_to_template_selection")]
            ])
        )
        return CREATE_USER_FIELD
    
    # Store username and finish creation
    if username:
        context.user_data["create_user"]["username"] = username
    
    await finish_create_user(update, context)
    return MAIN_MENU