from telegram import Update, InlineKeyboardButton, InlineKeyboardMarkup
from telegram.ext import ContextTypes
from datetime import datetime, timedelta
import logging
import random
import string
import re

from modules.config import CREATE_USER_FIELD, USER_FIELDS, MAIN_MENU
from modules.api.users import UserAPI
from modules.utils.formatters import escape_markdown, format_bytes

logger = logging.getLogger(__name__)

async def start_create_user(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """Start creating a new user - show template selection"""
    # Clear previous data
    context.user_data.pop("create_user", None)
    context.user_data.pop("create_user_fields", None)
    context.user_data.pop("current_field_index", None)
    context.user_data.pop("search_type", None)
    context.user_data.pop("using_template", None)
    
    context.user_data["create_user"] = {}
    
    await show_template_selection(update, context)
    return CREATE_USER_FIELD

async def show_template_selection(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """Show template selection menu"""
    from modules.utils.presets import get_template_names
    
    message = "üéØ *–°–æ–∑–¥–∞–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è*\n\n"
    message += "–í—ã–±–µ—Ä–∏—Ç–µ –≥–æ—Ç–æ–≤—ã–π —à–∞–±–ª–æ–Ω –∏–ª–∏ —Å–æ–∑–¥–∞–π—Ç–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –≤—Ä—É—á–Ω—É—é:\n\n"
    message += "üìã *–ì–æ—Ç–æ–≤—ã–µ —à–∞–±–ª–æ–Ω—ã* —Å–æ–¥–µ—Ä–∂–∞—Ç –≤—Å–µ –Ω–µ–æ–±—Ö–æ–¥–∏–º—ã–µ –Ω–∞—Å—Ç—Ä–æ–π–∫–∏\n"
    message += "‚öôÔ∏è *–†—É—á–Ω–æ–µ —Å–æ–∑–¥–∞–Ω–∏–µ* –ø–æ–∑–≤–æ–ª—è–µ—Ç –Ω–∞—Å—Ç—Ä–æ–∏—Ç—å –∫–∞–∂–¥–æ–µ –ø–æ–ª–µ –æ—Ç–¥–µ–ª—å–Ω–æ"
    
    keyboard = []
    templates = get_template_names()
    
    # Add template buttons
    for i in range(0, len(templates), 2):
        row = []
        for j in range(2):
            if i + j < len(templates):
                template_name = templates[i + j]
                row.append(InlineKeyboardButton(
                    template_name, 
                    callback_data=f"template_{template_name}"
                ))
        keyboard.append(row)
    
    keyboard.extend([
        [InlineKeyboardButton("‚öôÔ∏è –°–æ–∑–¥–∞—Ç—å –≤—Ä—É—á–Ω—É—é", callback_data="create_manual")],
        [InlineKeyboardButton("‚ùå –û—Ç–º–µ–Ω–∞", callback_data="back_to_users")]
    ])
    
    reply_markup = InlineKeyboardMarkup(keyboard)
    
    if update.callback_query:
        await update.callback_query.edit_message_text(
            text=message,
            reply_markup=reply_markup,
            parse_mode="Markdown"
        )
    else:
        await update.message.reply_text(
            text=message,
            reply_markup=reply_markup,
            parse_mode="Markdown"
        )

async def handle_create_user_input(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """Handle user input when creating a user"""
    # Implementation of user creation input handling
    # This would include template selection, field input, validation, etc.
    pass

async def finish_create_user(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """Finish creating a user"""
    user_data = context.user_data["create_user"]
    
    # Validate and set defaults
    if "username" not in user_data or not user_data["username"]:
        characters = string.ascii_letters + string.digits
        user_data["username"] = ''.join(random.choice(characters) for _ in range(20))
    
    # Set required defaults
    defaults = {
        "trafficLimitStrategy": "NO_RESET",
        "trafficLimitBytes": 100 * 1024 * 1024 * 1024,  # 100 GB
        "hwidDeviceLimit": 1,
        "resetDay": 1
    }
    
    for key, value in defaults.items():
        if key not in user_data:
            user_data[key] = value
    
    if "expireAt" not in user_data:
        user_data["expireAt"] = (datetime.now() + timedelta(days=30)).strftime("%Y-%m-%dT00:00:00.000Z")
    
    if "description" not in user_data or not user_data["description"]:
        user_data["description"] = f"–ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏ —Å–æ–∑–¥–∞–Ω–Ω—ã–π –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {datetime.now().strftime('%d.%m.%Y %H:%M')}"
    
    # Handle device limit strategy
    if user_data.get("hwidDeviceLimit", 0) > 0:
        user_data["trafficLimitStrategy"] = "NO_RESET"
    
    # Create user
    result = await UserAPI.create_user(user_data)
    
    if result and 'response' in result:
        user = result['response']
        keyboard = [
            [InlineKeyboardButton("üëÅÔ∏è –ü—Ä–æ—Å–º–æ—Ç—Ä –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è", callback_data=f"view_{user['uuid']}")],
            [InlineKeyboardButton("üîô –ù–∞–∑–∞–¥ –≤ –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é", callback_data="back_to_main")]
        ]
        reply_markup = InlineKeyboardMarkup(keyboard)
        
        message = f"‚úÖ –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å —É—Å–ø–µ—à–Ω–æ —Å–æ–∑–¥–∞–Ω!\n\n"
        message += f"üë§ –ò–º—è: {escape_markdown(user['username'])}\n"
        message += f"üÜî UUID: `{user['uuid']}`\n"
        message += f"üîë –ö–æ—Ä–æ—Ç–∫–∏–π UUID: `{user['shortUuid']}`\n"
        message += f"üìù UUID –ø–æ–¥–ø–∏—Å–∫–∏: `{user['subscriptionUuid']}`\n\n"
        message += f"üîó URL –ø–æ–¥–ø–∏—Å–∫–∏:\n```\n{user['subscriptionUrl']}\n```\n"
        
        if update.callback_query:
            await update.callback_query.edit_message_text(
                text=message,
                reply_markup=reply_markup,
                parse_mode="Markdown"
            )
        else:
            await update.message.reply_text(
                text=message,
                reply_markup=reply_markup,
                parse_mode="Markdown"
            )
        
        return MAIN_MENU
    else:
        keyboard = [
            [InlineKeyboardButton("üîÑ –ü–æ–ø—Ä–æ–±–æ–≤–∞—Ç—å —Å–Ω–æ–≤–∞", callback_data="create_user")],
            [InlineKeyboardButton("üîô –ù–∞–∑–∞–¥ –≤ –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é", callback_data="back_to_main")]
        ]
        reply_markup = InlineKeyboardMarkup(keyboard)
        
        await update.message.reply_text(
            "‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å —Å–æ–∑–¥–∞—Ç—å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è. –ü—Ä–æ–≤–µ—Ä—å—Ç–µ –≤–≤–µ–¥–µ–Ω–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ.",
            reply_markup=reply_markup
        )
        
        return MAIN_MENU