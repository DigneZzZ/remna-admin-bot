from telegram import Update, InlineKeyboardButton, InlineKeyboardMarkup
from telegram.ext import ContextTypes, ConversationHandler
import logging

from modules.config import (
    MAIN_MENU, USER_MENU, NODE_MENU, STATS_MENU, HOST_MENU, INBOUND_MENU, 
    BULK_MENU, CREATE_USER, CREATE_USER_FIELD, SELECTING_USER, WAITING_FOR_INPUT,
    SEARCH_USERS, SEARCH_NODES, SEARCH_HOSTS, SEARCH_INBOUNDS
)
from modules.utils.auth import check_authorization
from modules.utils.formatters import safe_edit_message

# Import handlers
from modules.handlers.user_handlers import show_users_menu
from modules.handlers.users.user_create import start_create_user
from modules.handlers.users.user_details import show_user_details
from modules.handlers.node_handlers import show_nodes_menu
from modules.handlers.stats_handlers import show_stats_menu
from modules.handlers.host_handlers import show_hosts_menu
from modules.handlers.inbound_handlers import show_inbounds_menu
from modules.handlers.bulk_handlers import show_bulk_menu
from modules.handlers.start_handler import show_main_menu

logger = logging.getLogger(__name__)

async def handle_menu_selection(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """Handle main menu selection with comprehensive routing"""
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏—é
    if not check_authorization(update.effective_user):
        await update.callback_query.answer("‚õî –í—ã –Ω–µ –∞–≤—Ç–æ—Ä–∏–∑–æ–≤–∞–Ω—ã –¥–ª—è –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è —ç—Ç–æ–≥–æ –±–æ—Ç–∞.", show_alert=True)
        return ConversationHandler.END
    
    query = update.callback_query
    await query.answer()
    data = query.data

    try:
        # Main menu sections
        if data in ["users", "menu_users"]:
            return await show_users_menu(update, context)

        elif data in ["nodes", "menu_nodes"]:
            return await show_nodes_menu(update, context)

        elif data in ["stats", "menu_stats"]:
            return await show_stats_menu(update, context)

        elif data in ["hosts", "menu_hosts"]:
            return await show_hosts_menu(update, context)

        elif data in ["inbounds", "menu_inbounds"]:
            return await show_inbounds_menu(update, context)

        elif data in ["bulk", "menu_bulk"]:
            return await show_bulk_menu(update, context)

        # User operations
        elif data in ["create_user", "menu_create_user"]:
            return await start_create_user(update, context)

        elif data.startswith("view_"):
            uuid = data.split("_", 1)[1]
            return await show_user_details(update, context, uuid)

        # Quick actions from main menu
        elif data == "quick_user_stats":
            return await show_quick_user_stats(update, context)

        elif data == "quick_system_info":
            return await show_quick_system_info(update, context)

        elif data == "quick_recent_users":
            return await show_quick_recent_users(update, context)

        # Search shortcuts
        elif data == "search_users_quick":
            return await setup_quick_search(update, context, "users")

        elif data == "search_nodes_quick":
            return await setup_quick_search(update, context, "nodes")

        # Navigation
        elif data == "back_to_main":
            return await show_main_menu(update, context)

        elif data == "refresh_main":
            return await refresh_main_menu(update, context)

        # Settings and configuration
        elif data == "bot_settings":
            return await show_bot_settings(update, context)

        elif data == "admin_tools":
            return await show_admin_tools(update, context)

        # Help and information
        elif data == "help":
            return await show_help_menu(update, context)

        elif data == "about":
            return await show_about_info(update, context)

        # Default fallback
        else:
            logger.warning(f"Unknown menu selection: {data}")
            return await show_main_menu(update, context)

    except Exception as e:
        logger.error(f"Error in menu selection for {data}: {e}")
        await query.answer("‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ –∑–∞–ø—Ä–æ—Å–∞", show_alert=True)
        return await show_main_menu(update, context)

async def show_quick_user_stats(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """Show quick user statistics overlay"""
    try:
        from modules.api.users import UserAPI
        from modules.utils.formatters import format_bytes
        
        await update.callback_query.edit_message_text("üìä –ó–∞–≥—Ä—É–∑–∫–∞ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏...")
        
        users_response = await UserAPI.get_all_users()
        if not users_response or 'response' not in users_response:
            raise Exception("–ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å –¥–∞–Ω–Ω—ã–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π")
        
        users = users_response['response']
        
        # Quick stats
        total_users = len(users)
        active_users = len([u for u in users if u.get('status') == 'ACTIVE'])
        total_traffic = sum(u.get('usedTraffic', 0) for u in users)
        
        message = f"‚ö° *–ë—ã—Å—Ç—Ä–∞—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞*\n\n"
        message += f"üë• –í—Å–µ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π: `{total_users}`\n"
        message += f"üü¢ –ê–∫—Ç–∏–≤–Ω—ã—Ö: `{active_users}`\n"
        message += f"üìä –û–±—â–∏–π —Ç—Ä–∞—Ñ–∏–∫: `{format_bytes(total_traffic)}`\n"
        
        if total_users > 0:
            avg_traffic = total_traffic / total_users
            message += f"üìà –°—Ä–µ–¥–Ω–∏–π —Ç—Ä–∞—Ñ–∏–∫: `{format_bytes(avg_traffic)}`"
        
        keyboard = [
            [InlineKeyboardButton("üìä –ü–æ–¥—Ä–æ–±–Ω–∞—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞", callback_data="menu_stats")],
            [InlineKeyboardButton("üîô –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é", callback_data="back_to_main")]
        ]
        reply_markup = InlineKeyboardMarkup(keyboard)
        
        await update.callback_query.edit_message_text(
            text=message,
            reply_markup=reply_markup,
            parse_mode="Markdown"
        )
        
        return MAIN_MENU
        
    except Exception as e:
        logger.error(f"Error showing quick user stats: {e}")
        await update.callback_query.edit_message_text(
            "‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–≥—Ä—É–∑–∫–µ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏",
            reply_markup=InlineKeyboardMarkup([[
                InlineKeyboardButton("üîô –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é", callback_data="back_to_main")
            ]])
        )
        return MAIN_MENU

async def show_quick_system_info(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """Show quick system information"""
    try:
        from modules.api.system import SystemAPI
        from modules.utils.formatters import format_bytes
        
        await update.callback_query.edit_message_text("üñ•Ô∏è –ó–∞–≥—Ä—É–∑–∫–∞ —Å–∏—Å—Ç–µ–º–Ω–æ–π –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏...")
        
        stats_response = await SystemAPI.get_system_stats()
        if not stats_response or 'response' not in stats_response:
            raise Exception("–ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å —Å–∏—Å—Ç–µ–º–Ω—É—é –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é")
        
        stats = stats_response['response']
        
        message = f"üñ•Ô∏è *–°–∏—Å—Ç–µ–º–Ω–∞—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è*\n\n"
        
        # System info
        if 'system' in stats:
            sys_info = stats['system']
            message += f"üíª –û–°: `{sys_info.get('os', 'N/A')}`\n"
            message += f"üèóÔ∏è –ê—Ä—Ö–∏—Ç–µ–∫—Ç—É—Ä–∞: `{sys_info.get('arch', 'N/A')}`\n"
        
        # Memory info
        if 'memory' in stats:
            mem = stats['memory']
            total_gb = mem.get('total', 0) / (1024**3)
            used_gb = mem.get('used', 0) / (1024**3)
            usage_percent = (mem.get('used', 0) / mem.get('total', 1)) * 100
            
            message += f"üíæ –ü–∞–º—è—Ç—å: `{used_gb:.1f}/{total_gb:.1f} GB ({usage_percent:.1f}%)`\n"
        
        # CPU info
        if 'cpu' in stats:
            cpu = stats['cpu']
            message += f"‚ö° CPU: `{cpu.get('usage', 0):.1f}%`\n"
        
        # Uptime
        if 'uptime' in stats:
            uptime_seconds = stats['uptime']
            days = uptime_seconds // 86400
            hours = (uptime_seconds % 86400) // 3600
            message += f"‚è±Ô∏è Uptime: `{days}–¥ {hours}—á`"
        
        keyboard = [
            [InlineKeyboardButton("üìä –ü–æ–ª–Ω–∞—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞", callback_data="menu_stats")],
            [InlineKeyboardButton("üîô –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é", callback_data="back_to_main")]
        ]
        reply_markup = InlineKeyboardMarkup(keyboard)
        
        await update.callback_query.edit_message_text(
            text=message,
            reply_markup=reply_markup,
            parse_mode="Markdown"
        )
        
        return MAIN_MENU
        
    except Exception as e:
        logger.error(f"Error showing system info: {e}")
        await update.callback_query.edit_message_text(
            "‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–≥—Ä—É–∑–∫–µ —Å–∏—Å—Ç–µ–º–Ω–æ–π –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏",
            reply_markup=InlineKeyboardMarkup([[
                InlineKeyboardButton("üîô –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é", callback_data="back_to_main")
            ]])
        )
        return MAIN_MENU

async def show_quick_recent_users(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """Show recently created or active users"""
    try:
        from modules.api.users import UserAPI
        from datetime import datetime, timedelta
        
        await update.callback_query.edit_message_text("üë• –ó–∞–≥—Ä—É–∑–∫–∞ –ø–æ—Å–ª–µ–¥–Ω–∏—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π...")
        
        users_response = await UserAPI.get_all_users()
        if not users_response or 'response' not in users_response:
            raise Exception("–ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å –¥–∞–Ω–Ω—ã–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π")
        
        users = users_response['response']
        
        # Sort by creation date (newest first)
        sorted_users = sorted(users, key=lambda x: x.get('createdAt', ''), reverse=True)
        recent_users = sorted_users[:5]  # Last 5 users
        
        message = f"üë• *–ü–æ—Å–ª–µ–¥–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–∏*\n\n"
        
        if not recent_users:
            message += "‚ÑπÔ∏è –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–∏ –Ω–µ –Ω–∞–π–¥–µ–Ω—ã"
        else:
            for i, user in enumerate(recent_users, 1):
                status_emoji = {
                    'ACTIVE': 'üü¢',
                    'DISABLED': 'üî¥',
                    'EXPIRED': 'üü°',
                    'LIMITED': 'üü†'
                }.get(user.get('status'), '‚ö™')
                
                username = user.get('username', 'N/A')[:20]
                created_date = user.get('createdAt', '')[:10]
                
                message += f"{i}. {status_emoji} `{username}` - {created_date}\n"
        
        keyboard = [
            [InlineKeyboardButton("üë• –í—Å–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–∏", callback_data="menu_users")],
            [InlineKeyboardButton("‚ûï –°–æ–∑–¥–∞—Ç—å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è", callback_data="create_user")],
            [InlineKeyboardButton("üîô –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é", callback_data="back_to_main")]
        ]
        reply_markup = InlineKeyboardMarkup(keyboard)
        
        await update.callback_query.edit_message_text(
            text=message,
            reply_markup=reply_markup,
            parse_mode="Markdown"
        )
        
        return MAIN_MENU
        
    except Exception as e:
        logger.error(f"Error showing recent users: {e}")
        await update.callback_query.edit_message_text(
            "‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–≥—Ä—É–∑–∫–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π",
            reply_markup=InlineKeyboardMarkup([[
                InlineKeyboardButton("üîô –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é", callback_data="back_to_main")
            ]])
        )
        return MAIN_MENU

async def setup_quick_search(update: Update, context: ContextTypes.DEFAULT_TYPE, search_type: str):
    """Setup quick search for different object types"""
    search_configs = {
        "users": {
            "title": "üë• –ë—ã—Å—Ç—Ä—ã–π –ø–æ–∏—Å–∫ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π",
            "prompt": "üîç –í–≤–µ–¥–∏—Ç–µ –∏–º—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –∏–ª–∏ Telegram ID:",
            "hint": "üí° –ú–æ–∂–Ω–æ –≤–≤–µ—Å—Ç–∏ —á–∞—Å—Ç—å –∏–º–µ–Ω–∏ –∏–ª–∏ —Ç–æ—á–Ω—ã–π ID",
            "state": SEARCH_USERS
        },
        "nodes": {
            "title": "üñ•Ô∏è –ë—ã—Å—Ç—Ä—ã–π –ø–æ–∏—Å–∫ —Å–µ—Ä–≤–µ—Ä–æ–≤",
            "prompt": "üîç –í–≤–µ–¥–∏—Ç–µ –Ω–∞–∑–≤–∞–Ω–∏–µ –∏–ª–∏ –∞–¥—Ä–µ—Å —Å–µ—Ä–≤–µ—Ä–∞:",
            "hint": "üí° –ú–æ–∂–Ω–æ –≤–≤–µ—Å—Ç–∏ —á–∞—Å—Ç—å –Ω–∞–∑–≤–∞–Ω–∏—è –∏–ª–∏ IP –∞–¥—Ä–µ—Å",
            "state": SEARCH_NODES
        }
    }
    
    config = search_configs.get(search_type)
    if not config:
        return await show_main_menu(update, context)
    
    message = f"{config['title']}\n\n{config['prompt']}\n\n{config['hint']}"
    
    keyboard = [[InlineKeyboardButton("‚ùå –û—Ç–º–µ–Ω–∞", callback_data="back_to_main")]]
    reply_markup = InlineKeyboardMarkup(keyboard)
    
    await update.callback_query.edit_message_text(
        text=message,
        reply_markup=reply_markup
    )
    
    context.user_data["quick_search_type"] = search_type
    return config["state"]

async def refresh_main_menu(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """Refresh main menu with updated data"""
    # Clear any cached data
    context.user_data.clear()
    
    await update.callback_query.edit_message_text("üîÑ –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ...")
    return await show_main_menu(update, context)

async def show_bot_settings(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """Show bot settings and configuration"""
    from modules.config import ADMIN_USER_IDS, API_BASE_URL
    
    message = f"‚öôÔ∏è *–ù–∞—Å—Ç—Ä–æ–π–∫–∏ –±–æ—Ç–∞*\n\n"
    message += f"üîß API URL: `{API_BASE_URL}`\n"
    message += f"üë• –ê–¥–º–∏–Ω–æ–≤: `{len(ADMIN_USER_IDS)}`\n"
    message += f"ü§ñ –í–µ—Ä—Å–∏—è: `1.6.5`\n\n"
    message += "–ó–¥–µ—Å—å –±—É–¥—É—Ç –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ –±–æ—Ç–∞ (–≤ —Ä–∞–∑—Ä–∞–±–æ—Ç–∫–µ)"
    
    keyboard = [
        [InlineKeyboardButton("üîÑ –ü–µ—Ä–µ–∑–∞–≥—Ä—É–∑–∏—Ç—å –∫–æ–Ω—Ñ–∏–≥", callback_data="reload_config")],
        [InlineKeyboardButton("üìä –õ–æ–≥–∏ –±–æ—Ç–∞", callback_data="show_bot_logs")],
        [InlineKeyboardButton("üîô –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é", callback_data="back_to_main")]
    ]
    reply_markup = InlineKeyboardMarkup(keyboard)
    
    await update.callback_query.edit_message_text(
        text=message,
        reply_markup=reply_markup,
        parse_mode="Markdown"
    )
    
    return MAIN_MENU

async def show_admin_tools(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """Show administrative tools"""
    message = f"üõ†Ô∏è *–ò–Ω—Å—Ç—Ä—É–º–µ–Ω—Ç—ã –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞*\n\n"
    message += "–°–ø–µ—Ü–∏–∞–ª—å–Ω—ã–µ –∏–Ω—Å—Ç—Ä—É–º–µ–Ω—Ç—ã –¥–ª—è –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω–∏—è —Å–∏—Å—Ç–µ–º—ã"
    
    keyboard = [
        [
            InlineKeyboardButton("üóÉÔ∏è –ë–µ–∫–∞–ø –¥–∞–Ω–Ω—ã—Ö", callback_data="backup_data"),
            InlineKeyboardButton("üîÑ –°–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏—è", callback_data="sync_data")
        ],
        [
            InlineKeyboardButton("üîç –î–∏–∞–≥–Ω–æ—Å—Ç–∏–∫–∞", callback_data="run_diagnostics"),
            InlineKeyboardButton("üßπ –û—á–∏—Å—Ç–∫–∞", callback_data="cleanup_data")
        ],
        [
            InlineKeyboardButton("üìä –°–∏—Å—Ç–µ–º–Ω–∞—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞", callback_data="detailed_system_stats"),
            InlineKeyboardButton("‚ö° –ü—Ä–æ–∏–∑–≤–æ–¥–∏—Ç–µ–ª—å–Ω–æ—Å—Ç—å", callback_data="performance_stats")
        ],
        [InlineKeyboardButton("üîô –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é", callback_data="back_to_main")]
    ]
    reply_markup = InlineKeyboardMarkup(keyboard)
    
    await update.callback_query.edit_message_text(
        text=message,
        reply_markup=reply_markup,
        parse_mode="Markdown"
    )
    
    return MAIN_MENU

async def show_help_menu(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """Show help and documentation"""
    message = f"üìö *–°–ø—Ä–∞–≤–∫–∞ –ø–æ –±–æ—Ç—É*\n\n"
    message += "üéØ *–û—Å–Ω–æ–≤–Ω—ã–µ —Ä–∞–∑–¥–µ–ª—ã:*\n"
    message += "‚Ä¢ üë• –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–∏ - —É–ø—Ä–∞–≤–ª–µ–Ω–∏–µ —É—á–µ—Ç–Ω—ã–º–∏ –∑–∞–ø–∏—Å—è–º–∏\n"
    message += "‚Ä¢ üñ•Ô∏è –°–µ—Ä–≤–µ—Ä—ã - —É–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –Ω–æ–¥–∞–º–∏\n"
    message += "‚Ä¢ üåê –•–æ—Å—Ç—ã - –Ω–∞—Å—Ç—Ä–æ–π–∫–∞ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏–π\n"
    message += "‚Ä¢ üì° Inbound'—ã - –≤—Ö–æ–¥—è—â–∏–µ —Å–æ–µ–¥–∏–Ω–µ–Ω–∏—è\n"
    message += "‚Ä¢ üìä –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ - –∞–Ω–∞–ª–∏—Ç–∏–∫–∞ –∏ –æ—Ç—á–µ—Ç—ã\n\n"
    message += "üîç *–ü–æ–∏—Å–∫ —Ä–∞–±–æ—Ç–∞–µ—Ç –ø–æ —á–∞—Å—Ç–∏—á–Ω–æ–º—É —Å–æ–≤–ø–∞–¥–µ–Ω–∏—é*\n"
    message += "üîß *–ú–∞—Å—Å–æ–≤—ã–µ –æ–ø–µ—Ä–∞—Ü–∏–∏ –¥–æ—Å—Ç—É–ø–Ω—ã –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π*\n"
    message += "‚ö° *–ë—ã—Å—Ç—Ä—ã–µ –¥–µ–π—Å—Ç–≤–∏—è —á–µ—Ä–µ–∑ –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é*"
    
    keyboard = [
        [InlineKeyboardButton("üìñ –î–æ–∫—É–º–µ–Ω—Ç–∞—Ü–∏—è API", callback_data="api_docs")],
        [InlineKeyboardButton("üé• –í–∏–¥–µ–æ-–≥–∞–π–¥", callback_data="video_guide")],
        [InlineKeyboardButton("üîô –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é", callback_data="back_to_main")]
    ]
    reply_markup = InlineKeyboardMarkup(keyboard)
    
    await update.callback_query.edit_message_text(
        text=message,
        reply_markup=reply_markup,
        parse_mode="Markdown"
    )
    
    return MAIN_MENU

async def show_about_info(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """Show about information"""
    message = f"‚ÑπÔ∏è *–û –±–æ—Ç–µ*\n\n"
    message += f"ü§ñ **RemnaWave Admin Bot**\n"
    message += f"üì¶ –í–µ—Ä—Å–∏—è: `1.6.5`\n"
    message += f"üîß API –≤–µ—Ä—Å–∏—è: `v1.6.5`\n"
    message += f"üêç Python: `3.9+`\n"
    message += f"üì° python-telegram-bot: `20.x`\n\n"
    message += f"üìã *–í–æ–∑–º–æ–∂–Ω–æ—Å—Ç–∏:*\n"
    message += f"‚Ä¢ –ü–æ–ª–Ω–æ–µ —É–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è–º–∏\n"
    message += f"‚Ä¢ –£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ —Å–µ—Ä–≤–µ—Ä–∞–º–∏ –∏ –Ω–æ–¥–∞–º–∏\n"
    message += f"‚Ä¢ –ù–∞—Å—Ç—Ä–æ–π–∫–∞ —Ö–æ—Å—Ç–æ–≤ –∏ inbound'–æ–≤\n"
    message += f"‚Ä¢ –ü–æ–¥—Ä–æ–±–Ω–∞—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞\n"
    message += f"‚Ä¢ –ú–∞—Å—Å–æ–≤—ã–µ –æ–ø–µ—Ä–∞—Ü–∏–∏\n"
    message += f"‚Ä¢ –ü–æ–∏—Å–∫ –∏ —Ñ–∏–ª—å—Ç—Ä–∞—Ü–∏—è\n\n"
    message += f"üíº –°–æ–∑–¥–∞–Ω–æ –¥–ª—è –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω–∏—è RemnaWave"
    
    keyboard = [
        [InlineKeyboardButton("üêõ –°–æ–æ–±—â–∏—Ç—å –æ–± –æ—à–∏–±–∫–µ", callback_data="report_bug")],
        [InlineKeyboardButton("üîô –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é", callback_data="back_to_main")]
    ]
    reply_markup = InlineKeyboardMarkup(keyboard)
    
    await update.callback_query.edit_message_text(
        text=message,
        reply_markup=reply_markup,
        parse_mode="Markdown"
    )
    
    return MAIN_MENU

async def back_to_main_menu(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """Return to main menu with authorization check and cleanup"""
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏—é
    if not check_authorization(update.effective_user):
        await update.callback_query.answer("‚õî –í—ã –Ω–µ –∞–≤—Ç–æ—Ä–∏–∑–æ–≤–∞–Ω—ã –¥–ª—è –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è —ç—Ç–æ–≥–æ –±–æ—Ç–∞.", show_alert=True)
        return ConversationHandler.END
    
    # –û—á–∏—â–∞–µ–º –≤—Ä–µ–º–µ–Ω–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ
    temp_keys = ['search_type', 'editing_user', 'editing_field', 'create_user', 'bulk_operation']
    for key in temp_keys:
        context.user_data.pop(key, None)
    
    # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é
    return await show_main_menu(update, context)

# Export all functions for use in other modules
__all__ = [
    'handle_menu_selection',
    'back_to_main_menu',
    'show_quick_user_stats',
    'show_quick_system_info',
    'show_quick_recent_users',
    'setup_quick_search',
    'refresh_main_menu',
    'show_bot_settings',
    'show_admin_tools',
    'show_help_menu',
    'show_about_info'
]