from telegram import Update, InlineKeyboardButton, InlineKeyboardMarkup
from telegram.ext import ContextTypes
import logging

from modules.config import MAIN_MENU, NODE_MENU, EDIT_NODE, EDIT_NODE_FIELD, CREATE_NODE, SEARCH_NODES
from modules.utils.auth import check_authorization
from modules.utils.formatters import safe_edit_message
from modules.handlers.start_handler import show_main_menu

# Import node sub-modules
from modules.handlers.nodes.node_list import list_nodes, handle_node_selection
from modules.handlers.nodes.node_details import show_node_details, handle_node_action
from modules.handlers.nodes.node_edit import start_edit_node, handle_edit_field_selection, handle_edit_field_value, save_node_changes
from modules.handlers.nodes.node_create import start_create_node, handle_create_node_input, finish_create_node, execute_create_node
from modules.handlers.nodes.node_actions import enable_node, disable_node, restart_node, delete_node
from modules.handlers.nodes.node_stats import show_node_stats, show_node_traffic_graph
from modules.handlers.nodes.node_certificate import show_node_certificate
from modules.handlers.nodes.node_search import handle_node_search_input, show_node_search_menu, setup_node_search, handle_search_pagination

logger = logging.getLogger(__name__)

async def show_nodes_menu(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """Show enhanced nodes menu with comprehensive options"""
    keyboard = [
        [
            InlineKeyboardButton("üìã –°–ø–∏—Å–æ–∫ —Å–µ—Ä–≤–µ—Ä–æ–≤", callback_data="list_nodes"),
            InlineKeyboardButton("‚ûï –î–æ–±–∞–≤–∏—Ç—å —Å–µ—Ä–≤–µ—Ä", callback_data="add_node")
        ],
        [
            InlineKeyboardButton("üîç –ü–æ–∏—Å–∫ —Å–µ—Ä–≤–µ—Ä–∞", callback_data="search_nodes"),
            InlineKeyboardButton("üìä –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞", callback_data="nodes_usage")
        ],
        [
            InlineKeyboardButton("üìú –°–µ—Ä—Ç–∏—Ñ–∏–∫–∞—Ç –ø–∞–Ω–µ–ª–∏", callback_data="get_panel_certificate"),
            InlineKeyboardButton("üîÑ –ü–µ—Ä–µ–∑–∞–ø—É—Å–∫ –≤—Å–µ—Ö", callback_data="restart_all_nodes")
        ],
        [
            InlineKeyboardButton("üñ•Ô∏è –°–∏—Å—Ç–µ–º–Ω–∞—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è", callback_data="nodes_system_info"),
            InlineKeyboardButton("üìà –ú–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥", callback_data="nodes_monitoring")
        ],
        [InlineKeyboardButton("üîô –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é", callback_data="back_to_main")]
    ]
    reply_markup = InlineKeyboardMarkup(keyboard)

    message = "üñ•Ô∏è *–£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ —Å–µ—Ä–≤–µ—Ä–∞–º–∏*\n\n"
    message += "üéõÔ∏è *–î–æ—Å—Ç—É–ø–Ω—ã–µ —Ñ—É–Ω–∫—Ü–∏–∏:*\n"
    message += "‚Ä¢ üìã –ü—Ä–æ—Å–º–æ—Ç—Ä –≤—Å–µ—Ö —Å–µ—Ä–≤–µ—Ä–æ–≤ —Å —Å—Ç–∞—Ç—É—Å–∞–º–∏\n"
    message += "‚Ä¢ ‚ûï –î–æ–±–∞–≤–ª–µ–Ω–∏–µ –Ω–æ–≤—ã—Ö —Å–µ—Ä–≤–µ—Ä–æ–≤\n"
    message += "‚Ä¢ üîç –ü–æ–∏—Å–∫ –ø–æ –Ω–∞–∑–≤–∞–Ω–∏—é –∏–ª–∏ –∞–¥—Ä–µ—Å—É\n"
    message += "‚Ä¢ üìä –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è –≤ —Ä–µ–∞–ª—å–Ω–æ–º –≤—Ä–µ–º–µ–Ω–∏\n"
    message += "‚Ä¢ üîÑ –ú–∞—Å—Å–æ–≤—ã–µ –æ–ø–µ—Ä–∞—Ü–∏–∏\n"
    message += "‚Ä¢ üìú –ü–æ–ª—É—á–µ–Ω–∏–µ —Å–µ—Ä—Ç–∏—Ñ–∏–∫–∞—Ç–∞ –¥–ª—è –Ω–∞—Å—Ç—Ä–æ–π–∫–∏\n\n"
    message += "–í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ:"

    await safe_edit_message(update.callback_query, message, reply_markup, "Markdown")
    return NODE_MENU

async def handle_nodes_menu(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """Handle nodes menu selection with comprehensive routing"""
    if not check_authorization(update.effective_user):
        await update.callback_query.answer("‚õî –í—ã –Ω–µ –∞–≤—Ç–æ—Ä–∏–∑–æ–≤–∞–Ω—ã –¥–ª—è –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è —ç—Ç–æ–≥–æ –±–æ—Ç–∞.", show_alert=True)
        return ConversationHandler.END

    query = update.callback_query
    await query.answer()
    data = query.data

    try:
        # Basic operations
        if data == "list_nodes":
            return await list_nodes(update, context)
        elif data == "add_node":
            return await start_create_node(update, context)
        elif data == "search_nodes":
            return await setup_node_search(update, context)
        
        # Statistics and monitoring
        elif data == "nodes_usage":
            return await show_nodes_usage(update, context)
        elif data == "nodes_system_info":
            return await show_nodes_system_info(update, context)
        elif data == "nodes_monitoring":
            return await show_nodes_monitoring(update, context)
        
        # Certificate operations
        elif data == "get_panel_certificate":
            return await show_node_certificate(update, context)
        
        # Mass operations
        elif data == "restart_all_nodes":
            return await confirm_restart_all_nodes(update, context)
        elif data == "confirm_restart_all":
            return await restart_all_nodes(update, context)
        
        # Node-specific operations
        elif data.startswith("view_node_"):
            uuid = data.split("_", 2)[2]
            return await show_node_details(update, context, uuid)
        elif data.startswith("select_node_"):
            node_id = data.replace("select_node_", "")
            return await show_node_details(update, context, node_id)
        elif data.startswith("enable_node_"):
            uuid = data.split("_", 2)[2]
            return await enable_node(update, context, uuid)
        elif data.startswith("disable_node_"):
            uuid = data.split("_", 2)[2]
            return await disable_node(update, context, uuid)
        elif data.startswith("restart_node_"):
            uuid = data.split("_", 2)[2]
            return await restart_node(update, context, uuid)
        elif data.startswith("node_stats_"):
            uuid = data.split("_", 2)[2]
            return await show_node_stats(update, context, uuid)
        elif data.startswith("edit_node_"):
            uuid = data.split("_", 2)[2]
            return await start_edit_node(update, context, uuid)
        elif data.startswith("show_certificate_"):
            return await show_node_certificate(update, context)
        
        # Pagination
        elif data.startswith("page_nodes_"):
            page = int(data.split("_")[2])
            return await handle_node_pagination(update, context, page)
        
        # Navigation
        elif data == "back_to_nodes":
            return await show_nodes_menu(update, context)
        elif data == "back_to_main":
            return await show_main_menu(update, context)
        
        # Default fallback
        else:
            logger.warning(f"Unknown nodes menu action: {data}")
            return await show_nodes_menu(update, context)

    except Exception as e:
        logger.error(f"Error in nodes menu handler for {data}: {e}")
        await query.answer("‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ –∑–∞–ø—Ä–æ—Å–∞", show_alert=True)
        return await show_nodes_menu(update, context)

async def setup_node_search(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """Setup node search"""
    message = "üîç *–ü–æ–∏—Å–∫ —Å–µ—Ä–≤–µ—Ä–æ–≤*\n\n"
    message += "–í–≤–µ–¥–∏—Ç–µ —á–∞—Å—Ç—å –Ω–∞–∑–≤–∞–Ω–∏—è —Å–µ—Ä–≤–µ—Ä–∞ –∏–ª–∏ –µ–≥–æ –∞–¥—Ä–µ—Å –¥–ª—è –ø–æ–∏—Å–∫–∞:\n\n"
    message += "üí° *–ü—Ä–∏–º–µ—Ä—ã –ø–æ–∏—Å–∫–∞:*\n"
    message += "‚Ä¢ `Germany` - –ø–æ–∏—Å–∫ –ø–æ –Ω–∞–∑–≤–∞–Ω–∏—é\n"
    message += "‚Ä¢ `192.168` - –ø–æ–∏—Å–∫ –ø–æ IP –∞–¥—Ä–µ—Å—É\n"
    message += "‚Ä¢ `server1` - –ø–æ–∏—Å–∫ –ø–æ —á–∞—Å—Ç–∏ –Ω–∞–∑–≤–∞–Ω–∏—è\n\n"
    message += "–ú–∏–Ω–∏–º—É–º 2 —Å–∏–º–≤–æ–ª–∞ –¥–ª—è –ø–æ–∏—Å–∫–∞."

    keyboard = [[InlineKeyboardButton("‚ùå –û—Ç–º–µ–Ω–∞", callback_data="back_to_nodes")]]
    reply_markup = InlineKeyboardMarkup(keyboard)

    await update.callback_query.edit_message_text(
        text=message,
        reply_markup=reply_markup,
        parse_mode="Markdown"
    )

    context.user_data["search_type"] = "nodes"
    return SEARCH_NODES

async def show_nodes_system_info(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """Show system information for all nodes"""
    try:
        from modules.api.nodes import NodeAPI
        from modules.utils.formatters import format_bytes
        
        await update.callback_query.edit_message_text("üñ•Ô∏è –ó–∞–≥—Ä—É–∑–∫–∞ —Å–∏—Å—Ç–µ–º–Ω–æ–π –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏...")
        
        nodes_response = await NodeAPI.get_all_nodes()
        if not nodes_response or 'response' not in nodes_response:
            raise Exception("–ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å —Å–ø–∏—Å–æ–∫ —Å–µ—Ä–≤–µ—Ä–æ–≤")
        
        nodes = nodes_response['response']
        
        if not nodes:
            message = "‚ÑπÔ∏è –°–µ—Ä–≤–µ—Ä—ã –Ω–µ –Ω–∞–π–¥–µ–Ω—ã."
        else:
            total_nodes = len(nodes)
            online_nodes = sum(1 for node in nodes if node.get('isConnected'))
            disabled_nodes = sum(1 for node in nodes if node.get('isDisabled'))
            xray_running = sum(1 for node in nodes if node.get('isXrayRunning'))
            
            message = f"üñ•Ô∏è *–°–∏—Å—Ç–µ–º–Ω–∞—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è —Å–µ—Ä–≤–µ—Ä–æ–≤*\n\n"
            message += f"üìä *–û–±—â–∞—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞:*\n"
            message += f"‚Ä¢ –í—Å–µ–≥–æ —Å–µ—Ä–≤–µ—Ä–æ–≤: `{total_nodes}`\n"
            message += f"‚Ä¢ üü¢ –û–Ω–ª–∞–π–Ω: `{online_nodes}`\n"
            message += f"‚Ä¢ üî¥ –û—Ñ–ª–∞–π–Ω: `{total_nodes - online_nodes}`\n"
            message += f"‚Ä¢ ‚ùå –û—Ç–∫–ª—é—á–µ–Ω–æ: `{disabled_nodes}`\n"
            message += f"‚Ä¢ ‚ö° Xray –∑–∞–ø—É—â–µ–Ω: `{xray_running}`\n\n"
            
            # Group by country
            countries = {}
            for node in nodes:
                country = node.get('countryCode', 'XX')
                if country not in countries:
                    countries[country] = {'total': 0, 'online': 0}
                countries[country]['total'] += 1
                if node.get('isConnected'):
                    countries[country]['online'] += 1
            
            if countries:
                message += f"üåç *–ü–æ —Å—Ç—Ä–∞–Ω–∞–º:*\n"
                for country, stats in sorted(countries.items()):
                    message += f"‚Ä¢ {country}: {stats['online']}/{stats['total']} –æ–Ω–ª–∞–π–Ω\n"

        keyboard = [
            [InlineKeyboardButton("üìä –î–µ—Ç–∞–ª—å–Ω–∞—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞", callback_data="nodes_usage")],
            [InlineKeyboardButton("üìà –ú–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥", callback_data="nodes_monitoring")],
            [InlineKeyboardButton("üîÑ –û–±–Ω–æ–≤–∏—Ç—å", callback_data="nodes_system_info")],
            [InlineKeyboardButton("üîô –ù–∞–∑–∞–¥", callback_data="back_to_nodes")]
        ]
        reply_markup = InlineKeyboardMarkup(keyboard)

        await update.callback_query.edit_message_text(
            text=message,
            reply_markup=reply_markup,
            parse_mode="Markdown"
        )

        return NODE_MENU

    except Exception as e:
        logger.error(f"Error showing nodes system info: {e}")
        keyboard = [[InlineKeyboardButton("üîô –ù–∞–∑–∞–¥", callback_data="back_to_nodes")]]
        reply_markup = InlineKeyboardMarkup(keyboard)

        await update.callback_query.edit_message_text(
            f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–≥—Ä—É–∑–∫–µ —Å–∏—Å—Ç–µ–º–Ω–æ–π –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏: {str(e)}",
            reply_markup=reply_markup
        )
        return NODE_MENU

async def show_nodes_monitoring(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """Show real-time monitoring for nodes"""
    try:
        from modules.api.nodes import NodeAPI
        from modules.utils.formatters import format_bytes
        
        await update.callback_query.edit_message_text("üìà –ó–∞–≥—Ä—É–∑–∫–∞ –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥–∞...")
        
        # Get realtime usage data
        usage_data = await NodeAPI.get_nodes_realtime_usage()
        
        if not usage_data:
            message = "üìà *–ú–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥ —Å–µ—Ä–≤–µ—Ä–æ–≤*\n\n"
            message += "‚ÑπÔ∏è –î–∞–Ω–Ω—ã–µ –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥–∞ –≤—Ä–µ–º–µ–Ω–Ω–æ –Ω–µ–¥–æ—Å—Ç—É–ø–Ω—ã."
        else:
            message = f"üìà *–ú–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥ —Å–µ—Ä–≤–µ—Ä–æ–≤ –≤ —Ä–µ–∞–ª—å–Ω–æ–º –≤—Ä–µ–º–µ–Ω–∏*\n\n"
            
            total_download_speed = 0
            total_upload_speed = 0
            active_nodes = 0
            
            for node_data in usage_data:
                download_speed = node_data.get('downloadSpeedBps', 0)
                upload_speed = node_data.get('uploadSpeedBps', 0)
                
                total_download_speed += download_speed
                total_upload_speed += upload_speed
                
                if download_speed > 0 or upload_speed > 0:
                    active_nodes += 1
            
            message += f"üöÄ *–û–±—â–∞—è –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç—å:*\n"
            message += f"‚Ä¢ ‚¨áÔ∏è –°–∫–∞—á–∏–≤–∞–Ω–∏–µ: `{format_bytes(total_download_speed)}/—Å`\n"
            message += f"‚Ä¢ ‚¨ÜÔ∏è –ó–∞–≥—Ä—É–∑–∫–∞: `{format_bytes(total_upload_speed)}/—Å`\n"
            message += f"‚Ä¢ üì° –ê–∫—Ç–∏–≤–Ω—ã—Ö —Å–µ—Ä–≤–µ—Ä–æ–≤: `{active_nodes}`\n\n"
            
            # Show top 5 most active nodes
            if usage_data:
                sorted_nodes = sorted(usage_data, 
                                    key=lambda x: x.get('totalSpeedBps', 0), 
                                    reverse=True)[:5]
                
                if sorted_nodes and sorted_nodes[0].get('totalSpeedBps', 0) > 0:
                    message += f"üî• *–°–∞–º—ã–µ –∞–∫—Ç–∏–≤–Ω—ã–µ —Å–µ—Ä–≤–µ—Ä—ã:*\n"
                    for i, node in enumerate(sorted_nodes, 1):
                        if node.get('totalSpeedBps', 0) > 0:
                            name = node.get('nodeName', 'Unknown')[:15]
                            speed = format_bytes(node.get('totalSpeedBps', 0))
                            message += f"{i}. `{name}`: {speed}/—Å\n"

        keyboard = [
            [InlineKeyboardButton("üìä –ü–æ–ª–Ω–∞—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞", callback_data="nodes_usage")],
            [InlineKeyboardButton("üîÑ –û–±–Ω–æ–≤–∏—Ç—å", callback_data="nodes_monitoring")],
            [InlineKeyboardButton("üîô –ù–∞–∑–∞–¥", callback_data="back_to_nodes")]
        ]
        reply_markup = InlineKeyboardMarkup(keyboard)

        await update.callback_query.edit_message_text(
            text=message,
            reply_markup=reply_markup,
            parse_mode="Markdown"
        )

        return NODE_MENU

    except Exception as e:
        logger.error(f"Error showing nodes monitoring: {e}")
        keyboard = [[InlineKeyboardButton("üîô –ù–∞–∑–∞–¥", callback_data="back_to_nodes")]]
        reply_markup = InlineKeyboardMarkup(keyboard)

        await update.callback_query.edit_message_text(
            f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–≥—Ä—É–∑–∫–µ –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥–∞: {str(e)}",
            reply_markup=reply_markup
        )
        return NODE_MENU

async def confirm_restart_all_nodes(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """Confirm restart all nodes operation"""
    keyboard = [
        [
            InlineKeyboardButton("‚úÖ –î–∞, –ø–µ—Ä–µ–∑–∞–ø—É—Å—Ç–∏—Ç—å –≤—Å–µ", callback_data="confirm_restart_all"),
            InlineKeyboardButton("‚ùå –û—Ç–º–µ–Ω–∞", callback_data="back_to_nodes")
        ]
    ]
    reply_markup = InlineKeyboardMarkup(keyboard)

    message = "‚ö†Ô∏è *–ü–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–µ –º–∞—Å—Å–æ–≤–æ–≥–æ –ø–µ—Ä–µ–∑–∞–ø—É—Å–∫–∞*\n\n"
    message += "–í—ã —É–≤–µ—Ä–µ–Ω—ã, —á—Ç–æ —Ö–æ—Ç–∏—Ç–µ –ø–µ—Ä–µ–∑–∞–ø—É—Å—Ç–∏—Ç—å **–í–°–ï** —Å–µ—Ä–≤–µ—Ä—ã?\n\n"
    message += "üî¥ *–í–Ω–∏–º–∞–Ω–∏–µ:*\n"
    message += "‚Ä¢ –í—Å–µ –∞–∫—Ç–∏–≤–Ω—ã–µ —Å–æ–µ–¥–∏–Ω–µ–Ω–∏—è –±—É–¥—É—Ç —Ä–∞–∑–æ—Ä–≤–∞–Ω—ã\n"
    message += "‚Ä¢ –°–µ—Ä–≤–µ—Ä—ã –±—É–¥—É—Ç –Ω–µ–¥–æ—Å—Ç—É–ø–Ω—ã –Ω–∞ –≤—Ä–µ–º—è –ø–µ—Ä–µ–∑–∞–ø—É—Å–∫–∞\n"
    message += "‚Ä¢ –û–ø–µ—Ä–∞—Ü–∏—è –º–æ–∂–µ—Ç –∑–∞–Ω—è—Ç—å –Ω–µ—Å–∫–æ–ª—å–∫–æ –º–∏–Ω—É—Ç\n\n"
    message += "–ü—Ä–æ–¥–æ–ª–∂–∏—Ç—å?"

    await update.callback_query.edit_message_text(
        text=message,
        reply_markup=reply_markup,
        parse_mode="Markdown"
    )
    return NODE_MENU

async def restart_all_nodes(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """Restart all nodes"""
    try:
        from modules.api.nodes import NodeAPI
        
        await update.callback_query.edit_message_text("üîÑ –û—Ç–ø—Ä–∞–≤–∫–∞ –∫–æ–º–∞–Ω–¥—ã –ø–µ—Ä–µ–∑–∞–ø—É—Å–∫–∞...")
        
        result = await NodeAPI.restart_all_nodes()
        
        if result and result.get("eventSent"):
            message = "‚úÖ *–ö–æ–º–∞–Ω–¥–∞ –ø–µ—Ä–µ–∑–∞–ø—É—Å–∫–∞ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–∞*\n\n"
            message += "üì§ –ö–æ–º–∞–Ω–¥–∞ –Ω–∞ –ø–µ—Ä–µ–∑–∞–ø—É—Å–∫ –≤—Å–µ—Ö —Å–µ—Ä–≤–µ—Ä–æ–≤ —É—Å–ø–µ—à–Ω–æ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–∞.\n\n"
            message += "‚è≥ *–ü—Ä–æ—Ü–µ—Å—Å –º–æ–∂–µ—Ç –∑–∞–Ω—è—Ç—å:*\n"
            message += "‚Ä¢ 30-60 —Å–µ–∫—É–Ω–¥ –¥–ª—è –ø–µ—Ä–µ–∑–∞–ø—É—Å–∫–∞ —Å–µ—Ä–≤–∏—Å–æ–≤\n"
            message += "‚Ä¢ –î–æ 2-3 –º–∏–Ω—É—Ç –¥–ª—è –ø–æ–ª–Ω–æ–≥–æ –≤–æ—Å—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∏—è\n\n"
            message += "üîç –ü—Ä–æ–≤–µ—Ä—å—Ç–µ —Å—Ç–∞—Ç—É—Å —Å–µ—Ä–≤–µ—Ä–æ–≤ —á–µ—Ä–µ–∑ –Ω–µ—Å–∫–æ–ª—å–∫–æ –º–∏–Ω—É—Ç."
        else:
            message = "‚ùå *–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ –∫–æ–º–∞–Ω–¥—ã*\n\n"
            message += "–ù–µ —É–¥–∞–ª–æ—Å—å –æ—Ç–ø—Ä–∞–≤–∏—Ç—å –∫–æ–º–∞–Ω–¥—É –ø–µ—Ä–µ–∑–∞–ø—É—Å–∫–∞.\n"
            message += "–ü–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â–µ —Ä–∞–∑ –∏–ª–∏ –ø–µ—Ä–µ–∑–∞–ø—É—Å—Ç–∏—Ç–µ —Å–µ—Ä–≤–µ—Ä—ã –ø–æ –æ—Ç–¥–µ–ª—å–Ω–æ—Å—Ç–∏."

        keyboard = [
            [InlineKeyboardButton("üìä –ü—Ä–æ–≤–µ—Ä–∏—Ç—å —Å—Ç–∞—Ç—É—Å", callback_data="nodes_system_info")],
            [InlineKeyboardButton("üîô –ö –º–µ–Ω—é —Å–µ—Ä–≤–µ—Ä–æ–≤", callback_data="back_to_nodes")]
        ]
        reply_markup = InlineKeyboardMarkup(keyboard)

        await update.callback_query.edit_message_text(
            text=message,
            reply_markup=reply_markup,
            parse_mode="Markdown"
        )

        return NODE_MENU

    except Exception as e:
        logger.error(f"Error restarting all nodes: {e}")
        keyboard = [[InlineKeyboardButton("üîô –ù–∞–∑–∞–¥", callback_data="back_to_nodes")]]
        reply_markup = InlineKeyboardMarkup(keyboard)

        await update.callback_query.edit_message_text(
            f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–µ—Ä–µ–∑–∞–ø—É—Å–∫–µ —Å–µ—Ä–≤–µ—Ä–æ–≤: {str(e)}",
            reply_markup=reply_markup
        )
        return NODE_MENU

async def handle_node_pagination(update: Update, context: ContextTypes.DEFAULT_TYPE, page: int):
    """Handle pagination for node list"""
    # This will be handled by the node_list module
    from modules.handlers.nodes.node_list import handle_pagination
    return await handle_pagination(update, context, page)

async def handle_text_input(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """Handle text input for node operations"""
    search_type = context.user_data.get("search_type")
    
    if search_type == "nodes":
        from modules.handlers.nodes.node_search import handle_search_input
        return await handle_search_input(update, context)
    elif context.user_data.get("node_creation_step"):
        return await handle_node_creation(update, context)
    elif context.user_data.get("editing_field"):
        return await handle_node_field_input(update, context)
    else:
        await update.message.reply_text(
            "‚ùå –ù–µ–æ–∂–∏–¥–∞–Ω–Ω—ã–π –≤–≤–æ–¥ —Ç–µ–∫—Å—Ç–∞. –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ –∫–Ω–æ–ø–∫–∏ –º–µ–Ω—é –¥–ª—è –Ω–∞–≤–∏–≥–∞—Ü–∏–∏.",
            reply_markup=InlineKeyboardMarkup([[
                InlineKeyboardButton("üîô –ö —Å–µ—Ä–≤–µ—Ä–∞–º", callback_data="back_to_nodes")
            ]])
        )
        return await show_nodes_menu(update, context)

# Export functions for use in conversation handler
__all__ = [
    'show_nodes_menu',
    'handle_nodes_menu',
    'handle_text_input',
    'handle_node_pagination',
    'setup_node_search',
    'show_nodes_system_info',
    'show_nodes_monitoring',
    'confirm_restart_all_nodes',
    'restart_all_nodes'
]