import logging
from telegram import Update, InlineKeyboardButton, InlineKeyboardMarkup
from telegram.ext import ContextTypes

from modules.config import MAIN_MENU, STATS_MENU
from modules.api.system import SystemAPI
from modules.api.nodes import NodeAPI
from modules.api.users import UserAPI
from modules.utils.formatters import format_system_stats, format_bandwidth_stats, format_bytes
from modules.handlers.start_handler import show_main_menu

logger = logging.getLogger(__name__)

async def show_stats_menu(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """Show statistics menu"""
    keyboard = [
        [
            InlineKeyboardButton("üìä –û–±—â–∞—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞", callback_data="system_stats"),
            InlineKeyboardButton("üìà –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ —Ç—Ä–∞—Ñ–∏–∫–∞", callback_data="bandwidth_stats")
        ],
        [
            InlineKeyboardButton("üñ•Ô∏è –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –Ω–æ–¥", callback_data="nodes_stats"),
            InlineKeyboardButton("üë• –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π", callback_data="users_stats")
        ],
        [InlineKeyboardButton("üîô –ù–∞–∑–∞–¥ –≤ –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é", callback_data="back_to_main")]
    ]
    reply_markup = InlineKeyboardMarkup(keyboard)

    message = "üìä *–°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ —Å–∏—Å—Ç–µ–º—ã*\n\n"
    message += "–í—ã–±–µ—Ä–∏—Ç–µ —Ç–∏–ø —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏:"

    # –ë–µ–∑–æ–ø–∞—Å–Ω–∞—è –æ—Ç–ø—Ä–∞–≤–∫–∞/—Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ —Å–æ–æ–±—â–µ–Ω–∏—è
    try:
        if update.callback_query:
            await update.callback_query.edit_message_text(
                text=message,
                reply_markup=reply_markup,
                parse_mode="Markdown"
            )
        else:
            await update.effective_message.reply_text(
                text=message,
                reply_markup=reply_markup,
                parse_mode="Markdown"
            )
    except Exception as e:
        logger.error(f"Error showing stats menu: {e}")
    
    return STATS_MENU

async def handle_stats_menu(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """Handle statistics menu selection"""
    if not update.callback_query:
        return STATS_MENU
        
    query = update.callback_query
    await query.answer()
    data = query.data

    try:
        if data == "system_stats":
            return await show_system_stats(update, context)
        elif data == "bandwidth_stats":
            return await show_bandwidth_stats(update, context)
        elif data == "nodes_stats":
            return await show_nodes_stats(update, context)
        elif data == "users_stats":
            return await show_users_stats(update, context)
        elif data == "back_to_stats":
            return await show_stats_menu(update, context)
        elif data == "back_to_main":
            return await show_main_menu(update, context)
    except Exception as e:
        logger.error(f"Error in handle_stats_menu: {e}")
        
    return STATS_MENU

async def show_system_stats(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """Show system statistics"""
    await update.callback_query.edit_message_text("üìä –ó–∞–≥—Ä—É–∑–∫–∞ —Å–∏—Å—Ç–µ–º–Ω–æ–π —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏...")

    try:
        # –ü–æ–ª—É—á–∞–µ–º —Å–∏—Å—Ç–µ–º–Ω—É—é —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É
        stats_response = await SystemAPI.get_system_stats()
        
        if not stats_response or 'response' not in stats_response:
            raise Exception("–ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å —Å–∏—Å—Ç–µ–º–Ω—É—é —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É")
        
        stats = stats_response['response']
        
        # –§–æ—Ä–º–∞—Ç–∏—Ä—É–µ–º —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É
        message = "üìä *–°–∏—Å—Ç–µ–º–Ω–∞—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞*\n\n"
        
        # –ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ —Å–∏—Å—Ç–µ–º–µ
        if 'system' in stats:
            sys_info = stats['system']
            message += f"üñ•Ô∏è *–°–∏—Å—Ç–µ–º–∞:*\n"
            message += f"‚Ä¢ OS: `{sys_info.get('os', 'N/A')}`\n"
            message += f"‚Ä¢ Arch: `{sys_info.get('arch', 'N/A')}`\n"
            message += f"‚Ä¢ Version: `{sys_info.get('version', 'N/A')}`\n\n"
        
        # –ò—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ —Ä–µ—Å—É—Ä—Å–æ–≤
        if 'memory' in stats:
            mem = stats['memory']
            total_gb = mem.get('total', 0) / (1024**3)
            used_gb = mem.get('used', 0) / (1024**3)
            free_gb = mem.get('free', 0) / (1024**3)
            
            message += f"üíæ *–ü–∞–º—è—Ç—å:*\n"
            message += f"‚Ä¢ –í—Å–µ–≥–æ: `{total_gb:.1f} GB`\n"
            message += f"‚Ä¢ –ò—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–æ: `{used_gb:.1f} GB`\n"
            message += f"‚Ä¢ –°–≤–æ–±–æ–¥–Ω–æ: `{free_gb:.1f} GB`\n\n"
        
        if 'cpu' in stats:
            cpu = stats['cpu']
            message += f"‚ö° *CPU:*\n"
            message += f"‚Ä¢ –ò—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ: `{cpu.get('usage', 0):.1f}%`\n"
            message += f"‚Ä¢ Cores: `{cpu.get('cores', 'N/A')}`\n\n"
        
        # –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ —Ç—Ä–∞—Ñ–∏–∫–∞
        if 'traffic' in stats:
            traffic = stats['traffic']
            message += f"üìà *–¢—Ä–∞—Ñ–∏–∫:*\n"
            message += f"‚Ä¢ –í—Ö–æ–¥—è—â–∏–π: `{format_bytes(traffic.get('inbound', 0))}`\n"
            message += f"‚Ä¢ –ò—Å—Ö–æ–¥—è—â–∏–π: `{format_bytes(traffic.get('outbound', 0))}`\n"
            message += f"‚Ä¢ –í—Å–µ–≥–æ: `{format_bytes(traffic.get('total', 0))}`\n\n"
        
        # Uptime
        if 'uptime' in stats:
            uptime_seconds = stats['uptime']
            days = uptime_seconds // 86400
            hours = (uptime_seconds % 86400) // 3600
            minutes = (uptime_seconds % 3600) // 60
            message += f"‚è±Ô∏è *Uptime:* `{days}–¥ {hours}—á {minutes}–º`\n"
            
    except Exception as e:
        logger.error(f"Error getting system stats: {e}")
        message = f"‚ùå –û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è —Å–∏—Å—Ç–µ–º–Ω–æ–π —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏:\n`{str(e)}`"

    keyboard = [
        [InlineKeyboardButton("üîÑ –û–±–Ω–æ–≤–∏—Ç—å", callback_data="system_stats")],
        [InlineKeyboardButton("üîô –ù–∞–∑–∞–¥", callback_data="back_to_stats")]
    ]
    reply_markup = InlineKeyboardMarkup(keyboard)

    await update.callback_query.edit_message_text(
        text=message,
        reply_markup=reply_markup,
        parse_mode="Markdown"
    )
    
    return STATS_MENU

async def show_bandwidth_stats(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """Show bandwidth statistics"""
    await update.callback_query.edit_message_text("üìà –ó–∞–≥—Ä—É–∑–∫–∞ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏ —Ç—Ä–∞—Ñ–∏–∫–∞...")

    try:
        # –ü–æ–ª—É—á–∞–µ–º —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É —Ç—Ä–∞—Ñ–∏–∫–∞
        bandwidth_response = await SystemAPI.get_bandwidth_stats()
        
        if not bandwidth_response or 'response' not in bandwidth_response:
            raise Exception("–ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É —Ç—Ä–∞—Ñ–∏–∫–∞")
        
        stats = bandwidth_response['response']
        
        message = "üìà *–°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ —Ç—Ä–∞—Ñ–∏–∫–∞*\n\n"
        
        # –û–±—â–∞—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞
        total_in = stats.get('totalInbound', 0)
        total_out = stats.get('totalOutbound', 0)
        total_traffic = total_in + total_out
        
        message += f"üìä *–û–±—â–∏–π —Ç—Ä–∞—Ñ–∏–∫:*\n"
        message += f"‚Ä¢ –í—Ö–æ–¥—è—â–∏–π: `{format_bytes(total_in)}`\n"
        message += f"‚Ä¢ –ò—Å—Ö–æ–¥—è—â–∏–π: `{format_bytes(total_out)}`\n"
        message += f"‚Ä¢ –í—Å–µ–≥–æ: `{format_bytes(total_traffic)}`\n\n"
        
        # –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –∑–∞ –ø–µ—Ä–∏–æ–¥
        if 'daily' in stats:
            daily = stats['daily']
            message += f"üìÖ *–ó–∞ —Å–µ–≥–æ–¥–Ω—è:*\n"
            message += f"‚Ä¢ –í—Ö–æ–¥—è—â–∏–π: `{format_bytes(daily.get('inbound', 0))}`\n"
            message += f"‚Ä¢ –ò—Å—Ö–æ–¥—è—â–∏–π: `{format_bytes(daily.get('outbound', 0))}`\n\n"
        
        if 'monthly' in stats:
            monthly = stats['monthly']
            message += f"üìÜ *–ó–∞ –º–µ—Å—è—Ü:*\n"
            message += f"‚Ä¢ –í—Ö–æ–¥—è—â–∏–π: `{format_bytes(monthly.get('inbound', 0))}`\n"
            message += f"‚Ä¢ –ò—Å—Ö–æ–¥—è—â–∏–π: `{format_bytes(monthly.get('outbound', 0))}`\n\n"
        
        # –¢–æ–ø –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π –ø–æ —Ç—Ä–∞—Ñ–∏–∫—É (–µ—Å–ª–∏ –¥–æ—Å—Ç—É–ø–Ω–æ)
        if 'topUsers' in stats:
            top_users = stats['topUsers'][:5]  # –¢–æ–ø 5
            if top_users:
                message += f"üèÜ *–¢–æ–ø –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π:*\n"
                for i, user in enumerate(top_users, 1):
                    username = user.get('username', 'N/A')[:15]
                    traffic = format_bytes(user.get('totalTraffic', 0))
                    message += f"{i}. `{username}` - `{traffic}`\n"
                    
    except Exception as e:
        logger.error(f"Error getting bandwidth stats: {e}")
        message = f"‚ùå –û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏ —Ç—Ä–∞—Ñ–∏–∫–∞:\n`{str(e)}`"

    keyboard = [
        [InlineKeyboardButton("üîÑ –û–±–Ω–æ–≤–∏—Ç—å", callback_data="bandwidth_stats")],
        [InlineKeyboardButton("üîô –ù–∞–∑–∞–¥", callback_data="back_to_stats")]
    ]
    reply_markup = InlineKeyboardMarkup(keyboard)

    await update.callback_query.edit_message_text(
        text=message,
        reply_markup=reply_markup,
        parse_mode="Markdown"
    )
    
    return STATS_MENU

async def show_nodes_stats(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """Show nodes statistics"""
    await update.callback_query.edit_message_text("üñ•Ô∏è –ó–∞–≥—Ä—É–∑–∫–∞ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏ –Ω–æ–¥...")

    try:
        # –ü–æ–ª—É—á–∞–µ–º –≤—Å–µ –Ω–æ–¥—ã
        nodes_response = await NodeAPI.get_all_nodes()
        
        if not nodes_response or 'response' not in nodes_response:
            raise Exception("–ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å —Å–ø–∏—Å–æ–∫ –Ω–æ–¥")
        
        nodes = nodes_response['response']
        
        if not nodes:
            message = "‚ÑπÔ∏è –ù–æ–¥—ã –Ω–µ –Ω–∞–π–¥–µ–Ω—ã."
        else:
            message = f"üñ•Ô∏è *–°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –Ω–æ–¥* ({len(nodes)}):\n\n"
            
            # –ü–æ–¥—Å—á–µ—Ç —Å—Ç–∞—Ç—É—Å–æ–≤
            online_count = sum(1 for node in nodes if not node.get('isDisabled', True))
            offline_count = len(nodes) - online_count
            
            message += f"üìä *–û–±—â–∞—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è:*\n"
            message += f"‚Ä¢ –í—Å–µ–≥–æ –Ω–æ–¥: `{len(nodes)}`\n"
            message += f"‚Ä¢ –û–Ω–ª–∞–π–Ω: `{online_count}` üü¢\n"
            message += f"‚Ä¢ –û—Ñ–ª–∞–π–Ω: `{offline_count}` üî¥\n\n"
            
            # –î–µ—Ç–∞–ª–∏ –Ω–æ–¥
            message += "üìã *–î–µ—Ç–∞–ª–∏ –Ω–æ–¥:*\n"
            for node in nodes[:10]:  # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –º–∞–∫—Å–∏–º—É–º 10 –Ω–æ–¥
                name = node.get('name', '–ë–µ–∑ –Ω–∞–∑–≤–∞–Ω–∏—è')[:20]
                status = 'üü¢' if not node.get('isDisabled', True) else 'üî¥'
                address = node.get('address', 'N/A')
                port = node.get('port', 'N/A')
                
                message += f"‚Ä¢ {status} `{name}`\n"
                message += f"  üìç `{address}:{port}`\n"
                
                # –î–æ–±–∞–≤–ª—è–µ–º —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É —Ç—Ä–∞—Ñ–∏–∫–∞ –µ—Å–ª–∏ –µ—Å—Ç—å
                if 'traffic' in node:
                    traffic = node['traffic']
                    total = traffic.get('total', 0)
                    if total > 0:
                        message += f"  üìà `{format_bytes(total)}`\n"
                message += "\n"
            
            if len(nodes) > 10:
                message += f"... –∏ –µ—â–µ {len(nodes) - 10} –Ω–æ–¥(—ã)\n"
                
    except Exception as e:
        logger.error(f"Error getting nodes stats: {e}")
        message = f"‚ùå –û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏ –Ω–æ–¥:\n`{str(e)}`"

    keyboard = [
        [InlineKeyboardButton("üîÑ –û–±–Ω–æ–≤–∏—Ç—å", callback_data="nodes_stats")],
        [InlineKeyboardButton("üîô –ù–∞–∑–∞–¥", callback_data="back_to_stats")]
    ]
    reply_markup = InlineKeyboardMarkup(keyboard)

    await update.callback_query.edit_message_text(
        text=message,
        reply_markup=reply_markup,
        parse_mode="Markdown"
    )
    
    return STATS_MENU

async def show_users_stats(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """Show users statistics"""
    await update.callback_query.edit_message_text("üë• –ó–∞–≥—Ä—É–∑–∫–∞ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π...")

    try:
        # –ü–æ–ª—É—á–∞–µ–º –≤—Å–µ—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π
        users_response = await UserAPI.get_all_users()
        
        if not users_response or 'response' not in users_response:
            raise Exception("–ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å —Å–ø–∏—Å–æ–∫ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π")
        
        users = users_response['response']
        
        if not users:
            message = "‚ÑπÔ∏è –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–∏ –Ω–µ –Ω–∞–π–¥–µ–Ω—ã."
        else:
            message = f"üë• *–°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π* ({len(users)}):\n\n"
            
            # –ü–æ–¥—Å—á–µ—Ç –ø–æ —Å—Ç–∞—Ç—É—Å–∞–º
            stats = {
                'ACTIVE': 0,
                'EXPIRED': 0,
                'LIMITED': 0,
                'DISABLED': 0,
                'total_traffic': 0
            }
            
            for user in users:
                status = user.get('status', 'UNKNOWN')
                if status in stats:
                    stats[status] += 1
                
                # –°—É–º–º–∏—Ä—É–µ–º —Ç—Ä–∞—Ñ–∏–∫
                used_traffic = user.get('usedTraffic', 0)
                stats['total_traffic'] += used_traffic
            
            message += f"üìä *–ü–æ —Å—Ç–∞—Ç—É—Å–∞–º:*\n"
            message += f"‚Ä¢ –ê–∫—Ç–∏–≤–Ω—ã–µ: `{stats['ACTIVE']}` üü¢\n"
            message += f"‚Ä¢ –ò—Å—Ç–µ–∫—à–∏–µ: `{stats['EXPIRED']}` üü°\n"
            message += f"‚Ä¢ –õ–∏–º–∏—Ç –∏—Å—á–µ—Ä–ø–∞–Ω: `{stats['LIMITED']}` üü†\n"
            message += f"‚Ä¢ –û—Ç–∫–ª—é—á–µ–Ω–Ω—ã–µ: `{stats['DISABLED']}` üî¥\n\n"
            
            message += f"üìà *–û–±—â–∏–π —Ç—Ä–∞—Ñ–∏–∫:*\n"
            message += f"‚Ä¢ –ò—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–æ: `{format_bytes(stats['total_traffic'])}`\n\n"
            
            # –¢–æ–ø –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π –ø–æ —Ç—Ä–∞—Ñ–∏–∫—É
            top_users = sorted(users, key=lambda x: x.get('usedTraffic', 0), reverse=True)[:5]
            if top_users and top_users[0].get('usedTraffic', 0) > 0:
                message += f"üèÜ *–¢–æ–ø –ø–æ —Ç—Ä–∞—Ñ–∏–∫—É:*\n"
                for i, user in enumerate(top_users, 1):
                    username = user.get('username', 'N/A')[:15]
                    traffic = format_bytes(user.get('usedTraffic', 0))
                    status_emoji = {
                        'ACTIVE': 'üü¢',
                        'EXPIRED': 'üü°',
                        'LIMITED': 'üü†',
                        'DISABLED': 'üî¥'
                    }.get(user.get('status'), '‚ö™')
                    
                    message += f"{i}. {status_emoji} `{username}` - `{traffic}`\n"
                    
    except Exception as e:
        logger.error(f"Error getting users stats: {e}")
        message = f"‚ùå –û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π:\n`{str(e)}`"

    keyboard = [
        [InlineKeyboardButton("üîÑ –û–±–Ω–æ–≤–∏—Ç—å", callback_data="users_stats")],
        [InlineKeyboardButton("üîô –ù–∞–∑–∞–¥", callback_data="back_to_stats")]
    ]
    reply_markup = InlineKeyboardMarkup(keyboard)

    await update.callback_query.edit_message_text(
        text=message,
        reply_markup=reply_markup,
        parse_mode="Markdown"
    )
    
    return STATS_MENU