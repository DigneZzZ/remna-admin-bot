from telegram import Update, InlineKeyboardButton, InlineKeyboardMarkup
from telegram.ext import ContextTypes
import logging

from modules.config import MAIN_MENU, BULK_MENU, BULK_ACTION, BULK_CONFIRM
from modules.api.bulk import BulkAPI
from modules.api.users import UserAPI
from modules.utils.selection_helpers import SelectionHelper
from modules.handlers.start_handler import show_main_menu

logger = logging.getLogger(__name__)

async def show_bulk_menu(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """Show bulk operations menu"""
    keyboard = [
        [
            InlineKeyboardButton("üë• –û–ø–µ—Ä–∞—Ü–∏–∏ —Å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è–º–∏", callback_data="bulk_users_menu"),
            InlineKeyboardButton("üì° –û–ø–µ—Ä–∞—Ü–∏–∏ —Å inbound'–∞–º–∏", callback_data="bulk_inbounds_menu")
        ],
        [
            InlineKeyboardButton("üñ•Ô∏è –û–ø–µ—Ä–∞—Ü–∏–∏ —Å –Ω–æ–¥–∞–º–∏", callback_data="bulk_nodes_menu"),
            InlineKeyboardButton("üåê –û–ø–µ—Ä–∞—Ü–∏–∏ —Å —Ö–æ—Å—Ç–∞–º–∏", callback_data="bulk_hosts_menu")
        ],
        [InlineKeyboardButton("üîô –ù–∞–∑–∞–¥ –≤ –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é", callback_data="back_to_main")]
    ]
    reply_markup = InlineKeyboardMarkup(keyboard)

    message = "üîÑ *–ú–∞—Å—Å–æ–≤—ã–µ –æ–ø–µ—Ä–∞—Ü–∏–∏*\n\n"
    message += "‚ö†Ô∏è –í–Ω–∏–º–∞–Ω–∏–µ! –≠—Ç–∏ –æ–ø–µ—Ä–∞—Ü–∏–∏ –∑–∞—Ç—Ä–∞–≥–∏–≤–∞—é—Ç –º–Ω–æ–∂–µ—Å—Ç–≤–æ –æ–±—ä–µ–∫—Ç–æ–≤ –æ–¥–Ω–æ–≤—Ä–µ–º–µ–Ω–Ω–æ.\n\n"
    message += "–í—ã–±–µ—Ä–∏—Ç–µ –∫–∞—Ç–µ–≥–æ—Ä–∏—é –æ–ø–µ—Ä–∞—Ü–∏–π:"

    # –û–ø—Ä–µ–¥–µ–ª—è–µ–º chat_id
    chat_id = update.effective_chat.id if update.effective_chat else None
    
    if not chat_id:
        logger.error("Cannot determine chat_id")
        return BULK_MENU

    # –ü—ã—Ç–∞–µ–º—Å—è –æ—Ç—Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞—Ç—å —Å—É—â–µ—Å—Ç–≤—É—é—â–µ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ, –µ—Å–ª–∏ —ç—Ç–æ callback
    if update.callback_query and update.callback_query.message:
        try:
            await update.callback_query.edit_message_text(
                text=message,
                reply_markup=reply_markup,
                parse_mode="Markdown"
            )
            return BULK_MENU
        except Exception as e:
            logger.warning(f"Failed to edit message: {e}")
    
    # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –Ω–æ–≤–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ
    try:
        await context.bot.send_message(
            chat_id=chat_id,
            text=message,
            reply_markup=reply_markup,
            parse_mode="Markdown"
        )
    except Exception as e:
        logger.error(f"Failed to send message: {e}")
        # Fallback –±–µ–∑ Markdown
        await context.bot.send_message(
            chat_id=chat_id,
            text="üîÑ –ú–∞—Å—Å–æ–≤—ã–µ –æ–ø–µ—Ä–∞—Ü–∏–∏\n\n–í—ã–±–µ—Ä–∏—Ç–µ –∫–∞—Ç–µ–≥–æ—Ä–∏—é –æ–ø–µ—Ä–∞—Ü–∏–π:",
            reply_markup=reply_markup
        )
    
    return BULK_MENU

async def show_bulk_users_menu(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """Show bulk users operations menu"""
    
    if not update.callback_query:
        logger.warning("show_bulk_users_menu called without callback_query")
        return BULK_MENU
    
    keyboard = [
        [
            InlineKeyboardButton("üîÑ –°–±—Ä–æ—Å–∏—Ç—å —Ç—Ä–∞—Ñ–∏–∫ –≤—Å–µ–º", callback_data="bulk_reset_all_traffic"),
            InlineKeyboardButton("‚ùå –û—Ç–æ–∑–≤–∞—Ç—å –ø–æ–¥–ø–∏—Å–∫–∏ –≤—Å–µ–º", callback_data="bulk_revoke_all_subs")
        ],
        [
            InlineKeyboardButton("üîÑ –°–±—Ä–æ—Å–∏—Ç—å —Ç—Ä–∞—Ñ–∏–∫ —Å –∏—Å—á–µ—Ä–ø–∞–Ω–Ω—ã–º –ª–∏–º–∏—Ç–æ–º", callback_data="bulk_reset_limited_traffic"),
            InlineKeyboardButton("‚ùå –£–¥–∞–ª–∏—Ç—å –∏—Å—Ç–µ–∫—à–∏—Ö", callback_data="bulk_delete_expired")
        ],
        [InlineKeyboardButton("üîô –ù–∞–∑–∞–¥", callback_data="back_to_bulk")]
    ]
    reply_markup = InlineKeyboardMarkup(keyboard)

    message = "üë• *–ú–∞—Å—Å–æ–≤—ã–µ –æ–ø–µ—Ä–∞—Ü–∏–∏ —Å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è–º–∏*\n\n"
    message += "–í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ:"

    try:
        await update.callback_query.edit_message_text(
            text=message,
            reply_markup=reply_markup,
            parse_mode="Markdown"
        )
    except Exception as e:
        logger.error(f"Error in show_bulk_users_menu: {e}")
    
    return BULK_MENU

async def show_bulk_inbounds_menu(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """Show bulk inbounds operations menu"""
    
    if not update.callback_query:
        return BULK_MENU
    
    keyboard = [
        [
            InlineKeyboardButton("‚úÖ –í–∫–ª—é—á–∏—Ç—å –≤—Å–µ inbound'—ã", callback_data="bulk_enable_all_inbounds"),
            InlineKeyboardButton("‚ùå –û—Ç–∫–ª—é—á–∏—Ç—å –≤—Å–µ inbound'—ã", callback_data="bulk_disable_all_inbounds")
        ],
        [
            InlineKeyboardButton("üîÑ –ü–µ—Ä–µ–∑–∞–ø—É—Å—Ç–∏—Ç—å –≤—Å–µ inbound'—ã", callback_data="bulk_restart_all_inbounds"),
            InlineKeyboardButton("‚ùå –£–¥–∞–ª–∏—Ç—å –≤—Å–µ inbound'—ã", callback_data="bulk_delete_all_inbounds")
        ],
        [InlineKeyboardButton("üîô –ù–∞–∑–∞–¥", callback_data="back_to_bulk")]
    ]
    reply_markup = InlineKeyboardMarkup(keyboard)

    message = "üì° *–ú–∞—Å—Å–æ–≤—ã–µ –æ–ø–µ—Ä–∞—Ü–∏–∏ —Å inbound'–∞–º–∏*\n\n"
    message += "–í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ:"

    try:
        await update.callback_query.edit_message_text(
            text=message,
            reply_markup=reply_markup,
            parse_mode="Markdown"
        )
    except Exception as e:
        logger.error(f"Error in show_bulk_inbounds_menu: {e}")
    
    return BULK_MENU

async def show_bulk_nodes_menu(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """Show bulk nodes operations menu"""
    
    if not update.callback_query:
        return BULK_MENU
    
    keyboard = [
        [
            InlineKeyboardButton("‚úÖ –í–∫–ª—é—á–∏—Ç—å –≤—Å–µ –Ω–æ–¥—ã", callback_data="bulk_enable_all_nodes"),
            InlineKeyboardButton("‚ùå –û—Ç–∫–ª—é—á–∏—Ç—å –≤—Å–µ –Ω–æ–¥—ã", callback_data="bulk_disable_all_nodes")
        ],
        [
            InlineKeyboardButton("üîÑ –ü–µ—Ä–µ–∑–∞–ø—É—Å—Ç–∏—Ç—å –≤—Å–µ –Ω–æ–¥—ã", callback_data="bulk_restart_all_nodes"),
            InlineKeyboardButton("‚ùå –£–¥–∞–ª–∏—Ç—å –≤—Å–µ –Ω–æ–¥—ã", callback_data="bulk_delete_all_nodes")
        ],
        [InlineKeyboardButton("üîô –ù–∞–∑–∞–¥", callback_data="back_to_bulk")]
    ]
    reply_markup = InlineKeyboardMarkup(keyboard)

    message = "üñ•Ô∏è *–ú–∞—Å—Å–æ–≤—ã–µ –æ–ø–µ—Ä–∞—Ü–∏–∏ —Å –Ω–æ–¥–∞–º–∏*\n\n"
    message += "–í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ:"

    try:
        await update.callback_query.edit_message_text(
            text=message,
            reply_markup=reply_markup,
            parse_mode="Markdown"
        )
    except Exception as e:
        logger.error(f"Error in show_bulk_nodes_menu: {e}")
    
    return BULK_MENU

async def show_bulk_hosts_menu(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """Show bulk hosts operations menu"""
    
    if not update.callback_query:
        return BULK_MENU
    
    keyboard = [
        [
            InlineKeyboardButton("‚úÖ –í–∫–ª—é—á–∏—Ç—å –≤—Å–µ —Ö–æ—Å—Ç—ã", callback_data="bulk_enable_all_hosts"),
            InlineKeyboardButton("‚ùå –û—Ç–∫–ª—é—á–∏—Ç—å –≤—Å–µ —Ö–æ—Å—Ç—ã", callback_data="bulk_disable_all_hosts")
        ],
        [
            InlineKeyboardButton("‚ùå –£–¥–∞–ª–∏—Ç—å –≤—Å–µ —Ö–æ—Å—Ç—ã", callback_data="bulk_delete_all_hosts")
        ],
        [InlineKeyboardButton("üîô –ù–∞–∑–∞–¥", callback_data="back_to_bulk")]
    ]
    reply_markup = InlineKeyboardMarkup(keyboard)

    message = "üåê *–ú–∞—Å—Å–æ–≤—ã–µ –æ–ø–µ—Ä–∞—Ü–∏–∏ —Å —Ö–æ—Å—Ç–∞–º–∏*\n\n"
    message += "–í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ:"

    try:
        await update.callback_query.edit_message_text(
            text=message,
            reply_markup=reply_markup,
            parse_mode="Markdown"
        )
    except Exception as e:
        logger.error(f"Error in show_bulk_hosts_menu: {e}")
    
    return BULK_MENU

async def handle_bulk_menu(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """Handle bulk operations menu selection"""
    if not update.callback_query:
        logger.warning("handle_bulk_menu called without callback_query")
        return BULK_MENU
    
    query = update.callback_query
    await query.answer()
    data = query.data

    # –ù–∞–≤–∏–≥–∞—Ü–∏—è –ø–æ –º–µ–Ω—é
    if data == "bulk_users_menu":
        return await show_bulk_users_menu(update, context)
    elif data == "bulk_inbounds_menu":
        return await show_bulk_inbounds_menu(update, context)
    elif data == "bulk_nodes_menu":
        return await show_bulk_nodes_menu(update, context)
    elif data == "bulk_hosts_menu":
        return await show_bulk_hosts_menu(update, context)
    elif data == "back_to_bulk":
        return await show_bulk_menu(update, context)
    elif data == "back_to_main":
        return await show_main_menu(update, context)

    # –û–ø–µ—Ä–∞—Ü–∏–∏ —Å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è–º–∏ - –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–µ
    elif data == "bulk_reset_all_traffic":
        return await show_confirmation(query, "–°–±—Ä–æ—Å–∏—Ç—å —Ç—Ä–∞—Ñ–∏–∫ –í–°–ï–ú –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è–º?", "confirm_reset_all_traffic")
    elif data == "bulk_revoke_all_subs":
        return await show_confirmation(query, "–û—Ç–æ–∑–≤–∞—Ç—å –ø–æ–¥–ø–∏—Å–∫–∏ —É –í–°–ï–• –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π?", "confirm_revoke_all_subs")
    elif data == "bulk_reset_limited_traffic":
        return await show_confirmation(query, "–°–±—Ä–æ—Å–∏—Ç—å —Ç—Ä–∞—Ñ–∏–∫ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è–º —Å –∏—Å—á–µ—Ä–ø–∞–Ω–Ω—ã–º –ª–∏–º–∏—Ç–æ–º?", "confirm_reset_limited_traffic")
    elif data == "bulk_delete_expired":
        return await show_confirmation(query, "–£–¥–∞–ª–∏—Ç—å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π —Å –∏—Å—Ç–µ–∫—à–∏–º —Å—Ä–æ–∫–æ–º?", "confirm_delete_expired")

    # –û–ø–µ—Ä–∞—Ü–∏–∏ —Å inbound'–∞–º–∏ - –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–µ
    elif data == "bulk_enable_all_inbounds":
        return await show_confirmation(query, "–í–∫–ª—é—á–∏—Ç—å –í–°–ï inbound'—ã?", "confirm_enable_all_inbounds")
    elif data == "bulk_disable_all_inbounds":
        return await show_confirmation(query, "–û—Ç–∫–ª—é—á–∏—Ç—å –í–°–ï inbound'—ã?", "confirm_disable_all_inbounds")
    elif data == "bulk_restart_all_inbounds":
        return await show_confirmation(query, "–ü–µ—Ä–µ–∑–∞–ø—É—Å—Ç–∏—Ç—å –í–°–ï inbound'—ã?", "confirm_restart_all_inbounds")
    elif data == "bulk_delete_all_inbounds":
        return await show_confirmation(query, "–£–¥–∞–ª–∏—Ç—å –í–°–ï inbound'—ã?", "confirm_delete_all_inbounds")

    # –û–ø–µ—Ä–∞—Ü–∏–∏ —Å –Ω–æ–¥–∞–º–∏ - –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–µ
    elif data == "bulk_enable_all_nodes":
        return await show_confirmation(query, "–í–∫–ª—é—á–∏—Ç—å –í–°–ï –Ω–æ–¥—ã?", "confirm_enable_all_nodes")
    elif data == "bulk_disable_all_nodes":
        return await show_confirmation(query, "–û—Ç–∫–ª—é—á–∏—Ç—å –í–°–ï –Ω–æ–¥—ã?", "confirm_disable_all_nodes")
    elif data == "bulk_restart_all_nodes":
        return await show_confirmation(query, "–ü–µ—Ä–µ–∑–∞–ø—É—Å—Ç–∏—Ç—å –í–°–ï –Ω–æ–¥—ã?", "confirm_restart_all_nodes")
    elif data == "bulk_delete_all_nodes":
        return await show_confirmation(query, "–£–¥–∞–ª–∏—Ç—å –í–°–ï –Ω–æ–¥—ã?", "confirm_delete_all_nodes")

    # –û–ø–µ—Ä–∞—Ü–∏–∏ —Å —Ö–æ—Å—Ç–∞–º–∏ - –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–µ
    elif data == "bulk_enable_all_hosts":
        return await show_confirmation(query, "–í–∫–ª—é—á–∏—Ç—å –í–°–ï —Ö–æ—Å—Ç—ã?", "confirm_enable_all_hosts")
    elif data == "bulk_disable_all_hosts":
        return await show_confirmation(query, "–û—Ç–∫–ª—é—á–∏—Ç—å –í–°–ï —Ö–æ—Å—Ç—ã?", "confirm_disable_all_hosts")
    elif data == "bulk_delete_all_hosts":
        return await show_confirmation(query, "–£–¥–∞–ª–∏—Ç—å –í–°–ï —Ö–æ—Å—Ç—ã?", "confirm_delete_all_hosts")

    # –ï—Å–ª–∏ –Ω–∏ –æ–¥–Ω–æ —É—Å–ª–æ–≤–∏–µ –Ω–µ —Å—Ä–∞–±–æ—Ç–∞–ª–æ, –≤–æ–∑–≤—Ä–∞—â–∞–µ–º —Ç–µ–∫—É—â–µ–µ —Å–æ—Å—Ç–æ—è–Ω–∏–µ
    logger.warning(f"Unhandled callback data: {data}")
    return BULK_MENU

async def show_confirmation(query, message_text, confirm_action):
    """Show confirmation dialog for bulk operation"""
    keyboard = [
        [
            InlineKeyboardButton("‚úÖ –î–∞, –≤—ã–ø–æ–ª–Ω–∏—Ç—å", callback_data=confirm_action),
            InlineKeyboardButton("‚ùå –û—Ç–º–µ–Ω–∞", callback_data="back_to_bulk")
        ]
    ]
    reply_markup = InlineKeyboardMarkup(keyboard)
    
    await query.edit_message_text(
        f"‚ö†Ô∏è {message_text}",
        reply_markup=reply_markup,
        parse_mode="Markdown"
    )
    return BULK_CONFIRM

async def handle_bulk_confirm(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """Handle bulk operation confirmation"""
    
    if not update.callback_query:
        return BULK_MENU
    
    query = update.callback_query
    await query.answer()
    data = query.data

    # –ü–æ–∫–∞–∑–∞—Ç—å —Å–æ–æ–±—â–µ–Ω–∏–µ –æ –≤—ã–ø–æ–ª–Ω–µ–Ω–∏–∏
    await query.edit_message_text("‚è≥ –í—ã–ø–æ–ª–Ω—è–µ—Ç—Å—è –æ–ø–µ—Ä–∞—Ü–∏—è...")

    try:
        # ========================
        # –û–ü–ï–†–ê–¶–ò–ò –° –ü–û–õ–¨–ó–û–í–ê–¢–ï–õ–Ø–ú–ò
        # ========================
        if data == "confirm_reset_all_traffic":
            result = await BulkAPI.bulk_reset_all_users_traffic()
            message = "‚úÖ –¢—Ä–∞—Ñ–∏–∫ —É—Å–ø–µ—à–Ω–æ —Å–±—Ä–æ—à–µ–Ω —É –≤—Å–µ—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π." if result else "‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–±—Ä–æ—Å–µ —Ç—Ä–∞—Ñ–∏–∫–∞."

        elif data == "confirm_revoke_all_subs":
            result = await BulkAPI.bulk_revoke_all_users_subscription()
            message = "‚úÖ –ü–æ–¥–ø–∏—Å–∫–∏ —É—Å–ø–µ—à–Ω–æ –æ—Ç–æ–∑–≤–∞–Ω—ã —É –≤—Å–µ—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π." if result else "‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–∑—ã–≤–µ –ø–æ–¥–ø–∏—Å–æ–∫."

        elif data == "confirm_reset_limited_traffic":
            # –ü–æ–ª—É—á–∞–µ–º –≤—Å–µ—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π —Å —Å—Ç–∞—Ç—É—Å–æ–º LIMITED –∏ —Å–±—Ä–∞—Å—ã–≤–∞–µ–º –∏–º —Ç—Ä–∞—Ñ–∏–∫
            try:
                limited_users_response = await UserAPI.get_limited_users()
                if limited_users_response and 'response' in limited_users_response:
                    limited_users = limited_users_response['response']
                    if limited_users:
                        user_uuids = [user['uuid'] for user in limited_users]
                        result = await BulkAPI.bulk_reset_users_traffic(user_uuids)
                        if result:
                            message = f"‚úÖ –¢—Ä–∞—Ñ–∏–∫ —Å–±—Ä–æ—à–µ–Ω —É {len(user_uuids)} –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π —Å –∏—Å—á–µ—Ä–ø–∞–Ω–Ω—ã–º –ª–∏–º–∏—Ç–æ–º."
                        else:
                            message = "‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–±—Ä–æ—Å–µ —Ç—Ä–∞—Ñ–∏–∫–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è–º —Å –∏—Å—á–µ—Ä–ø–∞–Ω–Ω—ã–º –ª–∏–º–∏—Ç–æ–º."
                    else:
                        message = "‚ÑπÔ∏è –ù–µ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π —Å –∏—Å—á–µ—Ä–ø–∞–Ω–Ω—ã–º –ª–∏–º–∏—Ç–æ–º —Ç—Ä–∞—Ñ–∏–∫–∞."
                else:
                    message = "‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å —Å–ø–∏—Å–æ–∫ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π —Å –∏—Å—á–µ—Ä–ø–∞–Ω–Ω—ã–º –ª–∏–º–∏—Ç–æ–º."
            except Exception as e:
                logger.error(f"Error resetting traffic for limited users: {e}")
                message = "‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π —Å –∏—Å—á–µ—Ä–ø–∞–Ω–Ω—ã–º –ª–∏–º–∏—Ç–æ–º."

        elif data == "confirm_delete_expired":
            result = await BulkAPI.bulk_delete_users_by_status("EXPIRED")
            if result and 'response' in result:
                count = result['response'].get('deletedCount', 0)
                message = f"‚úÖ –£—Å–ø–µ—à–Ω–æ —É–¥–∞–ª–µ–Ω–æ {count} –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π —Å –∏—Å—Ç–µ–∫—à–∏–º —Å—Ä–æ–∫–æ–º."
            else:
                message = "‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ —É–¥–∞–ª–µ–Ω–∏–∏ –∏—Å—Ç–µ–∫—à–∏—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π."

        # ========================
        # –û–ü–ï–†–ê–¶–ò–ò –° INBOUND'–ê–ú–ò
        # ========================
        elif data == "confirm_enable_all_inbounds":
            from modules.api.inbounds import InboundAPI
            inbounds_response = await InboundAPI.get_all_inbounds()
            if inbounds_response and 'response' in inbounds_response:
                inbound_uuids = [inbound['uuid'] for inbound in inbounds_response['response']]
                result = await BulkAPI.bulk_enable_inbounds(inbound_uuids)
                message = f"‚úÖ –í–∫–ª—é—á–µ–Ω–æ {len(inbound_uuids)} inbound'–æ–≤." if result else "‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –≤–∫–ª—é—á–µ–Ω–∏–∏ inbound'–æ–≤."
            else:
                message = "‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å —Å–ø–∏—Å–æ–∫ inbound'–æ–≤."

        elif data == "confirm_disable_all_inbounds":
            from modules.api.inbounds import InboundAPI
            inbounds_response = await InboundAPI.get_all_inbounds()
            if inbounds_response and 'response' in inbounds_response:
                inbound_uuids = [inbound['uuid'] for inbound in inbounds_response['response']]
                result = await BulkAPI.bulk_disable_inbounds(inbound_uuids)
                message = f"‚úÖ –û—Ç–∫–ª—é—á–µ–Ω–æ {len(inbound_uuids)} inbound'–æ–≤." if result else "‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–∫–ª—é—á–µ–Ω–∏–∏ inbound'–æ–≤."
            else:
                message = "‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å —Å–ø–∏—Å–æ–∫ inbound'–æ–≤."

        elif data == "confirm_restart_all_inbounds":
            from modules.api.inbounds import InboundAPI
            inbounds_response = await InboundAPI.get_all_inbounds()
            if inbounds_response and 'response' in inbounds_response:
                inbound_uuids = [inbound['uuid'] for inbound in inbounds_response['response']]
                result = await BulkAPI.bulk_restart_inbounds(inbound_uuids)
                message = f"‚úÖ –ü–µ—Ä–µ–∑–∞–ø—É—â–µ–Ω–æ {len(inbound_uuids)} inbound'–æ–≤." if result else "‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–µ—Ä–µ–∑–∞–ø—É—Å–∫–µ inbound'–æ–≤."
            else:
                message = "‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å —Å–ø–∏—Å–æ–∫ inbound'–æ–≤."

        elif data == "confirm_delete_all_inbounds":
            from modules.api.inbounds import InboundAPI
            inbounds_response = await InboundAPI.get_all_inbounds()
            if inbounds_response and 'response' in inbounds_response:
                inbound_uuids = [inbound['uuid'] for inbound in inbounds_response['response']]
                result = await BulkAPI.bulk_delete_inbounds(inbound_uuids)
                message = f"‚úÖ –£–¥–∞–ª–µ–Ω–æ {len(inbound_uuids)} inbound'–æ–≤." if result else "‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ —É–¥–∞–ª–µ–Ω–∏–∏ inbound'–æ–≤."
            else:
                message = "‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å —Å–ø–∏—Å–æ–∫ inbound'–æ–≤."

        # ========================
        # –û–ü–ï–†–ê–¶–ò–ò –° –ù–û–î–ê–ú–ò
        # ========================
        elif data == "confirm_enable_all_nodes":
            from modules.api.nodes import NodeAPI
            nodes_response = await NodeAPI.get_all_nodes()
            if nodes_response and 'response' in nodes_response:
                node_uuids = [node['uuid'] for node in nodes_response['response']]
                result = await BulkAPI.bulk_enable_nodes(node_uuids)
                message = f"‚úÖ –í–∫–ª—é—á–µ–Ω–æ {len(node_uuids)} –Ω–æ–¥." if result else "‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –≤–∫–ª—é—á–µ–Ω–∏–∏ –Ω–æ–¥."
            else:
                message = "‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å —Å–ø–∏—Å–æ–∫ –Ω–æ–¥."

        elif data == "confirm_disable_all_nodes":
            from modules.api.nodes import NodeAPI
            nodes_response = await NodeAPI.get_all_nodes()
            if nodes_response and 'response' in nodes_response:
                node_uuids = [node['uuid'] for node in nodes_response['response']]
                result = await BulkAPI.bulk_disable_nodes(node_uuids)
                message = f"‚úÖ –û—Ç–∫–ª—é—á–µ–Ω–æ {len(node_uuids)} –Ω–æ–¥." if result else "‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–∫–ª—é—á–µ–Ω–∏–∏ –Ω–æ–¥."
            else:
                message = "‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å —Å–ø–∏—Å–æ–∫ –Ω–æ–¥."

        elif data == "confirm_restart_all_nodes":
            from modules.api.nodes import NodeAPI
            nodes_response = await NodeAPI.get_all_nodes()
            if nodes_response and 'response' in nodes_response:
                node_uuids = [node['uuid'] for node in nodes_response['response']]
                result = await BulkAPI.bulk_restart_nodes(node_uuids)
                message = f"‚úÖ –ü–µ—Ä–µ–∑–∞–ø—É—â–µ–Ω–æ {len(node_uuids)} –Ω–æ–¥." if result else "‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–µ—Ä–µ–∑–∞–ø—É—Å–∫–µ –Ω–æ–¥."
            else:
                message = "‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å —Å–ø–∏—Å–æ–∫ –Ω–æ–¥."

        elif data == "confirm_delete_all_nodes":
            from modules.api.nodes import NodeAPI
            nodes_response = await NodeAPI.get_all_nodes()
            if nodes_response and 'response' in nodes_response:
                node_uuids = [node['uuid'] for node in nodes_response['response']]
                result = await BulkAPI.bulk_delete_nodes(node_uuids)
                message = f"‚úÖ –£–¥–∞–ª–µ–Ω–æ {len(node_uuids)} –Ω–æ–¥." if result else "‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ —É–¥–∞–ª–µ–Ω–∏–∏ –Ω–æ–¥."
            else:
                message = "‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å —Å–ø–∏—Å–æ–∫ –Ω–æ–¥."

        # ========================
        # –û–ü–ï–†–ê–¶–ò–ò –° –•–û–°–¢–ê–ú–ò
        # ========================
        elif data == "confirm_enable_all_hosts":
            from modules.api.hosts import HostAPI
            hosts_response = await HostAPI.get_all_hosts()
            if hosts_response and 'response' in hosts_response:
                host_uuids = [host['uuid'] for host in hosts_response['response']]
                result = await BulkAPI.bulk_enable_hosts(host_uuids)
                message = f"‚úÖ –í–∫–ª—é—á–µ–Ω–æ {len(host_uuids)} —Ö–æ—Å—Ç–æ–≤." if result else "‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –≤–∫–ª—é—á–µ–Ω–∏–∏ —Ö–æ—Å—Ç–æ–≤."
            else:
                message = "‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å —Å–ø–∏—Å–æ–∫ —Ö–æ—Å—Ç–æ–≤."

        elif data == "confirm_disable_all_hosts":
            from modules.api.hosts import HostAPI
            hosts_response = await HostAPI.get_all_hosts()
            if hosts_response and 'response' in hosts_response:
                host_uuids = [host['uuid'] for host in hosts_response['response']]
                result = await BulkAPI.bulk_disable_hosts(host_uuids)
                message = f"‚úÖ –û—Ç–∫–ª—é—á–µ–Ω–æ {len(host_uuids)} —Ö–æ—Å—Ç–æ–≤." if result else "‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–∫–ª—é—á–µ–Ω–∏–∏ —Ö–æ—Å—Ç–æ–≤."
            else:
                message = "‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å —Å–ø–∏—Å–æ–∫ —Ö–æ—Å—Ç–æ–≤."

        elif data == "confirm_delete_all_hosts":
            from modules.api.hosts import HostAPI
            hosts_response = await HostAPI.get_all_hosts()
            if hosts_response and 'response' in hosts_response:
                host_uuids = [host['uuid'] for host in hosts_response['response']]
                result = await BulkAPI.bulk_delete_hosts(host_uuids)
                message = f"‚úÖ –£–¥–∞–ª–µ–Ω–æ {len(host_uuids)} —Ö–æ—Å—Ç–æ–≤." if result else "‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ —É–¥–∞–ª–µ–Ω–∏–∏ —Ö–æ—Å—Ç–æ–≤."
            else:
                message = "‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å —Å–ø–∏—Å–æ–∫ —Ö–æ—Å—Ç–æ–≤."

        elif data == "back_to_bulk":
            return await show_bulk_menu(update, context)

        else:
            message = "‚ùå –ù–µ–∏–∑–≤–µ—Å—Ç–Ω–∞—è –æ–ø–µ—Ä–∞—Ü–∏—è."

    except Exception as e:
        logger.error(f"Error in bulk operation {data}: {e}")
        message = f"‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞: {str(e)}"

    # –ü–æ–∫–∞–∑–∞—Ç—å —Ä–µ–∑—É–ª—å—Ç–∞—Ç —Å –∫–Ω–æ–ø–∫–æ–π –≤–æ–∑–≤—Ä–∞—Ç–∞
    keyboard = [[InlineKeyboardButton("üîô –ù–∞–∑–∞–¥ –∫ –º–∞—Å—Å–æ–≤—ã–º –æ–ø–µ—Ä–∞—Ü–∏—è–º", callback_data="back_to_bulk")]]
    reply_markup = InlineKeyboardMarkup(keyboard)
    
    await query.edit_message_text(
        message,
        reply_markup=reply_markup,
        parse_mode="Markdown"
    )
    return BULK_MENU

# Export functions for conversation handler
__all__ = [
    'show_bulk_menu',
    'handle_bulk_menu',
    'handle_bulk_action',
    'handle_bulk_confirm'
]

# Missing functions for conversation handler compatibility
async def handle_bulk_action(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """Handle bulk action - alias for handle_bulk_menu"""
    return await handle_bulk_menu(update, context)

async def handle_bulk_confirm(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """Handle bulk confirmation - alias for handle_bulk_menu"""
    return await handle_bulk_menu(update, context)