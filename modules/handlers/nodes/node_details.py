from telegram import Update, InlineKeyboardButton, InlineKeyboardMarkup
from telegram.ext import ContextTypes
import logging

from modules.config import NODE_MENU
from modules.api.nodes import NodeAPI
from modules.utils.formatters import format_node_details

logger = logging.getLogger(__name__)

async def show_node_details(update: Update, context: ContextTypes.DEFAULT_TYPE, uuid: str):
    """Show detailed node information"""
    try:
        await update.callback_query.edit_message_text("üîÑ –ó–∞–≥—Ä—É–∑–∫–∞ –¥–∞–Ω–Ω—ã—Ö —Å–µ—Ä–≤–µ—Ä–∞...")
        
        node_response = await NodeAPI.get_node_by_uuid(uuid)
        
        if not node_response or 'response' not in node_response:
            keyboard = [[InlineKeyboardButton("üîô –ù–∞–∑–∞–¥", callback_data="back_to_nodes")]]
            reply_markup = InlineKeyboardMarkup(keyboard)
            
            await update.callback_query.edit_message_text(
                "‚ùå –°–µ—Ä–≤–µ—Ä –Ω–µ –Ω–∞–π–¥–µ–Ω –∏–ª–∏ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ –¥–∞–Ω–Ω—ã—Ö.",
                reply_markup=reply_markup
            )
            return NODE_MENU
        
        node = node_response['response']
        message = format_node_details(node)
        
        # Create comprehensive action buttons
        keyboard = []
        
        # Status control
        if node.get("isDisabled"):
            keyboard.append([InlineKeyboardButton("üü¢ –í–∫–ª—é—á–∏—Ç—å —Å–µ—Ä–≤–µ—Ä", callback_data=f"enable_node_{uuid}")])
        else:
            keyboard.append([InlineKeyboardButton("üî¥ –û—Ç–∫–ª—é—á–∏—Ç—å —Å–µ—Ä–≤–µ—Ä", callback_data=f"disable_node_{uuid}")])
        
        # Operations row
        keyboard.append([
            InlineKeyboardButton("üîÑ –ü–µ—Ä–µ–∑–∞–ø—É—Å—Ç–∏—Ç—å", callback_data=f"restart_node_{uuid}"),
            InlineKeyboardButton("üìä –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞", callback_data=f"node_stats_{uuid}")
        ])
        
        # Configuration row
        keyboard.append([
            InlineKeyboardButton("üìù –†–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞—Ç—å", callback_data=f"edit_node_{uuid}"),
            InlineKeyboardButton("üìú –°–µ—Ä—Ç–∏—Ñ–∏–∫–∞—Ç", callback_data=f"show_certificate_{uuid}")
        ])
        
        # Advanced operations
        keyboard.append([
            InlineKeyboardButton("üîß –£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ inbound'–∞–º–∏", callback_data=f"node_inbounds_{uuid}"),
            InlineKeyboardButton("üóëÔ∏è –£–¥–∞–ª–∏—Ç—å —Å–µ—Ä–≤–µ—Ä", callback_data=f"delete_node_{uuid}")
        ])
        
        # Navigation
        keyboard.append([InlineKeyboardButton("üîô –ö —Å–ø–∏—Å–∫—É —Å–µ—Ä–≤–µ—Ä–æ–≤", callback_data="list_nodes")])
        
        reply_markup = InlineKeyboardMarkup(keyboard)
        
        await update.callback_query.edit_message_text(
            text=message,
            reply_markup=reply_markup,
            parse_mode="Markdown"
        )
        
        return NODE_MENU
        
    except Exception as e:
        logger.error(f"Error showing node details: {e}")
        keyboard = [[InlineKeyboardButton("üîô –ù–∞–∑–∞–¥", callback_data="list_nodes")]]
        reply_markup = InlineKeyboardMarkup(keyboard)
        
        await update.callback_query.edit_message_text(
            "‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–≥—Ä—É–∑–∫–µ –¥–∞–Ω–Ω—ã—Ö —Å–µ—Ä–≤–µ—Ä–∞.",
            reply_markup=reply_markup
        )
        return NODE_MENU

async def handle_node_action(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """Handle various node actions"""
    query = update.callback_query
    await query.answer()
    
    data = query.data
    
    if data.startswith("node_inbounds_"):
        uuid = data.split("_", 2)[2]
        return await show_node_inbounds_management(update, context, uuid)
    elif data.startswith("delete_node_"):
        uuid = data.split("_", 2)[2]
        return await confirm_delete_node(update, context, uuid)
    
    return NODE_MENU

async def show_node_inbounds_management(update: Update, context: ContextTypes.DEFAULT_TYPE, uuid: str):
    """Show inbound management for a specific node"""
    try:
        from modules.api.inbounds import InboundAPI
        
        await update.callback_query.edit_message_text("üì° –ó–∞–≥—Ä—É–∑–∫–∞ inbound'–æ–≤...")
        
        # Get node details
        node_response = await NodeAPI.get_node_by_uuid(uuid)
        if not node_response or 'response' not in node_response:
            raise Exception("–°–µ—Ä–≤–µ—Ä –Ω–µ –Ω–∞–π–¥–µ–Ω")
        
        node = node_response['response']
        
        # Get all inbounds
        inbounds_response = await InboundAPI.get_inbounds()
        if not inbounds_response or 'response' not in inbounds_response:
            raise Exception("–ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å —Å–ø–∏—Å–æ–∫ inbound'–æ–≤")
        
        inbounds = inbounds_response['response']
        excluded_inbounds = node.get('excludedInbounds', [])
        
        message = f"üì° *–£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ inbound'–∞–º–∏ –¥–ª—è {node['name']}*\n\n"
        message += "üü¢ = –í–∫–ª—é—á–µ–Ω –Ω–∞ —Å–µ—Ä–≤–µ—Ä–µ\n"
        message += "üî¥ = –û—Ç–∫–ª—é—á–µ–Ω –Ω–∞ —Å–µ—Ä–≤–µ—Ä–µ\n\n"
        
        keyboard = []
        
        for inbound in inbounds:
            inbound_id = inbound['uuid']
            protocol = inbound.get('type', 'Unknown')
            port = inbound.get('port', 'N/A')
            tag = inbound.get('tag', 'Unknown')
            
            if inbound_id in excluded_inbounds:
                # Excluded (disabled)
                button_text = f"üî¥ {tag} ({protocol}:{port})"
                callback_data = f"enable_inbound_on_node_{uuid}_{inbound_id}"
            else:
                # Included (enabled)
                button_text = f"üü¢ {tag} ({protocol}:{port})"
                callback_data = f"disable_inbound_on_node_{uuid}_{inbound_id}"
            
            keyboard.append([InlineKeyboardButton(button_text, callback_data=callback_data)])
        
        keyboard.append([InlineKeyboardButton("üîô –ö –¥–µ—Ç–∞–ª—è–º —Å–µ—Ä–≤–µ—Ä–∞", callback_data=f"view_node_{uuid}")])
        reply_markup = InlineKeyboardMarkup(keyboard)
        
        await update.callback_query.edit_message_text(
            text=message,
            reply_markup=reply_markup,
            parse_mode="Markdown"
        )
        
        return NODE_MENU
        
    except Exception as e:
        logger.error(f"Error showing node inbounds management: {e}")
        keyboard = [[InlineKeyboardButton("üîô –ö –¥–µ—Ç–∞–ª—è–º —Å–µ—Ä–≤–µ—Ä–∞", callback_data=f"view_node_{uuid}")]]
        reply_markup = InlineKeyboardMarkup(keyboard)
        
        await update.callback_query.edit_message_text(
            f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–≥—Ä—É–∑–∫–µ inbound'–æ–≤: {str(e)}",
            reply_markup=reply_markup
        )
        return NODE_MENU

async def confirm_delete_node(update: Update, context: ContextTypes.DEFAULT_TYPE, uuid: str):
    """Confirm node deletion"""
    try:
        node_response = await NodeAPI.get_node_by_uuid(uuid)
        if not node_response or 'response' not in node_response:
            raise Exception("–°–µ—Ä–≤–µ—Ä –Ω–µ –Ω–∞–π–¥–µ–Ω")
        
        node = node_response['response']
        
        message = f"‚ö†Ô∏è *–ü–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–µ —É–¥–∞–ª–µ–Ω–∏—è —Å–µ—Ä–≤–µ—Ä–∞*\n\n"
        message += f"–í—ã —É–≤–µ—Ä–µ–Ω—ã, —á—Ç–æ —Ö–æ—Ç–∏—Ç–µ —É–¥–∞–ª–∏—Ç—å —Å–µ—Ä–≤–µ—Ä **{node['name']}**?\n\n"
        message += f"üî¥ *–≠—Ç–æ –¥–µ–π—Å—Ç–≤–∏–µ –Ω–µ–æ–±—Ä–∞—Ç–∏–º–æ!*\n"
        message += f"‚Ä¢ –°–µ—Ä–≤–µ—Ä –±—É–¥–µ—Ç –ø–æ–ª–Ω–æ—Å—Ç—å—é —É–¥–∞–ª–µ–Ω\n"
        message += f"‚Ä¢ –í—Å–µ —Å–≤—è–∑–∞–Ω–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ –±—É–¥—É—Ç –ø–æ—Ç–µ—Ä—è–Ω—ã\n"
        message += f"‚Ä¢ –ê–∫—Ç–∏–≤–Ω—ã–µ —Å–æ–µ–¥–∏–Ω–µ–Ω–∏—è –±—É–¥—É—Ç —Ä–∞–∑–æ—Ä–≤–∞–Ω—ã\n\n"
        message += f"–î–ª—è –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è –≤–≤–µ–¥–∏—Ç–µ –Ω–∞–∑–≤–∞–Ω–∏–µ —Å–µ—Ä–≤–µ—Ä–∞: `{node['name']}`"
        
        keyboard = [
            [InlineKeyboardButton("‚ùå –û—Ç–º–µ–Ω–∞", callback_data=f"view_node_{uuid}")]
        ]
        reply_markup = InlineKeyboardMarkup(keyboard)
        
        await update.callback_query.edit_message_text(
            text=message,
            reply_markup=reply_markup,
            parse_mode="Markdown"
        )
        
        # Store deletion context
        context.user_data["pending_delete_node"] = {
            "uuid": uuid,
            "name": node['name']
        }
        
        return NODE_MENU
        
    except Exception as e:
        logger.error(f"Error confirming node deletion: {e}")
        keyboard = [[InlineKeyboardButton("üîô –ö –¥–µ—Ç–∞–ª—è–º —Å–µ—Ä–≤–µ—Ä–∞", callback_data=f"view_node_{uuid}")]]
        reply_markup = InlineKeyboardMarkup(keyboard)
        
        await update.callback_query.edit_message_text(
            f"‚ùå –û—à–∏–±–∫–∞: {str(e)}",
            reply_markup=reply_markup
        )
        return NODE_MENU