from telegram import Update, InlineKeyboardButton, InlineKeyboardMarkup
from telegram.ext import ContextTypes
import logging

from modules.config import NODE_MENU
from modules.api.nodes import NodeAPI

logger = logging.getLogger(__name__)

async def show_node_certificate(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """Show node certificate for copying"""
    try:
        callback_data = update.callback_query.data
        node_uuid = None
        
        logger.info(f"Certificate request with callback_data: {callback_data}")
        
        if callback_data == "get_panel_certificate":
            logger.info("Processing panel certificate request")
        elif callback_data.startswith("show_certificate_"):
            node_uuid = callback_data.replace("show_certificate_", "")
            logger.info(f"Certificate request for node: {node_uuid}")
        else:
            logger.error(f"Invalid callback_data: {callback_data}")
            await update.callback_query.edit_message_text("‚ùå –û—à–∏–±–∫–∞: –Ω–µ–≤–µ—Ä–Ω—ã–π —Ç–∏–ø –∑–∞–ø—Ä–æ—Å–∞.")
            return NODE_MENU
        
        await update.callback_query.edit_message_text("üìú –ü–æ–ª—É—á–µ–Ω–∏–µ —Å–µ—Ä—Ç–∏—Ñ–∏–∫–∞—Ç–∞ –ø–∞–Ω–µ–ª–∏...")
        
        # Get certificate from API
        certificate_response = await NodeAPI.get_node_certificate()
        logger.info(f"Certificate response: {certificate_response}")
        
        if certificate_response and 'response' in certificate_response:
            cert_data = certificate_response['response']
            pub_key = cert_data.get("pubKey")
            
            if pub_key:
                logger.info(f"Certificate obtained successfully, length: {len(pub_key)}")
                
                # Create keyboard based on context
                if node_uuid:
                    keyboard = [
                        [InlineKeyboardButton("üëÅÔ∏è –ö –¥–µ—Ç–∞–ª—è–º —Å–µ—Ä–≤–µ—Ä–∞", callback_data=f"view_node_{node_uuid}")],
                        [InlineKeyboardButton("üîô –ö —Å–ø–∏—Å–∫—É —Å–µ—Ä–≤–µ—Ä–æ–≤", callback_data="list_nodes")]
                    ]
                else:
                    keyboard = [
                        [InlineKeyboardButton("üîô –ö –º–µ–Ω—é —Å–µ—Ä–≤–µ—Ä–æ–≤", callback_data="back_to_nodes")]
                    ]
                reply_markup = InlineKeyboardMarkup(keyboard)
                
                # Try different formatting approaches
                try:
                    # First attempt: code block formatting
                    message = "üìú *–°–µ—Ä—Ç–∏—Ñ–∏–∫–∞—Ç –ø–∞–Ω–µ–ª–∏*\n\n"
                    message += "üîê **–ü–µ—Ä–µ–º–µ–Ω–Ω–∞—è –¥–ª—è –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ –Ω–æ–¥—ã:**\n\n"
                    message += f"```bash\nSSL_CERT=\"{pub_key}\"\n```\n\n"
                    message += "üìã **–ò–Ω—Å—Ç—Ä—É–∫—Ü–∏—è –ø–æ —É—Å—Ç–∞–Ω–æ–≤–∫–µ:**\n"
                    message += "1. –°–∫–æ–ø–∏—Ä—É–π—Ç–µ SSL_CERT –ø–µ—Ä–µ–º–µ–Ω–Ω—É—é –≤—ã—à–µ\n"
                    message += "2. –î–æ–±–∞–≤—å—Ç–µ –µ—ë –≤ docker-compose.yml –∏–ª–∏ .env\n"
                    message += "3. –ü–µ—Ä–µ–∑–∞–ø—É—Å—Ç–∏—Ç–µ Remnawave Node\n"
                    message += "4. –ü—Ä–æ–≤–µ—Ä—å—Ç–µ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –∫ –ø–∞–Ω–µ–ª–∏\n\n"
                    message += "‚ö†Ô∏è **–í–∞–∂–Ω–æ:** –•—Ä–∞–Ω–∏—Ç–µ —Å–µ—Ä—Ç–∏—Ñ–∏–∫–∞—Ç –≤ –±–µ–∑–æ–ø–∞—Å–Ω–æ—Å—Ç–∏!"
                    
                    await update.callback_query.edit_message_text(
                        text=message,
                        reply_markup=reply_markup,
                        parse_mode="Markdown"
                    )
                    logger.info("Certificate sent with Markdown formatting")
                    
                except Exception as markdown_error:
                    logger.warning(f"Markdown failed, trying HTML: {markdown_error}")
                    
                    try:
                        # Second attempt: HTML formatting
                        message = "üìú <b>–°–µ—Ä—Ç–∏—Ñ–∏–∫–∞—Ç –ø–∞–Ω–µ–ª–∏</b>\n\n"
                        message += "üîê <b>–ü–µ—Ä–µ–º–µ–Ω–Ω–∞—è –¥–ª—è –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ –Ω–æ–¥—ã:</b>\n\n"
                        message += f"<code>SSL_CERT=\"{pub_key}\"</code>\n\n"
                        message += "üìã <b>–ò–Ω—Å—Ç—Ä—É–∫—Ü–∏—è –ø–æ —É—Å—Ç–∞–Ω–æ–≤–∫–µ:</b>\n"
                        message += "1. –°–∫–æ–ø–∏—Ä—É–π—Ç–µ SSL_CERT –ø–µ—Ä–µ–º–µ–Ω–Ω—É—é –≤—ã—à–µ\n"
                        message += "2. –î–æ–±–∞–≤—å—Ç–µ –µ—ë –≤ docker-compose.yml –∏–ª–∏ .env\n"
                        message += "3. –ü–µ—Ä–µ–∑–∞–ø—É—Å—Ç–∏—Ç–µ Remnawave Node\n"
                        message += "4. –ü—Ä–æ–≤–µ—Ä—å—Ç–µ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –∫ –ø–∞–Ω–µ–ª–∏\n\n"
                        message += "‚ö†Ô∏è <b>–í–∞–∂–Ω–æ:</b> –•—Ä–∞–Ω–∏—Ç–µ —Å–µ—Ä—Ç–∏—Ñ–∏–∫–∞—Ç –≤ –±–µ–∑–æ–ø–∞—Å–Ω–æ—Å—Ç–∏!"
                        
                        await update.callback_query.edit_message_text(
                            text=message,
                            reply_markup=reply_markup,
                            parse_mode="HTML"
                        )
                        logger.info("Certificate sent with HTML formatting")
                        
                    except Exception as html_error:
                        logger.warning(f"HTML failed, using plain text: {html_error}")
                        
                        # Final attempt: plain text
                        message = "üìú –°–µ—Ä—Ç–∏—Ñ–∏–∫–∞—Ç –ø–∞–Ω–µ–ª–∏\n\n"
                        message += "üîê –ü–µ—Ä–µ–º–µ–Ω–Ω–∞—è –¥–ª—è –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ –Ω–æ–¥—ã:\n\n"
                        message += f"SSL_CERT=\"{pub_key}\"\n\n"
                        message += "üìã –ò–Ω—Å—Ç—Ä—É–∫—Ü–∏—è –ø–æ —É—Å—Ç–∞–Ω–æ–≤–∫–µ:\n"
                        message += "1. –°–∫–æ–ø–∏—Ä—É–π—Ç–µ SSL_CERT –ø–µ—Ä–µ–º–µ–Ω–Ω—É—é –≤—ã—à–µ\n"
                        message += "2. –î–æ–±–∞–≤—å—Ç–µ –µ—ë –≤ docker-compose.yml –∏–ª–∏ .env\n"
                        message += "3. –ü–µ—Ä–µ–∑–∞–ø—É—Å—Ç–∏—Ç–µ Remnawave Node\n"
                        message += "4. –ü—Ä–æ–≤–µ—Ä—å—Ç–µ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –∫ –ø–∞–Ω–µ–ª–∏\n\n"
                        message += "‚ö†Ô∏è –í–∞–∂–Ω–æ: –•—Ä–∞–Ω–∏—Ç–µ —Å–µ—Ä—Ç–∏—Ñ–∏–∫–∞—Ç –≤ –±–µ–∑–æ–ø–∞—Å–Ω–æ—Å—Ç–∏!"
                        
                        await update.callback_query.edit_message_text(
                            text=message,
                            reply_markup=reply_markup,
                            parse_mode=None
                        )
                        logger.info("Certificate sent with plain text")
            else:
                raise Exception("–°–µ—Ä—Ç–∏—Ñ–∏–∫–∞—Ç –Ω–µ –Ω–∞–π–¥–µ–Ω –≤ –æ—Ç–≤–µ—Ç–µ API")
        else:
            raise Exception("–ù–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–π –æ—Ç–≤–µ—Ç –æ—Ç API")
        
        return NODE_MENU
        
    except Exception as e:
        logger.error(f"Error showing certificate: {e}")
        
        # Create appropriate keyboard for error case
        if 'node_uuid' in locals() and node_uuid:
            keyboard = [
                [InlineKeyboardButton("üîÑ –ü–æ–ø—Ä–æ–±–æ–≤–∞—Ç—å —Å–Ω–æ–≤–∞", callback_data=f"show_certificate_{node_uuid}")],
                [InlineKeyboardButton("üëÅÔ∏è –ö –¥–µ—Ç–∞–ª—è–º —Å–µ—Ä–≤–µ—Ä–∞", callback_data=f"view_node_{node_uuid}")]
            ]
        else:
            keyboard = [
                [InlineKeyboardButton("üîÑ –ü–æ–ø—Ä–æ–±–æ–≤–∞—Ç—å —Å–Ω–æ–≤–∞", callback_data="get_panel_certificate")],
                [InlineKeyboardButton("üîô –ö –º–µ–Ω—é —Å–µ—Ä–≤–µ—Ä–æ–≤", callback_data="back_to_nodes")]
            ]
        reply_markup = InlineKeyboardMarkup(keyboard)
        
        await update.callback_query.edit_message_text(
            f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ —Å–µ—Ä—Ç–∏—Ñ–∏–∫–∞—Ç–∞: {str(e)}",
            reply_markup=reply_markup
        )
        
        return NODE_MENU

async def show_installation_guide(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """Show detailed installation guide for Remnawave Node"""
    message = "üìö *–†—É–∫–æ–≤–æ–¥—Å—Ç–≤–æ –ø–æ —É—Å—Ç–∞–Ω–æ–≤–∫–µ Remnawave Node*\n\n"
    message += "üê≥ **Docker Compose setup:**\n"
    message += "```bash\nsudo bash -c \"$(curl -sL https://github.com/DigneZzZ/remnawave-scripts/raw/main/remnanode.sh)\" @ install\n```\n\n"
   
    message += "‚ñ∂Ô∏è **–£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –∏ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è:** `remnanode help`"
    
    keyboard = [
        [InlineKeyboardButton("üìú –ü–æ–ª—É—á–∏—Ç—å —Å–µ—Ä—Ç–∏—Ñ–∏–∫–∞—Ç", callback_data="get_panel_certificate")],
        [InlineKeyboardButton("üîô –ù–∞–∑–∞–¥", callback_data="back_to_nodes")]
    ]
    reply_markup = InlineKeyboardMarkup(keyboard)
    
    await update.callback_query.edit_message_text(
        text=message,
        reply_markup=reply_markup,
        parse_mode="Markdown"
    )
    
    return NODE_MENU