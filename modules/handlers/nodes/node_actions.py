from telegram import Update, InlineKeyboardButton, InlineKeyboardMarkup
from telegram.ext import ContextTypes
import logging

from modules.config import NODE_MENU
from modules.api.nodes import NodeAPI

logger = logging.getLogger(__name__)

async def enable_node(update: Update, context: ContextTypes.DEFAULT_TYPE, uuid: str):
    """Enable node"""
    logger.info(f"Attempting to enable node with UUID: {uuid}")
    
    try:
        await update.callback_query.edit_message_text("üîÑ –í–∫–ª—é—á–µ–Ω–∏–µ —Å–µ—Ä–≤–µ—Ä–∞...")
        
        result = await NodeAPI.enable_node(uuid)
        logger.info(f"Enable node API result: {result}")
        
        if result and 'response' in result:
            response_data = result['response']
            if response_data.get("uuid") == uuid or response_data.get("isDisabled") is False:
                message = "‚úÖ *–°–µ—Ä–≤–µ—Ä —É—Å–ø–µ—à–Ω–æ –≤–∫–ª—é—á–µ–Ω*\n\n"
                message += "–°–µ—Ä–≤–µ—Ä —Ç–µ–ø–µ—Ä—å –∞–∫—Ç–∏–≤–µ–Ω –∏ –≥–æ—Ç–æ–≤ –∫ –æ–±—Ä–∞–±–æ—Ç–∫–µ —Å–æ–µ–¥–∏–Ω–µ–Ω–∏–π."
            else:
                message = "‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –≤–∫–ª—é—á–µ–Ω–∏–∏ —Å–µ—Ä–≤–µ—Ä–∞."
        else:
            message = "‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –≤–∫–ª—é—á–µ–Ω–∏–∏ —Å–µ—Ä–≤–µ—Ä–∞."
            
    except Exception as e:
        message = f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –≤–∫–ª—é—á–µ–Ω–∏–∏ —Å–µ—Ä–≤–µ—Ä–∞: {str(e)}"
        logger.error(f"Exception while enabling node: {e}")
    
    keyboard = [
        [InlineKeyboardButton("üëÅÔ∏è –ü–æ–∫–∞–∑–∞—Ç—å –¥–µ—Ç–∞–ª–∏", callback_data=f"view_node_{uuid}")],
        [InlineKeyboardButton("üîô –ö —Å–ø–∏—Å–∫—É —Å–µ—Ä–≤–µ—Ä–æ–≤", callback_data="list_nodes")]
    ]
    reply_markup = InlineKeyboardMarkup(keyboard)
    
    await update.callback_query.edit_message_text(
        message,
        reply_markup=reply_markup,
        parse_mode="Markdown"
    )
    
    return NODE_MENU

async def disable_node(update: Update, context: ContextTypes.DEFAULT_TYPE, uuid: str):
    """Disable node"""
    logger.info(f"Attempting to disable node with UUID: {uuid}")
    
    try:
        await update.callback_query.edit_message_text("üîÑ –û—Ç–∫–ª—é—á–µ–Ω–∏–µ —Å–µ—Ä–≤–µ—Ä–∞...")
        
        result = await NodeAPI.disable_node(uuid)
        logger.info(f"Disable node API result: {result}")
        
        if result and 'response' in result:
            response_data = result['response']
            if response_data.get("uuid") == uuid or response_data.get("isDisabled") is True:
                message = "‚úÖ *–°–µ—Ä–≤–µ—Ä —É—Å–ø–µ—à–Ω–æ –æ—Ç–∫–ª—é—á–µ–Ω*\n\n"
                message += "–°–µ—Ä–≤–µ—Ä –æ—Ç–∫–ª—é—á–µ–Ω –∏ –Ω–µ –ø—Ä–∏–Ω–∏–º–∞–µ—Ç –Ω–æ–≤—ã–µ —Å–æ–µ–¥–∏–Ω–µ–Ω–∏—è."
            else:
                message = "‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–∫–ª—é—á–µ–Ω–∏–∏ —Å–µ—Ä–≤–µ—Ä–∞."
        else:
            message = "‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–∫–ª—é—á–µ–Ω–∏–∏ —Å–µ—Ä–≤–µ—Ä–∞."
            
    except Exception as e:
        message = f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–∫–ª—é—á–µ–Ω–∏–∏ —Å–µ—Ä–≤–µ—Ä–∞: {str(e)}"
        logger.error(f"Exception while disabling node: {e}")
    
    keyboard = [
        [InlineKeyboardButton("üëÅÔ∏è –ü–æ–∫–∞–∑–∞—Ç—å –¥–µ—Ç–∞–ª–∏", callback_data=f"view_node_{uuid}")],
        [InlineKeyboardButton("üîô –ö —Å–ø–∏—Å–∫—É —Å–µ—Ä–≤–µ—Ä–æ–≤", callback_data="list_nodes")]
    ]
    reply_markup = InlineKeyboardMarkup(keyboard)
    
    await update.callback_query.edit_message_text(
        message,
        reply_markup=reply_markup,
        parse_mode="Markdown"
    )
    
    return NODE_MENU

async def restart_node(update: Update, context: ContextTypes.DEFAULT_TYPE, uuid: str):
    """Restart node"""
    logger.info(f"Attempting to restart node with UUID: {uuid}")
    
    try:
        await update.callback_query.edit_message_text("üîÑ –ü–µ—Ä–µ–∑–∞–ø—É—Å–∫ —Å–µ—Ä–≤–µ—Ä–∞...")
        
        result = await NodeAPI.restart_node(uuid)
        logger.info(f"Restart node API result: {result}")
        
        if result and result.get("eventSent"):
            message = "‚úÖ *–ö–æ–º–∞–Ω–¥–∞ –ø–µ—Ä–µ–∑–∞–ø—É—Å–∫–∞ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–∞*\n\n"
            message += "üì§ –ö–æ–º–∞–Ω–¥–∞ –Ω–∞ –ø–µ—Ä–µ–∑–∞–ø—É—Å–∫ —Å–µ—Ä–≤–µ—Ä–∞ —É—Å–ø–µ—à–Ω–æ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–∞.\n\n"
            message += "‚è≥ *–ü—Ä–æ—Ü–µ—Å—Å –ø–µ—Ä–µ–∑–∞–ø—É—Å–∫–∞:*\n"
            message += "‚Ä¢ –û—Å—Ç–∞–Ω–æ–≤–∫–∞ —Å–µ—Ä–≤–∏—Å–æ–≤: ~30 —Å–µ–∫\n"
            message += "‚Ä¢ –ó–∞–ø—É—Å–∫ —Å–µ—Ä–≤–∏—Å–æ–≤: ~30 —Å–µ–∫\n"
            message += "‚Ä¢ –ü–æ–ª–Ω–æ–µ –≤–æ—Å—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∏–µ: ~1-2 –º–∏–Ω\n\n"
            message += "üîç –ü—Ä–æ–≤–µ—Ä—å—Ç–µ —Å—Ç–∞—Ç—É—Å —á–µ—Ä–µ–∑ –Ω–µ—Å–∫–æ–ª—å–∫–æ –º–∏–Ω—É—Ç."
        else:
            message = "‚ùå *–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–µ—Ä–µ–∑–∞–ø—É—Å–∫–µ*\n\n"
            message += "–ù–µ —É–¥–∞–ª–æ—Å—å –æ—Ç–ø—Ä–∞–≤–∏—Ç—å –∫–æ–º–∞–Ω–¥—É –ø–µ—Ä–µ–∑–∞–ø—É—Å–∫–∞."
            
    except Exception as e:
        message = f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–µ—Ä–µ–∑–∞–ø—É—Å–∫–µ —Å–µ—Ä–≤–µ—Ä–∞: {str(e)}"
        logger.error(f"Exception while restarting node: {e}")
    
    keyboard = [
        [InlineKeyboardButton("üìä –ü—Ä–æ–≤–µ—Ä–∏—Ç—å —Å—Ç–∞—Ç—É—Å", callback_data=f"node_stats_{uuid}")],
        [InlineKeyboardButton("üëÅÔ∏è –ü–æ–∫–∞–∑–∞—Ç—å –¥–µ—Ç–∞–ª–∏", callback_data=f"view_node_{uuid}")],
        [InlineKeyboardButton("üîô –ö —Å–ø–∏—Å–∫—É —Å–µ—Ä–≤–µ—Ä–æ–≤", callback_data="list_nodes")]
    ]
    reply_markup = InlineKeyboardMarkup(keyboard)
    
    await update.callback_query.edit_message_text(
        message,
        reply_markup=reply_markup,
        parse_mode="Markdown"
    )
    
    return NODE_MENU

async def delete_node(update: Update, context: ContextTypes.DEFAULT_TYPE, uuid: str):
    """Delete node after confirmation"""
    try:
        await update.callback_query.edit_message_text("üóëÔ∏è –£–¥–∞–ª–µ–Ω–∏–µ —Å–µ—Ä–≤–µ—Ä–∞...")
        
        result = await NodeAPI.delete_node(uuid)
        
        if result:
            message = "‚úÖ *–°–µ—Ä–≤–µ—Ä —É—Å–ø–µ—à–Ω–æ —É–¥–∞–ª–µ–Ω*\n\n"
            message += "–°–µ—Ä–≤–µ—Ä –∏ –≤—Å–µ —Å–≤—è–∑–∞–Ω–Ω—ã–µ —Å –Ω–∏–º –¥–∞–Ω–Ω—ã–µ —É–¥–∞–ª–µ–Ω—ã."
            
            keyboard = [[InlineKeyboardButton("üîô –ö —Å–ø–∏—Å–∫—É —Å–µ—Ä–≤–µ—Ä–æ–≤", callback_data="list_nodes")]]
        else:
            message = "‚ùå *–û—à–∏–±–∫–∞ –ø—Ä–∏ —É–¥–∞–ª–µ–Ω–∏–∏ —Å–µ—Ä–≤–µ—Ä–∞*\n\n"
            message += "–ü–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â–µ —Ä–∞–∑ –∏–ª–∏ –æ–±—Ä–∞—Ç–∏—Ç–µ—Å—å –∫ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä—É."
            
            keyboard = [
                [InlineKeyboardButton("üîÑ –ü–æ–ø—Ä–æ–±–æ–≤–∞—Ç—å —Å–Ω–æ–≤–∞", callback_data=f"delete_node_{uuid}")],
                [InlineKeyboardButton("üëÅÔ∏è –ö –¥–µ—Ç–∞–ª—è–º —Å–µ—Ä–≤–µ—Ä–∞", callback_data=f"view_node_{uuid}")]
            ]
        
        reply_markup = InlineKeyboardMarkup(keyboard)
        
        await update.callback_query.edit_message_text(
            message,
            reply_markup=reply_markup,
            parse_mode="Markdown"
        )
        
        # Clear deletion context
        context.user_data.pop("pending_delete_node", None)
        
        return NODE_MENU
        
    except Exception as e:
        logger.error(f"Error deleting node: {e}")
        
        keyboard = [
            [InlineKeyboardButton("üîÑ –ü–æ–ø—Ä–æ–±–æ–≤–∞—Ç—å —Å–Ω–æ–≤–∞", callback_data=f"delete_node_{uuid}")],
            [InlineKeyboardButton("üëÅÔ∏è –ö –¥–µ—Ç–∞–ª—è–º —Å–µ—Ä–≤–µ—Ä–∞", callback_data=f"view_node_{uuid}")]
        ]
        reply_markup = InlineKeyboardMarkup(keyboard)
        
        await update.callback_query.edit_message_text(
            f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ —É–¥–∞–ª–µ–Ω–∏–∏ —Å–µ—Ä–≤–µ—Ä–∞: {str(e)}",
            reply_markup=reply_markup
        )
        return NODE_MENU