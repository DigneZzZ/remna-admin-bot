from telegram import Update, InlineKeyboardButton, InlineKeyboardMarkup
from telegram.ext import ContextTypes, ConversationHandler
import logging

from modules.config import MAIN_MENU, USER_MENU, SELECTING_USER, WAITING_FOR_INPUT, CONFIRM_ACTION
from modules.utils.auth import check_authorization
from modules.utils.formatters import safe_edit_message
from modules.handlers.start_handler import show_main_menu

# Import all user sub-modules
from modules.handlers.users.user_list import list_users, handle_user_selection
from modules.handlers.users.user_details import show_user_details, handle_user_action
from modules.handlers.users.user_search import handle_search_input
from modules.handlers.users.user_edit import start_edit_user, handle_edit_field_selection, handle_edit_field_value
from modules.handlers.users.user_create import start_create_user, handle_create_user_input, finish_create_user
from modules.handlers.users.user_actions import handle_action_confirmation
from modules.handlers.users.user_delete import handle_delete_confirmation
from modules.handlers.users.user_hwid import handle_hwid_input
from modules.handlers.users.user_stats import show_user_stats

logger = logging.getLogger(__name__)

async def show_users_menu(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """Show users menu with comprehensive options"""
    keyboard = [
        [
            InlineKeyboardButton("üìã –°–ø–∏—Å–æ–∫ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π", callback_data="list_users"),
            InlineKeyboardButton("‚ûï –°–æ–∑–¥–∞—Ç—å", callback_data="create_user")
        ],
        [
            InlineKeyboardButton("üîç –ü–æ–∏—Å–∫ –ø–æ –∏–º–µ–Ω–∏", callback_data="search_user"),
            InlineKeyboardButton("üì± –ü–æ–∏—Å–∫ –ø–æ Telegram ID", callback_data="search_user_telegram")
        ],
        [
            InlineKeyboardButton("üìù –ü–æ–∏—Å–∫ –ø–æ –æ–ø–∏—Å–∞–Ω–∏—é", callback_data="search_user_description"),
            InlineKeyboardButton("üè∑Ô∏è –ü–æ–∏—Å–∫ –ø–æ —Ç–µ–≥—É", callback_data="search_user_tag")
        ],
        [
            InlineKeyboardButton("üìä –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π", callback_data="users_statistics"),
            InlineKeyboardButton("üîß –ú–∞—Å—Å–æ–≤—ã–µ –æ–ø–µ—Ä–∞—Ü–∏–∏", callback_data="bulk_operations")
        ],
        [InlineKeyboardButton("üîô –ù–∞–∑–∞–¥ –≤ –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é", callback_data="back_to_main")]
    ]
    reply_markup = InlineKeyboardMarkup(keyboard)

    message = "üë• *–£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è–º–∏*\n\n"
    message += "üîç *–î–æ—Å—Ç—É–ø–Ω—ã–µ –≤–∞—Ä–∏–∞–Ω—Ç—ã –ø–æ–∏—Å–∫–∞:*\n"
    message += "‚Ä¢ –ü–æ –∏–º–µ–Ω–∏ - —á–∞—Å—Ç–∏—á–Ω–æ–µ —Å–æ–≤–ø–∞–¥–µ–Ω–∏–µ –∏–º–µ–Ω–∏\n"
    message += "‚Ä¢ –ü–æ Telegram ID - —Ç–æ—á–Ω—ã–π –ø–æ–∏—Å–∫ –ø–æ ID\n"
    message += "‚Ä¢ –ü–æ –æ–ø–∏—Å–∞–Ω–∏—é - –ø–æ–∏—Å–∫ –≤ –æ–ø–∏—Å–∞–Ω–∏–∏\n"
    message += "‚Ä¢ –ü–æ —Ç–µ–≥—É - –ø–æ–∏—Å–∫ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π —Å —Ç–µ–≥–æ–º\n\n"
    message += "üìä *–î–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω–æ:*\n"
    message += "‚Ä¢ –û–±—â–∞—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –≤—Å–µ—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π\n"
    message += "‚Ä¢ –ú–∞—Å—Å–æ–≤—ã–µ –æ–ø–µ—Ä–∞—Ü–∏–∏ (–≤–∫–ª—é—á–∏—Ç—å/–æ—Ç–∫–ª—é—á–∏—Ç—å/—É–¥–∞–ª–∏—Ç—å)\n\n"
    message += "–í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ:"

    await safe_edit_message(update.callback_query, message, reply_markup, "Markdown")
    return USER_MENU

async def handle_users_menu(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """Handle users menu selection with all available options"""
    if not check_authorization(update.effective_user):
        await update.callback_query.answer("‚õî –í—ã –Ω–µ –∞–≤—Ç–æ—Ä–∏–∑–æ–≤–∞–Ω—ã –¥–ª—è –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è —ç—Ç–æ–≥–æ –±–æ—Ç–∞.", show_alert=True)
        return ConversationHandler.END
    
    query = update.callback_query
    await query.answer()
    data = query.data

    # Basic operations
    if data == "list_users":
        return await list_users(update, context)
    elif data == "create_user":
        return await start_create_user(update, context)
    elif data == "back_to_main":
        return await show_main_menu(update, context)
    
    # Search operations
    elif data.startswith("search_user"):
        return await handle_search_setup(update, context, data)
    
    # Statistics and bulk operations
    elif data == "users_statistics":
        return await show_users_statistics(update, context)
    elif data == "bulk_operations":
        return await show_bulk_operations_menu(update, context)
    
    # Fallback to users menu
    return USER_MENU

async def handle_search_setup(update: Update, context: ContextTypes.DEFAULT_TYPE, search_type: str):
    """Setup search based on type with enhanced options"""
    search_messages = {
        "search_user": ("üîç –í–≤–µ–¥–∏—Ç–µ —á–∞—Å—Ç—å –∏–º–µ–Ω–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –¥–ª—è –ø–æ–∏—Å–∫–∞:", "username"),
        "search_user_telegram": ("üì± –í–≤–µ–¥–∏—Ç–µ Telegram ID –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è:", "telegram_id"),
        "search_user_description": ("üìù –í–≤–µ–¥–∏—Ç–µ –∫–ª—é—á–µ–≤–æ–µ —Å–ª–æ–≤–æ –¥–ª—è –ø–æ–∏—Å–∫–∞ –≤ –æ–ø–∏—Å–∞–Ω–∏–∏:", "description"),
        "search_user_tag": ("üè∑Ô∏è –í–≤–µ–¥–∏—Ç–µ —Ç–µ–≥ –¥–ª—è –ø–æ–∏—Å–∫–∞:", "tag")
    }
    
    message, search_field = search_messages.get(search_type, ("üîç –í–≤–µ–¥–∏—Ç–µ –ø–æ–∏—Å–∫–æ–≤—ã–π –∑–∞–ø—Ä–æ—Å:", "username"))
    
    # Add search hints
    hints = {
        "username": "üí° –ú–æ–∂–Ω–æ –≤–≤–µ—Å—Ç–∏ —á–∞—Å—Ç—å –∏–º–µ–Ω–∏ (–º–∏–Ω–∏–º—É–º 2 —Å–∏–º–≤–æ–ª–∞)",
        "telegram_id": "üí° –í–≤–µ–¥–∏—Ç–µ —Ç–æ—á–Ω—ã–π Telegram ID (—Ç–æ–ª—å–∫–æ —Ü–∏—Ñ—Ä—ã)",
        "description": "üí° –ü–æ–∏—Å–∫ –ø–æ –∫–ª—é—á–µ–≤—ã–º —Å–ª–æ–≤–∞–º –≤ –æ–ø–∏—Å–∞–Ω–∏–∏",
        "tag": "üí° –í–≤–µ–¥–∏—Ç–µ —Ç–µ–≥ –¥–ª—è –ø–æ–∏—Å–∫–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π"
    }
    
    full_message = f"{message}\n\n{hints.get(search_field, '')}"
    
    # Add cancel button
    keyboard = [[InlineKeyboardButton("‚ùå –û—Ç–º–µ–Ω–∞", callback_data="back_to_users")]]
    reply_markup = InlineKeyboardMarkup(keyboard)
    
    await safe_edit_message(update.callback_query, full_message, reply_markup, "Markdown")
    context.user_data["search_type"] = search_field
    return WAITING_FOR_INPUT

async def show_users_statistics(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """Show comprehensive users statistics"""
    try:
        from modules.api.users import UserAPI
        from modules.utils.formatters import format_bytes
        
        await update.callback_query.edit_message_text("üìä –ó–∞–≥—Ä—É–∑–∫–∞ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π...")
        
        # Get all users for statistics
        users_response = await UserAPI.get_all_users()
        if not users_response or 'response' not in users_response:
            raise Exception("–ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å —Å–ø–∏—Å–æ–∫ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π")
        
        users = users_response['response']
        
        if not users:
            message = "‚ÑπÔ∏è –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–∏ –Ω–µ –Ω–∞–π–¥–µ–Ω—ã."
        else:
            # Calculate statistics
            total_users = len(users)
            status_counts = {}
            total_traffic = 0
            device_usage = 0
            expired_count = 0
            
            for user in users:
                status = user.get('status', 'UNKNOWN')
                status_counts[status] = status_counts.get(status, 0) + 1
                
                # Traffic statistics
                total_traffic += user.get('usedTraffic', 0)
                
                # Device statistics
                if user.get('hwidDeviceLimit', 0) > 0:
                    connected = user.get('hwidConnectedDevices', 0)
                    device_usage += connected
                
                # Expiration check
                if user.get('expireAt'):
                    try:
                        from datetime import datetime
                        expire_date = datetime.fromisoformat(user['expireAt'].replace('Z', '+00:00'))
                        if expire_date < datetime.now().astimezone():
                            expired_count += 1
                    except:
                        pass
            
            message = f"üìä *–°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π*\n\n"
            message += f"üë• *–û–±—â–µ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ:* `{total_users}`\n\n"
            
            # Status breakdown
            message += f"üìà *–ü–æ —Å—Ç–∞—Ç—É—Å–∞–º:*\n"
            status_emojis = {
                'ACTIVE': 'üü¢',
                'DISABLED': 'üî¥',
                'EXPIRED': 'üü°',
                'LIMITED': 'üü†'
            }
            
            for status, count in status_counts.items():
                emoji = status_emojis.get(status, '‚ö™')
                percentage = (count / total_users * 100) if total_users > 0 else 0
                message += f"‚Ä¢ {emoji} {status}: `{count}` ({percentage:.1f}%)\n"
            
            # Traffic statistics
            message += f"\nüìä *–¢—Ä–∞—Ñ–∏–∫:*\n"
            message += f"‚Ä¢ –û–±—â–µ–µ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ: `{format_bytes(total_traffic)}`\n"
            if total_users > 0:
                avg_traffic = total_traffic / total_users
                message += f"‚Ä¢ –°—Ä–µ–¥–Ω–µ–µ –Ω–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è: `{format_bytes(avg_traffic)}`\n"
            
            # Device statistics
            if device_usage > 0:
                message += f"\nüíª *–£—Å—Ç—Ä–æ–π—Å—Ç–≤–∞:*\n"
                message += f"‚Ä¢ –í—Å–µ–≥–æ –ø–æ–¥–∫–ª—é—á–µ–Ω–Ω—ã—Ö: `{device_usage}`\n"
                if total_users > 0:
                    avg_devices = device_usage / total_users
                    message += f"‚Ä¢ –°—Ä–µ–¥–Ω–µ–µ –Ω–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è: `{avg_devices:.1f}`\n"
            
            # Expiration statistics
            if expired_count > 0:
                message += f"\n‚ö†Ô∏è *–ò—Å—Ç–µ—á–µ–Ω–∏—è:*\n"
                message += f"‚Ä¢ –ò—Å—Ç–µ–∫—à–∏—Ö –ø–æ–¥–ø–∏—Å–æ–∫: `{expired_count}`\n"
                percentage = (expired_count / total_users * 100) if total_users > 0 else 0
                message += f"‚Ä¢ –ü—Ä–æ—Ü–µ–Ω—Ç –∏—Å—Ç–µ–∫—à–∏—Ö: `{percentage:.1f}%`\n"
        
        keyboard = [
            [InlineKeyboardButton("üîÑ –û–±–Ω–æ–≤–∏—Ç—å", callback_data="users_statistics")],
            [InlineKeyboardButton("üìä –î–µ—Ç–∞–ª—å–Ω–∞—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞", callback_data="detailed_users_stats")],
            [InlineKeyboardButton("üîô –ù–∞–∑–∞–¥", callback_data="back_to_users")]
        ]
        reply_markup = InlineKeyboardMarkup(keyboard)
        
        await update.callback_query.edit_message_text(
            text=message,
            reply_markup=reply_markup,
            parse_mode="Markdown"
        )
        
        return USER_MENU
        
    except Exception as e:
        logger.error(f"Error showing users statistics: {e}")
        keyboard = [[InlineKeyboardButton("üîô –ù–∞–∑–∞–¥", callback_data="back_to_users")]]
        reply_markup = InlineKeyboardMarkup(keyboard)
        
        await update.callback_query.edit_message_text(
            f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–≥—Ä—É–∑–∫–µ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏: {str(e)}",
            reply_markup=reply_markup
        )
        return USER_MENU

async def show_bulk_operations_menu(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """Show bulk operations menu"""
    keyboard = [
        [
            InlineKeyboardButton("‚úÖ –ú–∞—Å—Å–æ–≤–æ –≤–∫–ª—é—á–∏—Ç—å", callback_data="bulk_enable_users"),
            InlineKeyboardButton("‚ùå –ú–∞—Å—Å–æ–≤–æ –æ—Ç–∫–ª—é—á–∏—Ç—å", callback_data="bulk_disable_users")
        ],
        [
            InlineKeyboardButton("üîÑ –ú–∞—Å—Å–æ–≤–æ —Å–±—Ä–æ—Å–∏—Ç—å —Ç—Ä–∞—Ñ–∏–∫", callback_data="bulk_reset_traffic"),
            InlineKeyboardButton("üì± –ú–∞—Å—Å–æ–≤–æ —Å–±—Ä–æ—Å–∏—Ç—å —É—Å—Ç—Ä–æ–π—Å—Ç–≤–∞", callback_data="bulk_reset_devices")
        ],
        [
            InlineKeyboardButton("üóëÔ∏è –ú–∞—Å—Å–æ–≤–æ —É–¥–∞–ª–∏—Ç—å", callback_data="bulk_delete_users"),
            InlineKeyboardButton("üìÖ –ú–∞—Å—Å–æ–≤–æ –ø—Ä–æ–¥–ª–∏—Ç—å", callback_data="bulk_extend_users")
        ],
        [
            InlineKeyboardButton("üîç –§–∏–ª—å—Ç—Ä –ø–æ —Å—Ç–∞—Ç—É—Å—É", callback_data="filter_by_status"),
            InlineKeyboardButton("üìä –§–∏–ª—å—Ç—Ä –ø–æ —Ç—Ä–∞—Ñ–∏–∫—É", callback_data="filter_by_traffic")
        ],
        [InlineKeyboardButton("üîô –ù–∞–∑–∞–¥", callback_data="back_to_users")]
    ]
    reply_markup = InlineKeyboardMarkup(keyboard)
    
    message = "üîß *–ú–∞—Å—Å–æ–≤—ã–µ –æ–ø–µ—Ä–∞—Ü–∏–∏ —Å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è–º–∏*\n\n"
    message += "‚ö†Ô∏è *–í–Ω–∏–º–∞–Ω–∏–µ!* –ú–∞—Å—Å–æ–≤—ã–µ –æ–ø–µ—Ä–∞—Ü–∏–∏ –≤–ª–∏—è—é—Ç –Ω–∞ –º–Ω–æ–∂–µ—Å—Ç–≤–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π –æ–¥–Ω–æ–≤—Ä–µ–º–µ–Ω–Ω–æ.\n\n"
    message += "üìã *–î–æ—Å—Ç—É–ø–Ω—ã–µ –æ–ø–µ—Ä–∞—Ü–∏–∏:*\n"
    message += "‚Ä¢ –í–∫–ª—é—á–∏—Ç—å/–æ—Ç–∫–ª—é—á–∏—Ç—å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π\n"
    message += "‚Ä¢ –°–±—Ä–æ—Å–∏—Ç—å —Ç—Ä–∞—Ñ–∏–∫ –∏–ª–∏ —É—Å—Ç—Ä–æ–π—Å—Ç–≤–∞\n"
    message += "‚Ä¢ –£–¥–∞–ª–∏—Ç—å –Ω–µ–∞–∫—Ç–∏–≤–Ω—ã—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π\n"
    message += "‚Ä¢ –ü—Ä–æ–¥–ª–∏—Ç—å —Å—Ä–æ–∫ –¥–µ–π—Å—Ç–≤–∏—è\n\n"
    message += "üîç *–§–∏–ª—å—Ç—Ä—ã –ø–æ–º–æ–≥–∞—é—Ç –≤—ã–±—Ä–∞—Ç—å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π –ø–æ –∫—Ä–∏—Ç–µ—Ä–∏—è–º*\n\n"
    message += "–í—ã–±–µ—Ä–∏—Ç–µ –æ–ø–µ—Ä–∞—Ü–∏—é:"
    
    await update.callback_query.edit_message_text(
        text=message,
        reply_markup=reply_markup,
        parse_mode="Markdown"
    )
    
    return USER_MENU

async def handle_text_input(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """Handle all text input with enhanced routing"""
    # Check different input types with proper routing
    if context.user_data.get("waiting_for") == "hwid":
        return await handle_hwid_input(update, context)
    elif context.user_data.get("waiting_for") == "delete_confirmation":
        return await handle_delete_confirmation(update, context)
    elif context.user_data.get("waiting_for") == "edit_field":
        return await handle_edit_field_value(update, context)
    elif context.user_data.get("search_type"):
        return await handle_search_input(update, context)
    elif "create_user_fields" in context.user_data:
        return await handle_create_user_input(update, context)
    elif context.user_data.get("bulk_operation"):
        from modules.handlers.bulk_handlers import handle_bulk_input
        return await handle_bulk_input(update, context)
    else:
        await update.message.reply_text(
            "‚ùå –ù–µ–æ–∂–∏–¥–∞–Ω–Ω—ã–π –≤–≤–æ–¥ —Ç–µ–∫—Å—Ç–∞. –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ –∫–Ω–æ–ø–∫–∏ –º–µ–Ω—é –¥–ª—è –Ω–∞–≤–∏–≥–∞—Ü–∏–∏.",
            reply_markup=InlineKeyboardMarkup([[
                InlineKeyboardButton("üîô –í –º–µ–Ω—é –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π", callback_data="back_to_users")
            ]])
        )
        return await show_users_menu(update, context)

async def handle_back_navigation(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """Handle back navigation from user operations"""
    query = update.callback_query
    if query:
        await query.answer()
        data = query.data
        
        if data == "back_to_users":
            return await show_users_menu(update, context)
        elif data == "back_to_main":
            return await show_main_menu(update, context)
    
    return USER_MENU

# Additional utility functions for user management

async def get_user_count_by_status(status: str = None):
    """Get count of users by status"""
    try:
        from modules.api.users import UserAPI
        
        users_response = await UserAPI.get_all_users()
        if not users_response or 'response' not in users_response:
            return 0
        
        users = users_response['response']
        
        if status:
            return len([u for u in users if u.get('status') == status])
        else:
            return len(users)
    except:
        return 0

async def format_user_summary(user: dict) -> str:
    """Format user summary for lists"""
    from modules.utils.formatters import format_bytes, escape_markdown
    
    status_emojis = {
        'ACTIVE': 'üü¢',
        'DISABLED': 'üî¥',
        'EXPIRED': 'üü°',
        'LIMITED': 'üü†'
    }
    
    status = user.get('status', 'UNKNOWN')
    emoji = status_emojis.get(status, '‚ö™')
    username = escape_markdown(user.get('username', 'N/A'))
    
    summary = f"{emoji} {username}"
    
    # Add traffic info if available
    used_traffic = user.get('usedTraffic', 0)
    if used_traffic > 0:
        summary += f" - {format_bytes(used_traffic)}"
    
    # Add device count if applicable
    devices = user.get('hwidConnectedDevices', 0)
    device_limit = user.get('hwidDeviceLimit', 0)
    if device_limit > 0:
        summary += f" - üì±{devices}/{device_limit}"
    
    return summary

async def validate_user_input(input_type: str, value: str) -> tuple[bool, str]:
    """Validate user input for various operations"""
    if input_type == "telegram_id":
        if not value.isdigit():
            return False, "Telegram ID –¥–æ–ª–∂–µ–Ω —Å–æ–¥–µ—Ä–∂–∞—Ç—å —Ç–æ–ª—å–∫–æ —Ü–∏—Ñ—Ä—ã"
        if len(value) < 5 or len(value) > 15:
            return False, "–ù–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω–∞—è –¥–ª–∏–Ω–∞ Telegram ID"
    
    elif input_type == "username":
        if len(value) < 2:
            return False, "–ò–º—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –¥–æ–ª–∂–Ω–æ —Å–æ–¥–µ—Ä–∂–∞—Ç—å –º–∏–Ω–∏–º—É–º 2 —Å–∏–º–≤–æ–ª–∞"
        if len(value) > 50:
            return False, "–ò–º—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è —Å–ª–∏—à–∫–æ–º –¥–ª–∏–Ω–Ω–æ–µ"
    
    elif input_type == "description":
        if len(value) < 1:
            return False, "–û–ø–∏—Å–∞–Ω–∏–µ –Ω–µ –º–æ–∂–µ—Ç –±—ã—Ç—å –ø—É—Å—Ç—ã–º"
        if len(value) > 200:
            return False, "–û–ø–∏—Å–∞–Ω–∏–µ —Å–ª–∏—à–∫–æ–º –¥–ª–∏–Ω–Ω–æ–µ (–º–∞–∫—Å–∏–º—É–º 200 —Å–∏–º–≤–æ–ª–æ–≤)"
    
    elif input_type == "tag":
        if len(value) < 1:
            return False, "–¢–µ–≥ –Ω–µ –º–æ–∂–µ—Ç –±—ã—Ç—å –ø—É—Å—Ç—ã–º"
        if len(value) > 20:
            return False, "–¢–µ–≥ —Å–ª–∏—à–∫–æ–º –¥–ª–∏–Ω–Ω—ã–π (–º–∞–∫—Å–∏–º—É–º 20 —Å–∏–º–≤–æ–ª–æ–≤)"
    
    return True, "OK"

# Export functions for use in conversation handler
__all__ = [
    'show_users_menu',
    'handle_users_menu', 
    'handle_text_input',
    'handle_search_setup',
    'show_users_statistics',
    'show_bulk_operations_menu',
    'handle_back_navigation',
    'get_user_count_by_status',
    'format_user_summary',
    'validate_user_input'
]